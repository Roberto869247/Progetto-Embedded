
drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad8  080119e0  080119e0  000219e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124b8  080124b8  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  080124b8  080124b8  000224b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124c0  080124c0  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124c0  080124c0  000224c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124c4  080124c4  000224c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080124c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cf0  20000238  08012700  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005f28  08012700  00035f28  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   000489a2  00000000  00000000  00030266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007476  00000000  00000000  00078c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003140  00000000  00000000  00080080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002e28  00000000  00000000  000831c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030721  00000000  00000000  00085fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032eea  00000000  00000000  000b6709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119c66  00000000  00000000  000e95f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00203259  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e058  00000000  00000000  002032ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000238 	.word	0x20000238
 800021c:	00000000 	.word	0x00000000
 8000220:	080119c4 	.word	0x080119c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000023c 	.word	0x2000023c
 800023c:	080119c4 	.word	0x080119c4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <applyAccelerationTrims>:
acc_t acc;
accelerationRuntime_t accelerationRuntime;
accelerometerConfig_t accelerometerConfig;

static void applyAccelerationTrims(const flightDynamicsTrims_t *accelerationTrims)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    acc.accADC[X] -= accelerationTrims->raw[X];
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <applyAccelerationTrims+0x70>)
 80005fe:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000608:	ee07 3a90 	vmov	s15, r3
 800060c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <applyAccelerationTrims+0x70>)
 8000616:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    acc.accADC[Y] -= accelerationTrims->raw[Y];
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <applyAccelerationTrims+0x70>)
 800061c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <applyAccelerationTrims+0x70>)
 8000634:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    acc.accADC[Z] -= accelerationTrims->raw[Z];
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <applyAccelerationTrims+0x70>)
 800063a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800064c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <applyAccelerationTrims+0x70>)
 8000652:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000254 	.word	0x20000254

08000668 <accInitFilters>:


static void accInitFilters(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	accelerometerConfig.acc_lpf_hz = 50;
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <accInitFilters+0xc0>)
 8000670:	2232      	movs	r2, #50	; 0x32
 8000672:	801a      	strh	r2, [r3, #0]

    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? accelerometerConfig.acc_lpf_hz : 0;
 8000674:	4b2d      	ldr	r3, [pc, #180]	; (800072c <accInitFilters+0xc4>)
 8000676:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <accInitFilters+0x1c>
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <accInitFilters+0xc0>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	e000      	b.n	8000686 <accInitFilters+0x1e>
 8000684:	2300      	movs	r3, #0
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <accInitFilters+0xc8>)
 8000688:	8013      	strh	r3, [r2, #0]
    if (accelerationRuntime.accLpfCutHz) {
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <accInitFilters+0xc8>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d02c      	beq.n	80006ec <accInitFilters+0x84>
        const uint32_t accSampleTimeUs = 1e6 / acc.sampleRateHz;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <accInitFilters+0xc4>)
 8000694:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006a0:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000720 <accInitFilters+0xb8>
 80006a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006ac:	ee17 3a90 	vmov	r3, s15
 80006b0:	603b      	str	r3, [r7, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	e016      	b.n	80006e6 <accInitFilters+0x7e>
            biquadFilterInitLPF(&accelerationRuntime.accFilter[axis], accelerationRuntime.accLpfCutHz, accSampleTimeUs);
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <accInitFilters+0xc8>)
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <accInitFilters+0xc8>)
 80006ca:	8812      	ldrh	r2, [r2, #0]
 80006cc:	ee07 2a90 	vmov	s15, r2
 80006d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006d4:	6839      	ldr	r1, [r7, #0]
 80006d6:	eeb0 0a67 	vmov.f32	s0, s15
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fbe2 	bl	8000ea4 <biquadFilterInitLPF>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	dde5      	ble.n	80006b8 <accInitFilters+0x50>
        }
    }

    accelerationRuntime.accumulatedMeasurementCount = 0;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <accInitFilters+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    accelerationRuntime.accumulatedMeasurements[0] = 0.0f;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <accInitFilters+0xc8>)
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    accelerationRuntime.accumulatedMeasurements[1] = 0.0f;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <accInitFilters+0xc8>)
 8000700:	f04f 0200 	mov.w	r2, #0
 8000704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    accelerationRuntime.accumulatedMeasurements[2] = 0.0f;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <accInitFilters+0xc8>)
 800070a:	f04f 0200 	mov.w	r2, #0
 800070e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	f3af 8000 	nop.w
 8000720:	00000000 	.word	0x00000000
 8000724:	412e8480 	.word	0x412e8480
 8000728:	20000348 	.word	0x20000348
 800072c:	20000254 	.word	0x20000254
 8000730:	200002b4 	.word	0x200002b4

08000734 <setAccelerationTrims>:

static void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    accelerationRuntime.accelerationTrims = accelerationTrimsToUse;
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <setAccelerationTrims+0x1c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200002b4 	.word	0x200002b4

08000754 <accInit>:

void accInit(sensorAccInitFuncPtr initFn, sensorAccReadFuncPtr readFn) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	memset(&acc, 0, sizeof(acc));
 800075e:	2260      	movs	r2, #96	; 0x60
 8000760:	2100      	movs	r1, #0
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <accInit+0xa0>)
 8000764:	f00e fabb 	bl	800ecde <memset>
	// copy over the common gyro mpu settings
	acc.dev.gyro = &gyro.gyroSensor1.gyroDev;
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <accInit+0xa0>)
 800076a:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <accInit+0xa4>)
 800076c:	621a      	str	r2, [r3, #32]
	acc.dev.acc_high_fsr = accelerometerConfig.acc_high_fsr;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <accInit+0xa8>)
 8000770:	78da      	ldrb	r2, [r3, #3]
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <accInit+0xa0>)
 8000774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Copy alignment from active gyro, as all production boards use acc-gyro-combi chip.
	// Exceptions are STM32F3DISCOVERY and STM32F411DISCOVERY, and (may be) handled in future enhancement.

	sensor_align_e alignment = gyro.gyroSensor1.gyroDev.gyroAlign;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <accInit+0xac>)
 800077a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800077e:	73fb      	strb	r3, [r7, #15]
	sensorAlignment_t customAlignment;
	buildAlignmentFromStandardAlignment(&customAlignment, alignment);
 8000780:	7bfa      	ldrb	r2, [r7, #15]
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f006 fbff 	bl	8006f8c <buildAlignmentFromStandardAlignment>

	acc.dev.accAlign = alignment;
 800078e:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <accInit+0xa0>)
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	7793      	strb	r3, [r2, #30]
	buildRotationMatrixFromAlignment(&customAlignment, &acc.dev.rotationMatrix);
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	491a      	ldr	r1, [pc, #104]	; (8000804 <accInit+0xb0>)
 800079a:	4618      	mov	r0, r3
 800079c:	f006 fbb2 	bl	8006f04 <buildRotationMatrixFromAlignment>

	acc.dev.initFn = initFn;
 80007a0:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <accInit+0xa0>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6053      	str	r3, [r2, #4]
	acc.dev.readFn = readFn;
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <accInit+0xa0>)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	6093      	str	r3, [r2, #8]

	acc.dev.acc_1G = 256; // set default
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <accInit+0xa0>)
 80007ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b2:	819a      	strh	r2, [r3, #12]
	acc.dev.initFn(&acc.dev); // driver initialisation
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <accInit+0xa0>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <accInit+0xa0>)
 80007ba:	4798      	blx	r3
	acc.dev.acc_1G_rec = 1.0f / acc.dev.acc_1G;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <accInit+0xa0>)
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <accInit+0xa0>)
 80007d2:	edc3 7a00 	vstr	s15, [r3]

	acc.sampleRateHz = 1000;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <accInit+0xa0>)
 80007d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	setAccelerationTrims(&accelerometerConfig.accZero);
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <accInit+0xb4>)
 80007e2:	f7ff ffa7 	bl	8000734 <setAccelerationTrims>

	accInitFilters();
 80007e6:	f7ff ff3f 	bl	8000668 <accInitFilters>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000254 	.word	0x20000254
 80007f8:	2000053c 	.word	0x2000053c
 80007fc:	20000348 	.word	0x20000348
 8000800:	20000500 	.word	0x20000500
 8000804:	2000027c 	.word	0x2000027c
 8000808:	2000034c 	.word	0x2000034c

0800080c <accUpdate>:

void accUpdate(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
    if (!acc.dev.readFn(&acc.dev)) {
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <accUpdate+0x10c>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	4840      	ldr	r0, [pc, #256]	; (8000918 <accUpdate+0x10c>)
 8000818:	4798      	blx	r3
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d077      	beq.n	8000910 <accUpdate+0x104>
        return;
    }
    acc.isAccelUpdatedAtLeastOnce = true;
 8000820:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <accUpdate+0x10c>)
 8000822:	2201      	movs	r2, #1
 8000824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e00e      	b.n	800084c <accUpdate+0x40>
        acc.accADC[axis] = acc.dev.accADC[axis];
 800082e:	4a3a      	ldr	r2, [pc, #232]	; (8000918 <accUpdate+0x10c>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3304      	adds	r3, #4
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4937      	ldr	r1, [pc, #220]	; (8000918 <accUpdate+0x10c>)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3314      	adds	r3, #20
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	440b      	add	r3, r1
 8000844:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b02      	cmp	r3, #2
 8000850:	dded      	ble.n	800082e <accUpdate+0x22>
    }

    if (accelerationRuntime.accLpfCutHz) {
 8000852:	4b32      	ldr	r3, [pc, #200]	; (800091c <accUpdate+0x110>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d025      	beq.n	80008a6 <accUpdate+0x9a>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	e01f      	b.n	80008a0 <accUpdate+0x94>
            acc.accADC[axis] = biquadFilterApply(&accelerationRuntime.accFilter[axis], acc.accADC[axis]);
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	4613      	mov	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	4a2c      	ldr	r2, [pc, #176]	; (800091c <accUpdate+0x110>)
 800086c:	4413      	add	r3, r2
 800086e:	1d1a      	adds	r2, r3, #4
 8000870:	4929      	ldr	r1, [pc, #164]	; (8000918 <accUpdate+0x10c>)
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	3314      	adds	r3, #20
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	edd3 7a00 	vldr	s15, [r3]
 800087e:	eeb0 0a67 	vmov.f32	s0, s15
 8000882:	4610      	mov	r0, r2
 8000884:	f000 fb26 	bl	8000ed4 <biquadFilterApply>
 8000888:	eef0 7a40 	vmov.f32	s15, s0
 800088c:	4a22      	ldr	r2, [pc, #136]	; (8000918 <accUpdate+0x10c>)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3314      	adds	r3, #20
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3301      	adds	r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	dddc      	ble.n	8000860 <accUpdate+0x54>
        }
    }

    alignSensorViaRotation(acc.accADC, acc.dev.accAlign);
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <accUpdate+0x10c>)
 80008a8:	7f9b      	ldrb	r3, [r3, #30]
 80008aa:	4619      	mov	r1, r3
 80008ac:	481c      	ldr	r0, [pc, #112]	; (8000920 <accUpdate+0x114>)
 80008ae:	f006 fbbb 	bl	8007028 <alignSensorViaRotation>

    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <accUpdate+0x110>)
 80008b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe9c 	bl	80005f4 <applyAccelerationTrims>

    ++accelerationRuntime.accumulatedMeasurementCount;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <accUpdate+0x110>)
 80008be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a15      	ldr	r2, [pc, #84]	; (800091c <accUpdate+0x110>)
 80008c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	e01b      	b.n	8000908 <accUpdate+0xfc>
        accelerationRuntime.accumulatedMeasurements[axis] += acc.accADC[axis];
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <accUpdate+0x110>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3320      	adds	r3, #32
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	3304      	adds	r3, #4
 80008dc:	ed93 7a00 	vldr	s14, [r3]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <accUpdate+0x10c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3314      	adds	r3, #20
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <accUpdate+0x110>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3320      	adds	r3, #32
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	3304      	adds	r3, #4
 80008fe:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3301      	adds	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	dde0      	ble.n	80008d0 <accUpdate+0xc4>
 800090e:	e000      	b.n	8000912 <accUpdate+0x106>
        return;
 8000910:	bf00      	nop
    }
}
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000254 	.word	0x20000254
 800091c:	200002b4 	.word	0x200002b4
 8000920:	200002a4 	.word	0x200002a4

08000924 <accGetAccumulationAverage>:

bool accGetAccumulationAverage(float *accumulationAverage)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    if (accelerationRuntime.accumulatedMeasurementCount > 0) {
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800092e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000932:	2b00      	cmp	r3, #0
 8000934:	dd2e      	ble.n	8000994 <accGetAccumulationAverage+0x70>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e022      	b.n	8000982 <accGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accelerationRuntime.accumulatedMeasurements[axis] / accelerationRuntime.accumulatedMeasurementCount;
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3320      	adds	r3, #32
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	3304      	adds	r3, #4
 8000948:	edd3 6a00 	vldr	s13, [r3]
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800094e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000952:	ee07 3a90 	vmov	s15, r3
 8000956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000966:	edc3 7a00 	vstr	s15, [r3]
            accelerationRuntime.accumulatedMeasurements[axis] = 0.0f;
 800096a:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3320      	adds	r3, #32
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	3304      	adds	r3, #4
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3301      	adds	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b02      	cmp	r3, #2
 8000986:	ddd9      	ble.n	800093c <accGetAccumulationAverage+0x18>
        }
        accelerationRuntime.accumulatedMeasurementCount = 0;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800098a:	2200      	movs	r2, #0
 800098c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return true;
 8000990:	2301      	movs	r3, #1
 8000992:	e010      	b.n	80009b6 <accGetAccumulationAverage+0x92>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	e009      	b.n	80009ae <accGetAccumulationAverage+0x8a>
            accumulationAverage[axis] = 0.0f;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	f04f 0200 	mov.w	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	ddf2      	ble.n	800099a <accGetAccumulationAverage+0x76>
        }
        return false;
 80009b4:	2300      	movs	r3, #0
    }
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	200002b4 	.word	0x200002b4

080009c8 <attitudeInit>:
 */

#include "attitude.h"
#include "imu.h"

void attitudeInit(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	imuInit();
 80009cc:	f002 fb8a 	bl	80030e4 <imuInit>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <attitudeUpdate>:

void attitudeUpdate(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	imuCalculateEstimatedAttitude();
 80009d8:	f003 f894 	bl	8003b04 <imuCalculateEstimatedAttitude>
	imuCalculateThrottleAngleCorrection();
 80009dc:	f003 f974 	bl	8003cc8 <imuCalculateThrottleAngleCorrection>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <barometerConfig>:
    ioTag_t baro_xclr_tag;
} barometerConfig_t;

barometerConfig_t barometerConfig_System;

static inline const barometerConfig_t* barometerConfig(void) { return &barometerConfig_System; }
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <barometerConfig+0x10>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000410 	.word	0x20000410

080009f8 <pgResetFn_barometerConfig>:

static void pgResetFn_barometerConfig(barometerConfig_t *barometerConfig)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    barometerConfig->baro_hardware = BARO_LPS;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2205      	movs	r2, #5
 8000a04:	715a      	strb	r2, [r3, #5]
    barometerConfig->baro_busType = BUS_TYPE_I2C;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
    barometerConfig->baro_i2c_device = I2C_DEV_TO_CFG(BARO_I2C_INSTANCE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	70da      	strb	r2, [r3, #3]
    barometerConfig->baro_i2c_address = DEFAULT_BARO_I2C_ADDRESS;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	711a      	strb	r2, [r3, #4]
    barometerConfig->baro_spi_device = SPI_DEV_TO_CFG(SPIINVALID);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	705a      	strb	r2, [r3, #1]
    barometerConfig->baro_spi_csn = IO_TAG_NONE;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	709a      	strb	r2, [r3, #2]
    barometerConfig->baro_eoc_tag = IO_TAG(BARO_EOC_PIN);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	719a      	strb	r2, [r3, #6]
    barometerConfig->baro_xclr_tag = IO_TAG(BARO_XCLR_PIN);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	71da      	strb	r2, [r3, #7]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <lpsNothing>:

static void lpsNothing(baroDev_t *baro)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    (void)(baro);
    return;
 8000a44:	bf00      	nop
}
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <lpsNothingBool>:

static bool lpsNothingBool(baroDev_t *baro)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	(void)(baro);
    return true;
 8000a58:	2301      	movs	r3, #1
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <lpsNothingCalculate>:

static void lpsNothingCalculate(int32_t *pressure, int32_t *temperature)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
	(void)(*pressure);
	(void)(*temperature);
    return;
 8000a70:	bf00      	nop
}
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <lpsDetect>:

static bool lpsDetect(baroDev_t *baro)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    baro->combined_read = true;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    baro->ut_delay = 1;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    baro->up_delay = 1000000 / 24;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f24a 22c2 	movw	r2, #41666	; 0xa2c2
 8000a9a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    baro->start_ut = lpsNothing;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <lpsDetect+0x68>)
 8000aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    baro->get_ut = lpsNothingBool;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <lpsDetect+0x6c>)
 8000aaa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    baro->read_ut = lpsNothingBool;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <lpsDetect+0x6c>)
 8000ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    baro->start_up = lpsNothing;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <lpsDetect+0x68>)
 8000aba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    baro->get_up = lpsNothingBool;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <lpsDetect+0x6c>)
 8000ac2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    baro->read_up = lpsNothingBool;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <lpsDetect+0x6c>)
 8000aca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    baro->calculate = lpsNothingCalculate;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <lpsDetect+0x70>)
 8000ad2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return true;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	08000a3d 	.word	0x08000a3d
 8000ae8:	08000a51 	.word	0x08000a51
 8000aec:	08000a67 	.word	0x08000a67

08000af0 <baroDetect>:

static bool baroDetect(baroDev_t *baroDev, baroSensor_e baroHardwareToUse)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]
    extDevice_t *dev = &baroDev->dev;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60bb      	str	r3, [r7, #8]

    // Detect what pressure sensors are available. baro->update() is set to sensor-specific update function

    baroSensor_e baroHardware = baroHardwareToUse;
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	73fb      	strb	r3, [r7, #15]

    switch (barometerConfig()->baro_busType) {
 8000b04:	f7ff ff6e 	bl	80009e4 <barometerConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d12b      	bne.n	8000b68 <baroDetect+0x78>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, barometerConfig()->baro_i2c_device);
 8000b10:	f7ff ff68 	bl	80009e4 <barometerConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68b8      	ldr	r0, [r7, #8]
 8000b1c:	f000 f8c6 	bl	8000cac <i2cBusSetInstance>
        dev->busType_u.i2c.address = barometerConfig()->baro_i2c_address;
 8000b20:	f7ff ff60 	bl	80009e4 <barometerConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	791a      	ldrb	r2, [r3, #4]
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	711a      	strb	r2, [r3, #4]
        break;
 8000b2c:	bf00      	nop
    default:
        return false;
    }

    switch (baroHardware) {
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	2b0a      	cmp	r3, #10
 8000b32:	d827      	bhi.n	8000b84 <baroDetect+0x94>
 8000b34:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <baroDetect+0x4c>)
 8000b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3a:	bf00      	nop
 8000b3c:	08000b6d 	.word	0x08000b6d
 8000b40:	08000b7f 	.word	0x08000b7f
 8000b44:	08000b6d 	.word	0x08000b6d
 8000b48:	08000b6d 	.word	0x08000b6d
 8000b4c:	08000b7f 	.word	0x08000b7f
 8000b50:	08000b6d 	.word	0x08000b6d
 8000b54:	08000b7f 	.word	0x08000b7f
 8000b58:	08000b7f 	.word	0x08000b7f
 8000b5c:	08000b7f 	.word	0x08000b7f
 8000b60:	08000b7f 	.word	0x08000b7f
 8000b64:	08000b7f 	.word	0x08000b7f
        return false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e011      	b.n	8000b90 <baroDetect+0xa0>
    case BARO_DEFAULT:
    case BARO_BMP085:
    case BARO_MS5611:
    case BARO_LPS:
        if (lpsDetect(baroDev)) {
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff85 	bl	8000a7c <lpsDetect>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <baroDetect+0x8e>
            baroHardware = BARO_LPS;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	73fb      	strb	r3, [r7, #15]
            break;
 8000b7c:	e002      	b.n	8000b84 <baroDetect+0x94>
    case BARO_BMP280:
    case BARO_QMP6988:
    case BARO_2SMPB_02B:
    case BARO_VIRTUAL:
    case BARO_NONE:
        baroHardware = BARO_NONE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
        break;
 8000b82:	bf00      	nop
    }

    if (baroHardware == BARO_NONE) {
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <baroDetect+0x9e>
        return false;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <baroDetect+0xa0>
    }

    return true;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <pressureToAltitude>:

static float pressureToAltitude(const float pressure)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (1.0f - powf(pressure / 101325.0f, 0.190295f)) * 4433000.0f;
 8000ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000bd8 <pressureToAltitude+0x40>
 8000baa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000bae:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000bdc <pressureToAltitude+0x44>
 8000bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8000bb6:	f010 fd3b 	bl	8011630 <powf>
 8000bba:	eef0 7a40 	vmov.f32	s15, s0
 8000bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000be0 <pressureToAltitude+0x48>
 8000bca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000bce:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	47c5e680 	.word	0x47c5e680
 8000bdc:	3e42dcb1 	.word	0x3e42dcb1
 8000be0:	4a8748d0 	.word	0x4a8748d0

08000be4 <baroInit>:

void baroInit(sensorBaroInitFuncPtr initFn, sensorBaroReadFuncPtr readFn)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	pgResetFn_barometerConfig(&barometerConfig_System);
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <baroInit+0x6c>)
 8000bf0:	f7ff ff02 	bl	80009f8 <pgResetFn_barometerConfig>
    baroDetect(&baro.dev, barometerConfig()->baro_hardware);
 8000bf4:	f7ff fef6 	bl	80009e4 <barometerConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	795b      	ldrb	r3, [r3, #5]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4815      	ldr	r0, [pc, #84]	; (8000c54 <baroInit+0x70>)
 8000c00:	f7ff ff76 	bl	8000af0 <baroDetect>
    baro.dev.read_ut = readFn;
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <baroInit+0x70>)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    initFn(&baro.dev);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <baroInit+0x70>)
 8000c10:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <baroInit+0x70>)
 8000c14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd10      	ble.n	8000c3e <baroInit+0x5a>
    	baro.ground_altitude = pressureToAltitude(baro.dev.baroADC);
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <baroInit+0x70>)
 8000c1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2e:	f7ff ffb3 	bl	8000b98 <pressureToAltitude>
 8000c32:	eef0 7a40 	vmov.f32	s15, s0
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <baroInit+0x70>)
 8000c38:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    } else {
    	baro.ground_altitude = 0;
    }
}
 8000c3c:	e004      	b.n	8000c48 <baroInit+0x64>
    	baro.ground_altitude = 0;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <baroInit+0x70>)
 8000c40:	f04f 0200 	mov.w	r2, #0
 8000c44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000410 	.word	0x20000410
 8000c54:	20000358 	.word	0x20000358

08000c58 <baroUpdate>:

void baroUpdate(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
    baro.dev.read_ut(&baro.dev);
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <baroUpdate+0x50>)
 8000c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <baroUpdate+0x50>)
 8000c66:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <baroUpdate+0x50>)
 8000c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dd16      	ble.n	8000ca0 <baroUpdate+0x48>
        const float altitude = pressureToAltitude(baro.dev.baroADC);
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <baroUpdate+0x50>)
 8000c74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c80:	eeb0 0a67 	vmov.f32	s0, s15
 8000c84:	f7ff ff88 	bl	8000b98 <pressureToAltitude>
 8000c88:	ed87 0a01 	vstr	s0, [r7, #4]
        baro.altitude = altitude - baro.ground_altitude;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <baroUpdate+0x50>)
 8000c8e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8000c92:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c9a:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <baroUpdate+0x50>)
 8000c9c:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    }
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000358 	.word	0x20000358

08000cac <i2cBusSetInstance>:

#define I2CDEV_COUNT 4
#define I2C_CFG_TO_DEV(x)   ((x) - 1)

bool i2cBusSetInstance(extDevice_t *dev, uint32_t device)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    // I2C bus structures to associate with external devices
    static busDevice_t i2cBus[I2CDEV_COUNT];

    if ((device < 1) || (device > I2CDEV_COUNT)) {
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <i2cBusSetInstance+0x16>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d901      	bls.n	8000cc6 <i2cBusSetInstance+0x1a>
        return false;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e016      	b.n	8000cf4 <i2cBusSetInstance+0x48>
    }

    dev->bus = &i2cBus[I2C_CFG_TO_DEV(device)];
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <i2cBusSetInstance+0x54>)
 8000cd4:	441a      	add	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
    dev->bus->busType = BUS_TYPE_I2C;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
    dev->bus->busType_u.i2c.device = I2C_CFG_TO_DEV(device);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	b252      	sxtb	r2, r2
 8000cf0:	711a      	strb	r2, [r3, #4]

    return true;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20000418 	.word	0x20000418

08000d04 <controlMotorInit>:

#include "control_motor.h"

#include "pid.h"

void controlMotorInit(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	pidInit();
 8000d08:	f005 f9de 	bl	80060c8 <pidInit>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <controlMotorUpdate>:

void controlMotorUpdate(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    pidIncUpdateCounter();
 8000d14:	f006 f81a 	bl	8006d4c <pidIncUpdateCounter>
    processRcCommand();
 8000d18:	f006 f838 	bl	8006d8c <processRcCommand>
    pidController();
 8000d1c:	f005 fb3e 	bl	800639c <pidController>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <filterGetNotchQ>:
#include "filter.h"
#include "flight_math.h"


float filterGetNotchQ(float centerFreq, float cutoffFreq)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d2e:	edc7 0a00 	vstr	s1, [r7]
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 8000d32:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d36:	edd7 7a00 	vldr	s15, [r7]
 8000d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d42:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8000d46:	edd7 7a00 	vldr	s15, [r7]
 8000d4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d56:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <nullFilterApply>:

float nullFilterApply(filter_t *filter, float input)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	ed87 0a00 	vstr	s0, [r7]
    return input;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	ee07 3a90 	vmov	s15, r3
}
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <pt1FilterGain>:

float pt1FilterGain(float f_cut, float dT)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d92:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8000d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000dd4 <pt1FilterGain+0x4c>
 8000d9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000daa:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT / (RC + dT);
 8000dae:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db2:	edd7 7a00 	vldr	s15, [r7]
 8000db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dba:	ed97 7a00 	vldr	s14, [r7]
 8000dbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dc2:	eef0 7a66 	vmov.f32	s15, s13
}
 8000dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40c90fdb 	.word	0x40c90fdb

08000dd8 <pt1FilterInit>:

void pt1FilterInit(pt1Filter_t *filter, float k)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
    filter->k = k;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	605a      	str	r2, [r3, #4]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <pt1FilterApply>:

float pt1FilterApply(pt1Filter_t *filter, float input)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	ed93 7a00 	vldr	s14, [r3]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	edd3 7a00 	vldr	s15, [r3]
 8000e1c:	ed97 6a00 	vldr	s12, [r7]
 8000e20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	ee07 3a90 	vmov	s15, r3
}
 8000e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6178      	str	r0, [r7, #20]
 8000e50:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e54:	60f9      	str	r1, [r7, #12]
 8000e56:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	ed87 1a00 	vstr	s2, [r7]
 8000e60:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	ed97 1a00 	vldr	s2, [r7]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	edd7 0a02 	vldr	s1, [r7, #8]
 8000e6e:	68f9      	ldr	r1, [r7, #12]
 8000e70:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f000 f877 	bl	8000f68 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	6a1a      	ldr	r2, [r3, #32]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	61da      	str	r2, [r3, #28]
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <biquadFilterInitLPF>:

#define BIQUAD_Q 1.0f / sqrtf(2.0f)

void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eb0:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 8000eb2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000ed0 <biquadFilterInitLPF+0x2c>
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff ffc0 	bl	8000e48 <biquadFilterInit>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	3f3504f3 	.word	0x3f3504f3

08000ed4 <biquadFilterApply>:

float biquadFilterApply(biquadFilter_t *filter, float input)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ed93 7a00 	vldr	s14, [r3]
 8000ee6:	edd7 7a00 	vldr	s15, [r7]
 8000eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef8:	edc7 7a03 	vstr	s15, [r7, #12]

    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f02:	edd7 7a00 	vldr	s15, [r7]
 8000f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f32:	edd7 7a00 	vldr	s15, [r7]
 8000f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edc3 7a06 	vstr	s15, [r3, #24]

    return result;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	ee07 3a90 	vmov	s15, r3
}
 8000f58:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6178      	str	r0, [r7, #20]
 8000f70:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f74:	60f9      	str	r1, [r7, #12]
 8000f76:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	ed87 1a00 	vstr	s2, [r7]
 8000f80:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 8000f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f86:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001140 <biquadFilterUpdate+0x1d8>
 8000f8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001144 <biquadFilterUpdate+0x1dc>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8000fa8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000fac:	f000 fa24 	bl	80013f8 <sin_approx>
 8000fb0:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 8000fb4:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000fb8:	f000 fac8 	bl	800154c <cos_approx>
 8000fbc:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 8000fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000fc8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd0:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d04f      	beq.n	800107a <biquadFilterUpdate+0x112>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dc6e      	bgt.n	80010bc <biquadFilterUpdate+0x154>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <biquadFilterUpdate+0x80>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d02a      	beq.n	800103c <biquadFilterUpdate+0xd4>
 8000fe6:	e069      	b.n	80010bc <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 8000fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001000:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 8001016:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800101a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8001028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800102c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 800103a:	e03f      	b.n	80010bc <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001042:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 8001044:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001048:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800104c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800105c:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 8001066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800106a:	edd7 7a08 	vldr	s15, [r7, #32]
 800106e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8001078:	e020      	b.n	80010bc <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	6a3a      	ldr	r2, [r7, #32]
 800107e:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 8001088:	edd7 7a08 	vldr	s15, [r7, #32]
 800108c:	eef1 7a67 	vneg.f32	s15, s15
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 8001096:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800109a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 80010a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 80010ba:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 80010bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c8:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	edd3 6a00 	vldr	s13, [r3]
 80010d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80010fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80010fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	edd3 6a03 	vldr	s13, [r3, #12]
 800110e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001122:	ed97 7a07 	vldr	s14, [r7, #28]
 8001126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40c90fdb 	.word	0x40c90fdb
 8001144:	358637bd 	.word	0x358637bd

08001148 <pt2FilterGain>:

float pt2FilterGain(float f_cut, float dT)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001152:	edc7 0a00 	vstr	s1, [r7]
    const float order = 2.0f;
 8001156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800115a:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 800115c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001160:	edd7 7a05 	vldr	s15, [r7, #20]
 8001164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001168:	eef0 0a47 	vmov.f32	s1, s14
 800116c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001170:	f010 fa5e 	bl	8011630 <powf>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800117c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	f010 fbb4 	bl	80118f0 <sqrtf>
 8001188:	eeb0 7a40 	vmov.f32	s14, s0
 800118c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001194:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 8001198:	edd7 7a04 	vldr	s15, [r7, #16]
 800119c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80011e0 <pt2FilterGain+0x98>
 80011a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b8:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.553773974f * M_PIf * f_cut);
    // where 1.553773974 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 2
    return dT / (RC + dT);
 80011bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c0:	edd7 7a00 	vldr	s15, [r7]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	ed97 7a00 	vldr	s14, [r7]
 80011cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40490fdb 	.word	0x40490fdb

080011e4 <pt2FilterInit>:

void pt2FilterInit(pt2Filter_t *filter, float k)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
    filter->k = k;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	609a      	str	r2, [r3, #8]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <pt2FilterApply>:

float pt2FilterApply(pt2Filter_t *filter, float input)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	ed93 7a01 	vldr	s14, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edd3 6a02 	vldr	s13, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001230:	ed97 6a00 	vldr	s12, [r7]
 8001234:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state = filter->state + filter->k * (filter->state1 - filter->state);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	ed93 7a00 	vldr	s14, [r3]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	ed93 6a01 	vldr	s12, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	ee07 3a90 	vmov	s15, r3
}
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <pt3FilterGain>:

float pt3FilterGain(float f_cut, float dT)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001292:	edc7 0a00 	vstr	s1, [r7]
    const float order = 3.0f;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <pt3FilterGain+0x94>)
 8001298:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 800129a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800129e:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012a6:	eef0 0a47 	vmov.f32	s1, s14
 80012aa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012ae:	f010 f9bf 	bl	8011630 <powf>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	f010 fb15 	bl	80118f0 <sqrtf>
 80012c6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d2:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 80012d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001320 <pt3FilterGain+0x98>
 80012e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f6:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.961459177f * M_PIf * f_cut);
    // where 1.961459177 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 3
    return dT / (RC + dT);
 80012fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80012fe:	edd7 7a00 	vldr	s15, [r7]
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	ed97 7a00 	vldr	s14, [r7]
 800130a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800130e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40400000 	.word	0x40400000
 8001320:	40490fdb 	.word	0x40490fdb

08001324 <pt3FilterInit>:

void pt3FilterInit(pt3Filter_t *filter, float k)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
    filter->state2 = 0.0f;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
    filter->k = k;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	60da      	str	r2, [r3, #12]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <pt3FilterApply>:
float pt3FilterApply(pt3Filter_t *filter, float input)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	ed93 7a01 	vldr	s14, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edd3 7a01 	vldr	s15, [r3, #4]
 8001378:	ed97 6a00 	vldr	s12, [r7]
 800137c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state2 = filter->state2 + filter->k * (filter->state1 - filter->state2);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a02 	vldr	s14, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 6a03 	vldr	s13, [r3, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	ed93 6a01 	vldr	s12, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013a6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->state = filter->state + filter->k * (filter->state2 - filter->state);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	ed93 7a00 	vldr	s14, [r3]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	ed93 6a02 	vldr	s12, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	ee07 3a90 	vmov	s15, r3
}
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <sin_approx>:
#define sinPolyCoef5  8.312366210e-3f
#define sinPolyCoef7 -1.849218155e-4f
#define sinPolyCoef9  0

float sin_approx(float x)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140a:	ee17 3a90 	vmov	r3, s15
 800140e:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f113 0f20 	cmn.w	r3, #32
 8001416:	db02      	blt.n	800141e <sin_approx+0x26>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b20      	cmp	r3, #32
 800141c:	dd0a      	ble.n	8001434 <sin_approx+0x3c>
 800141e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001528 <sin_approx+0x130>
 8001422:	e079      	b.n	8001518 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8001424:	edd7 7a01 	vldr	s15, [r7, #4]
 8001428:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800152c <sin_approx+0x134>
 800142c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001430:	edc7 7a01 	vstr	s15, [r7, #4]
 8001434:	edd7 7a01 	vldr	s15, [r7, #4]
 8001438:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001530 <sin_approx+0x138>
 800143c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	dcee      	bgt.n	8001424 <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8001446:	e007      	b.n	8001458 <sin_approx+0x60>
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800152c <sin_approx+0x134>
 8001450:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001454:	edc7 7a01 	vstr	s15, [r7, #4]
 8001458:	edd7 7a01 	vldr	s15, [r7, #4]
 800145c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001534 <sin_approx+0x13c>
 8001460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d4ee      	bmi.n	8001448 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001538 <sin_approx+0x140>
 8001472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147a:	dd0c      	ble.n	8001496 <sin_approx+0x9e>
 800147c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001480:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001538 <sin_approx+0x140>
 8001484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001488:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001538 <sin_approx+0x140>
 800148c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001490:	edc7 7a01 	vstr	s15, [r7, #4]
 8001494:	e014      	b.n	80014c0 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8001496:	edd7 7a01 	vldr	s15, [r7, #4]
 800149a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800153c <sin_approx+0x144>
 800149e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	d50b      	bpl.n	80014c0 <sin_approx+0xc8>
 80014a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001538 <sin_approx+0x140>
 80014b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800153c <sin_approx+0x144>
 80014b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014bc:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c8:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80014cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001528 <sin_approx+0x130>
 80014e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014e4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001540 <sin_approx+0x148>
 80014e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80014ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001544 <sin_approx+0x14c>
 80014f8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80014fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001548 <sin_approx+0x150>
 8001508:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800150c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001510:	edd7 7a01 	vldr	s15, [r7, #4]
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	00000000 	.word	0x00000000
 800152c:	40c90fdb 	.word	0x40c90fdb
 8001530:	40490fdb 	.word	0x40490fdb
 8001534:	c0490fdb 	.word	0xc0490fdb
 8001538:	3fc90fdb 	.word	0x3fc90fdb
 800153c:	bfc90fdb 	.word	0xbfc90fdb
 8001540:	3941e792 	.word	0x3941e792
 8001544:	3c083097 	.word	0x3c083097
 8001548:	3e2aa815 	.word	0x3e2aa815

0800154c <cos_approx>:

float cos_approx(float x)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001578 <cos_approx+0x2c>
 800155e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	f7ff ff47 	bl	80013f8 <sin_approx>
 800156a:	eef0 7a40 	vmov.f32	s15, s0
}
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	3fc90fdb 	.word	0x3fc90fdb

0800157c <acos_approx>:

float acos_approx(float x)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 8001586:	edd7 7a01 	vldr	s15, [r7, #4]
 800158a:	eef0 7ae7 	vabs.f32	s15, s15
 800158e:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 8001592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001596:	edd7 7a03 	vldr	s15, [r7, #12]
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	f010 f9a5 	bl	80118f0 <sqrtf>
 80015a6:	eef0 6a40 	vmov.f32	s13, s0
 80015aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001610 <acos_approx+0x94>
 80015b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001614 <acos_approx+0x98>
 80015ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001618 <acos_approx+0x9c>
 80015ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800161c <acos_approx+0xa0>
 80015da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e2:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 80015e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	d506      	bpl.n	8001602 <acos_approx+0x86>
        return M_PIf - result;
 80015f4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001620 <acos_approx+0xa4>
 80015f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	e001      	b.n	8001606 <acos_approx+0x8a>
    else
        return result;
 8001602:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	bc996e30 	.word	0xbc996e30
 8001614:	3d981627 	.word	0x3d981627
 8001618:	3e593484 	.word	0x3e593484
 800161c:	3fc90da4 	.word	0x3fc90da4
 8001620:	40490fdb 	.word	0x40490fdb

08001624 <atan2_approx>:

float atan2_approx(float y, float x)
{
 8001624:	b480      	push	{r7}
 8001626:	b08b      	sub	sp, #44	; 0x2c
 8001628:	af00      	add	r7, sp, #0
 800162a:	ed87 0a01 	vstr	s0, [r7, #4]
 800162e:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8001632:	edd7 7a00 	vldr	s15, [r7]
 8001636:	eef0 7ae7 	vabs.f32	s15, s15
 800163a:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 800163e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001642:	eef0 7ae7 	vabs.f32	s15, s15
 8001646:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	ed97 7a06 	vldr	s14, [r7, #24]
 8001656:	edd7 7a05 	vldr	s15, [r7, #20]
 800165a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	dd01      	ble.n	8001668 <atan2_approx+0x44>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	e000      	b.n	800166a <atan2_approx+0x46>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 800166c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001670:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	d018      	beq.n	80016ac <atan2_approx+0x88>
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	ed97 7a04 	vldr	s14, [r7, #16]
 8001686:	edd7 7a03 	vldr	s15, [r7, #12]
 800168a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d502      	bpl.n	800169a <atan2_approx+0x76>
 8001694:	edd7 7a04 	vldr	s15, [r7, #16]
 8001698:	e001      	b.n	800169e <atan2_approx+0x7a>
 800169a:	edd7 7a03 	vldr	s15, [r7, #12]
 800169e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80016a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016a6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80016aa:	e002      	b.n	80016b2 <atan2_approx+0x8e>
    else res = 0.0f;
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80016b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016b6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001794 <atan2_approx+0x170>
 80016ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016be:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001798 <atan2_approx+0x174>
 80016c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ce:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800179c <atan2_approx+0x178>
 80016d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016de:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017a0 <atan2_approx+0x17c>
 80016e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ee:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80017a4 <atan2_approx+0x180>
 80016f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f6:	eef1 6a67 	vneg.f32	s13, s15
 80016fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016fe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80017a8 <atan2_approx+0x184>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80017ac <atan2_approx+0x188>
 800170a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800170e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800171a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800171e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001722:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8001726:	ed97 7a07 	vldr	s14, [r7, #28]
 800172a:	edd7 7a08 	vldr	s15, [r7, #32]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	dd07      	ble.n	8001748 <atan2_approx+0x124>
 8001738:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80017b0 <atan2_approx+0x18c>
 800173c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001744:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8001748:	edd7 7a00 	vldr	s15, [r7]
 800174c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d507      	bpl.n	8001766 <atan2_approx+0x142>
 8001756:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80017b4 <atan2_approx+0x190>
 800175a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800175e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001762:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8001766:	edd7 7a01 	vldr	s15, [r7, #4]
 800176a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d505      	bpl.n	8001780 <atan2_approx+0x15c>
 8001774:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001778:	eef1 7a67 	vneg.f32	s15, s15
 800177c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	ee07 3a90 	vmov	s15, r3
}
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	372c      	adds	r7, #44	; 0x2c
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	3d4e0939 	.word	0x3d4e0939
 8001798:	3e9eb5e3 	.word	0x3e9eb5e3
 800179c:	3e16fa88 	.word	0x3e16fa88
 80017a0:	3f7ffe45 	.word	0x3f7ffe45
 80017a4:	34a8dfa7 	.word	0x34a8dfa7
 80017a8:	3f24fb99 	.word	0x3f24fb99
 80017ac:	3e16a269 	.word	0x3e16a269
 80017b0:	3fc90fdb 	.word	0x3fc90fdb
 80017b4:	40490fdb 	.word	0x40490fdb

080017b8 <rotateVector>:

void rotateVector(float v[XYZ_AXIS_COUNT], float rotation[XYZ_AXIS_COUNT])
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    // rotate v around rotation vector rotation
    // rotation in radians, all elements must be small
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e054      	b.n	8001872 <rotateVector+0xba>
        int i_1 = (i + 1) % 3;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <rotateVector+0xd0>)
 80017ce:	fb83 3102 	smull	r3, r1, r3, r2
 80017d2:	17d3      	asrs	r3, r2, #31
 80017d4:	1ac9      	subs	r1, r1, r3
 80017d6:	460b      	mov	r3, r1
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	440b      	add	r3, r1
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	613b      	str	r3, [r7, #16]
        int i_2 = (i + 2) % 3;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	1c9a      	adds	r2, r3, #2
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <rotateVector+0xd0>)
 80017e6:	fb83 3102 	smull	r3, r1, r3, r2
 80017ea:	17d3      	asrs	r3, r2, #31
 80017ec:	1ac9      	subs	r1, r1, r3
 80017ee:	460b      	mov	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	440b      	add	r3, r1
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	60fb      	str	r3, [r7, #12]
        float newV = v[i_1] + v[i_2] * rotation[i];
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	edd3 6a00 	vldr	s13, [r3]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4413      	add	r3, r2
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	edc7 7a02 	vstr	s15, [r7, #8]
        v[i_2] -= v[i_1] * rotation[i];
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	edd3 6a00 	vldr	s13, [r3]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	4413      	add	r3, r2
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185c:	edc3 7a00 	vstr	s15, [r3]
        v[i_1] = newV;
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b02      	cmp	r3, #2
 8001876:	dda7      	ble.n	80017c8 <rotateVector+0x10>
    }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	55555556 	.word	0x55555556

0800188c <buildRotationMatrix>:

void buildRotationMatrix(fp_angles_t *delta, fp_rotationMatrix_t *rotation)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cos_approx(delta->angles.roll);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	f7ff fe54 	bl	800154c <cos_approx>
 80018a4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    sinx = sin_approx(delta->angles.roll);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	f7ff fda1 	bl	80013f8 <sin_approx>
 80018b6:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    cosy = cos_approx(delta->angles.pitch);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	f7ff fe42 	bl	800154c <cos_approx>
 80018c8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    siny = sin_approx(delta->angles.pitch);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	f7ff fd8f 	bl	80013f8 <sin_approx>
 80018da:	ed87 0a08 	vstr	s0, [r7, #32]
    cosz = cos_approx(delta->angles.yaw);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f7ff fe30 	bl	800154c <cos_approx>
 80018ec:	ed87 0a07 	vstr	s0, [r7, #28]
    sinz = sin_approx(delta->angles.yaw);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	f7ff fd7d 	bl	80013f8 <sin_approx>
 80018fe:	ed87 0a06 	vstr	s0, [r7, #24]

    coszcosx = cosz * cosx;
 8001902:	ed97 7a07 	vldr	s14, [r7, #28]
 8001906:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzcosx = sinz * cosx;
 8001912:	ed97 7a06 	vldr	s14, [r7, #24]
 8001916:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800191a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191e:	edc7 7a04 	vstr	s15, [r7, #16]
    coszsinx = sinx * cosz;
 8001922:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001926:	edd7 7a07 	vldr	s15, [r7, #28]
 800192a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192e:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzsinx = sinx * sinz;
 8001932:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001936:	edd7 7a06 	vldr	s15, [r7, #24]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	edc7 7a02 	vstr	s15, [r7, #8]

    rotation->m[0][X] = cosz * cosy;
 8001942:	ed97 7a07 	vldr	s14, [r7, #28]
 8001946:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	edc3 7a00 	vstr	s15, [r3]
    rotation->m[0][Y] = -cosy * sinz;
 8001954:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001958:	eeb1 7a67 	vneg.f32	s14, s15
 800195c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	edc3 7a01 	vstr	s15, [r3, #4]
    rotation->m[0][Z] = siny;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6a3a      	ldr	r2, [r7, #32]
 800196e:	609a      	str	r2, [r3, #8]
    rotation->m[1][X] = sinzcosx + (coszsinx * siny);
 8001970:	ed97 7a03 	vldr	s14, [r7, #12]
 8001974:	edd7 7a08 	vldr	s15, [r7, #32]
 8001978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	edc3 7a03 	vstr	s15, [r3, #12]
    rotation->m[1][Y] = coszcosx - (sinzsinx * siny);
 800198a:	ed97 7a02 	vldr	s14, [r7, #8]
 800198e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	ed97 7a05 	vldr	s14, [r7, #20]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	edc3 7a04 	vstr	s15, [r3, #16]
    rotation->m[1][Z] = -sinx * cosy;
 80019a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019a8:	eeb1 7a67 	vneg.f32	s14, s15
 80019ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	edc3 7a05 	vstr	s15, [r3, #20]
    rotation->m[2][X] = (sinzsinx) - (coszcosx * siny);
 80019ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80019be:	edd7 7a08 	vldr	s15, [r7, #32]
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	edc3 7a06 	vstr	s15, [r3, #24]
    rotation->m[2][Y] = (coszsinx) + (sinzcosx * siny);
 80019d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80019d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80019dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	edc3 7a07 	vstr	s15, [r3, #28]
    rotation->m[2][Z] = cosy * cosx;
 80019ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001a00:	bf00      	nop
 8001a02:	3730      	adds	r7, #48	; 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <degreesToRadians>:

float degreesToRadians(int16_t degrees)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
    return degrees * RAD;
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001a34 <degreesToRadians+0x2c>
 8001a22:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001a26:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	3c8efa35 	.word	0x3c8efa35

08001a38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a60:	e000      	b.n	8001a64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f9      	beq.n	8001a62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_write>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int _write(int file, char *ptr, int len){  //funzione per la printf
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; ++i)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
	 ITM_SendChar(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ffc9 	bl	8001a38 <ITM_SendChar>
	for (int i = 0; i < len; ++i)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
	return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSemaphoreAcc1 */
  binSemaphoreAcc1Handle = osSemaphoreNew(1, 1, &binSemaphoreAcc1_attributes);
 8001ac4:	4a3c      	ldr	r2, [pc, #240]	; (8001bb8 <MX_FREERTOS_Init+0xf8>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f009 fd7b 	bl	800b5c4 <osSemaphoreNew>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a3a      	ldr	r2, [pc, #232]	; (8001bbc <MX_FREERTOS_Init+0xfc>)
 8001ad2:	6013      	str	r3, [r2, #0]

  /* creation of binSemaphoreAcc2 */
  binSemaphoreAcc2Handle = osSemaphoreNew(1, 1, &binSemaphoreAcc2_attributes);
 8001ad4:	4a3a      	ldr	r2, [pc, #232]	; (8001bc0 <MX_FREERTOS_Init+0x100>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f009 fd73 	bl	800b5c4 <osSemaphoreNew>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a38      	ldr	r2, [pc, #224]	; (8001bc4 <MX_FREERTOS_Init+0x104>)
 8001ae2:	6013      	str	r3, [r2, #0]

  /* creation of binSemaphoreMag */
  binSemaphoreMagHandle = osSemaphoreNew(1, 1, &binSemaphoreMag_attributes);
 8001ae4:	4a38      	ldr	r2, [pc, #224]	; (8001bc8 <MX_FREERTOS_Init+0x108>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f009 fd6b 	bl	800b5c4 <osSemaphoreNew>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <MX_FREERTOS_Init+0x10c>)
 8001af2:	6013      	str	r3, [r2, #0]

  /* creation of binSemaphoreGyr */
  binSemaphoreGyrHandle = osSemaphoreNew(1, 1, &binSemaphoreGyr_attributes);
 8001af4:	4a36      	ldr	r2, [pc, #216]	; (8001bd0 <MX_FREERTOS_Init+0x110>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	2001      	movs	r0, #1
 8001afa:	f009 fd63 	bl	800b5c4 <osSemaphoreNew>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <MX_FREERTOS_Init+0x114>)
 8001b02:	6013      	str	r3, [r2, #0]

  /* creation of binSemaphorePres */
  binSemaphorePresHandle = osSemaphoreNew(1, 1, &binSemaphorePres_attributes);
 8001b04:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <MX_FREERTOS_Init+0x118>)
 8001b06:	2101      	movs	r1, #1
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f009 fd5b 	bl	800b5c4 <osSemaphoreNew>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <MX_FREERTOS_Init+0x11c>)
 8001b12:	6013      	str	r3, [r2, #0]

  /* creation of binSemaphoreI2C */
  binSemaphoreI2CHandle = osSemaphoreNew(1, 1, &binSemaphoreI2C_attributes);
 8001b14:	4a32      	ldr	r2, [pc, #200]	; (8001be0 <MX_FREERTOS_Init+0x120>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f009 fd53 	bl	800b5c4 <osSemaphoreNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a30      	ldr	r2, [pc, #192]	; (8001be4 <MX_FREERTOS_Init+0x124>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* creation of binSemaphoreAccMean */
  binSemaphoreAccMeanHandle = osSemaphoreNew(1, 1, &binSemaphoreAccMean_attributes);
 8001b24:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <MX_FREERTOS_Init+0x128>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f009 fd4b 	bl	800b5c4 <osSemaphoreNew>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a2e      	ldr	r2, [pc, #184]	; (8001bec <MX_FREERTOS_Init+0x12c>)
 8001b32:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tControlMotor */
  tControlMotorHandle = osThreadNew(startTaskControlMotor, NULL, &tControlMotor_attributes);
 8001b34:	4a2e      	ldr	r2, [pc, #184]	; (8001bf0 <MX_FREERTOS_Init+0x130>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	482e      	ldr	r0, [pc, #184]	; (8001bf4 <MX_FREERTOS_Init+0x134>)
 8001b3a:	f009 fc6f 	bl	800b41c <osThreadNew>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <MX_FREERTOS_Init+0x138>)
 8001b42:	6013      	str	r3, [r2, #0]

  /* creation of tAttitude */
  tAttitudeHandle = osThreadNew(startTaskAttitude, NULL, &tAttitude_attributes);
 8001b44:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <MX_FREERTOS_Init+0x13c>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	482d      	ldr	r0, [pc, #180]	; (8001c00 <MX_FREERTOS_Init+0x140>)
 8001b4a:	f009 fc67 	bl	800b41c <osThreadNew>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a2c      	ldr	r2, [pc, #176]	; (8001c04 <MX_FREERTOS_Init+0x144>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* creation of tAltitude */
  tAltitudeHandle = osThreadNew(startTaskAltitude, NULL, &tAltitude_attributes);
 8001b54:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <MX_FREERTOS_Init+0x148>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	482c      	ldr	r0, [pc, #176]	; (8001c0c <MX_FREERTOS_Init+0x14c>)
 8001b5a:	f009 fc5f 	bl	800b41c <osThreadNew>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <MX_FREERTOS_Init+0x150>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* creation of LBS22HB_pressio */
  LBS22HB_pressioHandle = osThreadNew(getPressure, NULL, &LBS22HB_pressio_attributes);
 8001b64:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <MX_FREERTOS_Init+0x154>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	482b      	ldr	r0, [pc, #172]	; (8001c18 <MX_FREERTOS_Init+0x158>)
 8001b6a:	f009 fc57 	bl	800b41c <osThreadNew>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a2a      	ldr	r2, [pc, #168]	; (8001c1c <MX_FREERTOS_Init+0x15c>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* creation of LSM303AGR_magne */
  LSM303AGR_magneHandle = osThreadNew(getMagnetometer, NULL, &LSM303AGR_magne_attributes);
 8001b74:	4a2a      	ldr	r2, [pc, #168]	; (8001c20 <MX_FREERTOS_Init+0x160>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	482a      	ldr	r0, [pc, #168]	; (8001c24 <MX_FREERTOS_Init+0x164>)
 8001b7a:	f009 fc4f 	bl	800b41c <osThreadNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <MX_FREERTOS_Init+0x168>)
 8001b82:	6013      	str	r3, [r2, #0]

  /* creation of Media_Accellero */
  Media_AccelleroHandle = osThreadNew(getAccMean, NULL, &Media_Accellero_attributes);
 8001b84:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <MX_FREERTOS_Init+0x16c>)
 8001b86:	2100      	movs	r1, #0
 8001b88:	4829      	ldr	r0, [pc, #164]	; (8001c30 <MX_FREERTOS_Init+0x170>)
 8001b8a:	f009 fc47 	bl	800b41c <osThreadNew>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <MX_FREERTOS_Init+0x174>)
 8001b92:	6013      	str	r3, [r2, #0]

  /* creation of LSM6DSL_girosco */
  LSM6DSL_giroscoHandle = osThreadNew(getGyroscope, NULL, &LSM6DSL_girosco_attributes);
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <MX_FREERTOS_Init+0x178>)
 8001b96:	2100      	movs	r1, #0
 8001b98:	4828      	ldr	r0, [pc, #160]	; (8001c3c <MX_FREERTOS_Init+0x17c>)
 8001b9a:	f009 fc3f 	bl	800b41c <osThreadNew>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <MX_FREERTOS_Init+0x180>)
 8001ba2:	6013      	str	r3, [r2, #0]

  /* creation of Display */
  DisplayHandle = osThreadNew(displayData, NULL, &Display_attributes);
 8001ba4:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <MX_FREERTOS_Init+0x184>)
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4827      	ldr	r0, [pc, #156]	; (8001c48 <MX_FREERTOS_Init+0x188>)
 8001baa:	f009 fc37 	bl	800b41c <osThreadNew>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <MX_FREERTOS_Init+0x18c>)
 8001bb2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	08011d48 	.word	0x08011d48
 8001bbc:	200004e4 	.word	0x200004e4
 8001bc0:	08011d58 	.word	0x08011d58
 8001bc4:	200004e8 	.word	0x200004e8
 8001bc8:	08011d68 	.word	0x08011d68
 8001bcc:	200004ec 	.word	0x200004ec
 8001bd0:	08011d78 	.word	0x08011d78
 8001bd4:	200004f0 	.word	0x200004f0
 8001bd8:	08011d88 	.word	0x08011d88
 8001bdc:	200004f4 	.word	0x200004f4
 8001be0:	08011d98 	.word	0x08011d98
 8001be4:	200004f8 	.word	0x200004f8
 8001be8:	08011da8 	.word	0x08011da8
 8001bec:	200004fc 	.word	0x200004fc
 8001bf0:	08011c28 	.word	0x08011c28
 8001bf4:	08001c51 	.word	0x08001c51
 8001bf8:	200004c4 	.word	0x200004c4
 8001bfc:	08011c4c 	.word	0x08011c4c
 8001c00:	08001c79 	.word	0x08001c79
 8001c04:	200004c8 	.word	0x200004c8
 8001c08:	08011c70 	.word	0x08011c70
 8001c0c:	08001c95 	.word	0x08001c95
 8001c10:	200004cc 	.word	0x200004cc
 8001c14:	08011c94 	.word	0x08011c94
 8001c18:	08001ca9 	.word	0x08001ca9
 8001c1c:	200004d0 	.word	0x200004d0
 8001c20:	08011cb8 	.word	0x08011cb8
 8001c24:	08001cdd 	.word	0x08001cdd
 8001c28:	200004d4 	.word	0x200004d4
 8001c2c:	08011cdc 	.word	0x08011cdc
 8001c30:	08001d11 	.word	0x08001d11
 8001c34:	200004d8 	.word	0x200004d8
 8001c38:	08011d00 	.word	0x08011d00
 8001c3c:	08001dd1 	.word	0x08001dd1
 8001c40:	200004dc 	.word	0x200004dc
 8001c44:	08011d24 	.word	0x08011d24
 8001c48:	08001e05 	.word	0x08001e05
 8001c4c:	200004e0 	.word	0x200004e0

08001c50 <startTaskControlMotor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTaskControlMotor */
void startTaskControlMotor(void *argument)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskControlMotor */
  /* Infinite loop */
  for(;;)
  {
	gyroUpdate();
 8001c58:	f000 ff1e 	bl	8002a98 <gyroUpdate>
	controlMotorUpdate();
 8001c5c:	f7ff f858 	bl	8000d10 <controlMotorUpdate>
	osSemaphoreRelease(binSemaphoreGyrHandle);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <startTaskControlMotor+0x24>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 fdaf 	bl	800b7c8 <osSemaphoreRelease>
    osDelay(TASK_CONTROL_MOTOR_PERIOD);
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f009 fc7c 	bl	800b568 <osDelay>
	gyroUpdate();
 8001c70:	e7f2      	b.n	8001c58 <startTaskControlMotor+0x8>
 8001c72:	bf00      	nop
 8001c74:	200004f0 	.word	0x200004f0

08001c78 <startTaskAttitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAttitude */
void startTaskAttitude(void *argument)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAttitude */
  /* Infinite loop */
  for(;;)
  {
	accUpdate();
 8001c80:	f7fe fdc4 	bl	800080c <accUpdate>
	magUpdate();
 8001c84:	f003 fb36 	bl	80052f4 <magUpdate>

	attitudeUpdate();
 8001c88:	f7fe fea4 	bl	80009d4 <attitudeUpdate>
    osDelay(TASK_ASSETTO_PERIOD);
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f009 fc6b 	bl	800b568 <osDelay>
	accUpdate();
 8001c92:	e7f5      	b.n	8001c80 <startTaskAttitude+0x8>

08001c94 <startTaskAltitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAltitude */
void startTaskAltitude(void *argument)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAltitude */
  /* Infinite loop */
  for(;;)
  {
	baroUpdate();
 8001c9c:	f7fe ffdc 	bl	8000c58 <baroUpdate>

    osDelay(TASK_ALTITUDINE_PERIOD);
 8001ca0:	2019      	movs	r0, #25
 8001ca2:	f009 fc61 	bl	800b568 <osDelay>
	baroUpdate();
 8001ca6:	e7f9      	b.n	8001c9c <startTaskAltitude+0x8>

08001ca8 <getPressure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getPressure */
void getPressure(void *argument)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getPressure */
  /* Infinite loop */
  for(;;)
  {
   if(osSemaphoreAcquire(binSemaphoreI2CHandle, 0)==osOK){
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <getPressure+0x30>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f009 fd20 	bl	800b6fc <osSemaphoreAcquire>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <getPressure+0x28>
	   LPS22HB_dataRead();
 8001cc2:	f002 f88f 	bl	8003de4 <LPS22HB_dataRead>

	   osSemaphoreRelease(binSemaphoreI2CHandle);
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <getPressure+0x30>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f009 fd7c 	bl	800b7c8 <osSemaphoreRelease>
	  }

    osDelay(TASK_PRESSIONE_PERIOD);
 8001cd0:	2014      	movs	r0, #20
 8001cd2:	f009 fc49 	bl	800b568 <osDelay>
   if(osSemaphoreAcquire(binSemaphoreI2CHandle, 0)==osOK){
 8001cd6:	e7eb      	b.n	8001cb0 <getPressure+0x8>
 8001cd8:	200004f8 	.word	0x200004f8

08001cdc <getMagnetometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getMagnetometer */
void getMagnetometer(void *argument)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getMagnetometer */
  /* Infinite loop */
  for(;;)
  {
   if(osSemaphoreAcquire(binSemaphoreI2CHandle, 0)==osOK){
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <getMagnetometer+0x30>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f009 fd06 	bl	800b6fc <osSemaphoreAcquire>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <getMagnetometer+0x28>

	   LSM303AGR_dataReadMag();
 8001cf6:	f002 fae9 	bl	80042cc <LSM303AGR_dataReadMag>

	   osSemaphoreRelease(binSemaphoreI2CHandle);
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <getMagnetometer+0x30>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f009 fd62 	bl	800b7c8 <osSemaphoreRelease>
	}

    osDelay(TASK_MAGNETOMETRO_PERIOD);
 8001d04:	2008      	movs	r0, #8
 8001d06:	f009 fc2f 	bl	800b568 <osDelay>
   if(osSemaphoreAcquire(binSemaphoreI2CHandle, 0)==osOK){
 8001d0a:	e7eb      	b.n	8001ce4 <getMagnetometer+0x8>
 8001d0c:	200004f8 	.word	0x200004f8

08001d10 <getAccMean>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getAccMean */
void getAccMean(void *argument)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getAccMean */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(binSemaphoreI2CHandle, 0)==osOK){
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <getAccMean+0xac>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f009 fcec 	bl	800b6fc <osSemaphoreAcquire>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <getAccMean+0x2c>

		LSM303AGR_dataReadAcc();
 8001d2a:	f002 fa75 	bl	8004218 <LSM303AGR_dataReadAcc>
		LSM6DSL_dataReadAcc();
 8001d2e:	f002 fed9 	bl	8004ae4 <LSM6DSL_dataReadAcc>

		osSemaphoreRelease(binSemaphoreI2CHandle);
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <getAccMean+0xac>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f009 fd46 	bl	800b7c8 <osSemaphoreRelease>
	}

	if(osSemaphoreAcquire(binSemaphoreAccMeanHandle, 0)==osOK){
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <getAccMean+0xb0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f009 fcda 	bl	800b6fc <osSemaphoreAcquire>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d131      	bne.n	8001db2 <getAccMean+0xa2>

		accellerometer_mean.x = (accellerometer1.x + accellerometer2.x)/2;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <getAccMean+0xb4>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <getAccMean+0xb8>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <getAccMean+0xbc>)
 8001d68:	edc3 7a00 	vstr	s15, [r3]
		accellerometer_mean.y = (accellerometer1.y + accellerometer2.y)/2;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <getAccMean+0xb4>)
 8001d6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <getAccMean+0xb8>)
 8001d74:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <getAccMean+0xbc>)
 8001d86:	edc3 7a01 	vstr	s15, [r3, #4]
		accellerometer_mean.z = (accellerometer1.z + accellerometer2.z)/2;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <getAccMean+0xb4>)
 8001d8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <getAccMean+0xb8>)
 8001d92:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <getAccMean+0xbc>)
 8001da4:	edc3 7a02 	vstr	s15, [r3, #8]

		osSemaphoreRelease(binSemaphoreAccMeanHandle);
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <getAccMean+0xb0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f009 fd0b 	bl	800b7c8 <osSemaphoreRelease>
	}

    osDelay(TASK_ACCELLEROMETRI_PERIOD);
 8001db2:	2008      	movs	r0, #8
 8001db4:	f009 fbd8 	bl	800b568 <osDelay>
	if(osSemaphoreAcquire(binSemaphoreI2CHandle, 0)==osOK){
 8001db8:	e7ae      	b.n	8001d18 <getAccMean+0x8>
 8001dba:	bf00      	nop
 8001dbc:	200004f8 	.word	0x200004f8
 8001dc0:	200004fc 	.word	0x200004fc
 8001dc4:	200009c0 	.word	0x200009c0
 8001dc8:	200009d8 	.word	0x200009d8
 8001dcc:	200004b8 	.word	0x200004b8

08001dd0 <getGyroscope>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getGyroscope */
void getGyroscope(void *argument)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getGyroscope */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(binSemaphoreI2CHandle, 0)==osOK){
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <getGyroscope+0x30>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f009 fc8c 	bl	800b6fc <osSemaphoreAcquire>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <getGyroscope+0x28>

			LSM6DSL_dataReadGyro();
 8001dea:	f002 fed5 	bl	8004b98 <LSM6DSL_dataReadGyro>

			osSemaphoreRelease(binSemaphoreI2CHandle);
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <getGyroscope+0x30>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f009 fce8 	bl	800b7c8 <osSemaphoreRelease>
	}

    osDelay(TASK_GIROSCOPIO_PERIOD);
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f009 fbb5 	bl	800b568 <osDelay>
	if(osSemaphoreAcquire(binSemaphoreI2CHandle, 0)==osOK){
 8001dfe:	e7eb      	b.n	8001dd8 <getGyroscope+0x8>
 8001e00:	200004f8 	.word	0x200004f8

08001e04 <displayData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayData */
void displayData(void *argument)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af04      	add	r7, sp, #16
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayData */
  /* Infinite loop */
  for(;;)
  {
   if(osSemaphoreAcquire(binSemaphorePresHandle, 0) == osOK){
 8001e0c:	4b71      	ldr	r3, [pc, #452]	; (8001fd4 <displayData+0x1d0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f009 fc72 	bl	800b6fc <osSemaphoreAcquire>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 80d5 	bne.w	8001fca <displayData+0x1c6>
   	   if(osSemaphoreAcquire(binSemaphoreAcc1Handle, 0) == osOK){
 8001e20:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <displayData+0x1d4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f009 fc68 	bl	800b6fc <osSemaphoreAcquire>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80c6 	bne.w	8001fc0 <displayData+0x1bc>
	   	   if(osSemaphoreAcquire(binSemaphoreAcc2Handle, 0) == osOK){
 8001e34:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <displayData+0x1d8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f009 fc5e 	bl	800b6fc <osSemaphoreAcquire>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80b7 	bne.w	8001fb6 <displayData+0x1b2>
	   		   if(osSemaphoreAcquire(binSemaphoreAccMeanHandle, 0) == osOK){
 8001e48:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <displayData+0x1dc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f009 fc54 	bl	800b6fc <osSemaphoreAcquire>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 80a8 	bne.w	8001fac <displayData+0x1a8>
	   			   if(osSemaphoreAcquire(binSemaphoreMagHandle, 0) == osOK){
 8001e5c:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <displayData+0x1e0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f009 fc4a 	bl	800b6fc <osSemaphoreAcquire>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8099 	bne.w	8001fa2 <displayData+0x19e>
	   				   if(osSemaphoreAcquire(binSemaphoreGyrHandle, 0) == osOK){
 8001e70:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <displayData+0x1e4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f009 fc40 	bl	800b6fc <osSemaphoreAcquire>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 808a 	bne.w	8001f98 <displayData+0x194>
	   					   printf("dati velocita' angolare        x=%.2f y=%.2f z=%.2f\n", gyroscope.x, gyroscope.y, gyroscope.z);
 8001e84:	4b59      	ldr	r3, [pc, #356]	; (8001fec <displayData+0x1e8>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001e8e:	4b57      	ldr	r3, [pc, #348]	; (8001fec <displayData+0x1e8>)
 8001e90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e98:	4b54      	ldr	r3, [pc, #336]	; (8001fec <displayData+0x1e8>)
 8001e9a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e9e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001ea2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001ea6:	ed8d 7b00 	vstr	d7, [sp]
 8001eaa:	ec53 2b15 	vmov	r2, r3, d5
 8001eae:	4850      	ldr	r0, [pc, #320]	; (8001ff0 <displayData+0x1ec>)
 8001eb0:	f00d fbf4 	bl	800f69c <iprintf>
	   					   printf("dati accellerometro 1          x=%.2f y=%.2f z=%.2f\n", accellerometer1.x, accellerometer1.y, accellerometer1.z);
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <displayData+0x1f0>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001ebe:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <displayData+0x1f0>)
 8001ec0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <displayData+0x1f0>)
 8001eca:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ece:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001ed2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001ed6:	ed8d 7b00 	vstr	d7, [sp]
 8001eda:	ec53 2b15 	vmov	r2, r3, d5
 8001ede:	4846      	ldr	r0, [pc, #280]	; (8001ff8 <displayData+0x1f4>)
 8001ee0:	f00d fbdc 	bl	800f69c <iprintf>
	   					   printf("dati accellerometro 2          x=%.2f y=%.2f z=%.2f\n", accellerometer2.x, accellerometer2.y, accellerometer2.z);
 8001ee4:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <displayData+0x1f8>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001eee:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <displayData+0x1f8>)
 8001ef0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <displayData+0x1f8>)
 8001efa:	edd3 6a02 	vldr	s13, [r3, #8]
 8001efe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001f02:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001f06:	ed8d 7b00 	vstr	d7, [sp]
 8001f0a:	ec53 2b15 	vmov	r2, r3, d5
 8001f0e:	483c      	ldr	r0, [pc, #240]	; (8002000 <displayData+0x1fc>)
 8001f10:	f00d fbc4 	bl	800f69c <iprintf>
	   					   printf("media dati accellerometri      x=%.2f y=%.2f z=%.2f\n", accellerometer_mean.x, accellerometer_mean.y, accellerometer_mean.z);
 8001f14:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <displayData+0x200>)
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <displayData+0x200>)
 8001f20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <displayData+0x200>)
 8001f2a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f2e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001f32:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001f36:	ed8d 7b00 	vstr	d7, [sp]
 8001f3a:	ec53 2b15 	vmov	r2, r3, d5
 8001f3e:	4832      	ldr	r0, [pc, #200]	; (8002008 <displayData+0x204>)
 8001f40:	f00d fbac 	bl	800f69c <iprintf>
	   					   printf("dati flusso magnetico          x=%.2f y=%.2f z=%.2f\n", magnetometer.x, magnetometer.y, magnetometer.z);
 8001f44:	4b31      	ldr	r3, [pc, #196]	; (800200c <displayData+0x208>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <displayData+0x208>)
 8001f50:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <displayData+0x208>)
 8001f5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f5e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001f62:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001f66:	ed8d 7b00 	vstr	d7, [sp]
 8001f6a:	ec53 2b15 	vmov	r2, r3, d5
 8001f6e:	4828      	ldr	r0, [pc, #160]	; (8002010 <displayData+0x20c>)
 8001f70:	f00d fb94 	bl	800f69c <iprintf>
	   					   printf("dati pressione                 p=%.2f\n", pressure);
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <displayData+0x210>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f7e:	ec53 2b17 	vmov	r2, r3, d7
 8001f82:	4825      	ldr	r0, [pc, #148]	; (8002018 <displayData+0x214>)
 8001f84:	f00d fb8a 	bl	800f69c <iprintf>
	   					   printf("\n");
 8001f88:	200a      	movs	r0, #10
 8001f8a:	f00d fb9f 	bl	800f6cc <putchar>
	   				 	   osSemaphoreRelease(binSemaphoreGyrHandle);
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <displayData+0x1e4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f009 fc18 	bl	800b7c8 <osSemaphoreRelease>
	   				   }
	   			 	   osSemaphoreRelease(binSemaphoreMagHandle);
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <displayData+0x1e0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f009 fc13 	bl	800b7c8 <osSemaphoreRelease>
	   			   }
	   		  	   osSemaphoreRelease(binSemaphoreAccMeanHandle);
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <displayData+0x1dc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f009 fc0e 	bl	800b7c8 <osSemaphoreRelease>
	   		   }
	   	   	osSemaphoreRelease(binSemaphoreAcc2Handle);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <displayData+0x1d8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f009 fc09 	bl	800b7c8 <osSemaphoreRelease>
	   	   }
	   	osSemaphoreRelease(binSemaphoreAcc1Handle);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <displayData+0x1d4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f009 fc04 	bl	800b7c8 <osSemaphoreRelease>
   	   }
   	osSemaphoreRelease(binSemaphorePresHandle);
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <displayData+0x1d0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f009 fbff 	bl	800b7c8 <osSemaphoreRelease>
   }

    osDelay(TASK_DISPLAY_PERIOD);
 8001fca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fce:	f009 facb 	bl	800b568 <osDelay>
   if(osSemaphoreAcquire(binSemaphorePresHandle, 0) == osOK){
 8001fd2:	e71b      	b.n	8001e0c <displayData+0x8>
 8001fd4:	200004f4 	.word	0x200004f4
 8001fd8:	200004e4 	.word	0x200004e4
 8001fdc:	200004e8 	.word	0x200004e8
 8001fe0:	200004fc 	.word	0x200004fc
 8001fe4:	200004ec 	.word	0x200004ec
 8001fe8:	200004f0 	.word	0x200004f0
 8001fec:	200009cc 	.word	0x200009cc
 8001ff0:	08011ad0 	.word	0x08011ad0
 8001ff4:	200009c0 	.word	0x200009c0
 8001ff8:	08011b08 	.word	0x08011b08
 8001ffc:	200009d8 	.word	0x200009d8
 8002000:	08011b40 	.word	0x08011b40
 8002004:	200004b8 	.word	0x200004b8
 8002008:	08011b78 	.word	0x08011b78
 800200c:	200009b4 	.word	0x200009b4
 8002010:	08011bb0 	.word	0x08011bb0
 8002014:	20000980 	.word	0x20000980
 8002018:	08011be8 	.word	0x08011be8

0800201c <MX_GPIO_Init>:
     PD9   ------> USART3_RX
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a6f      	ldr	r2, [pc, #444]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b6d      	ldr	r3, [pc, #436]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204a:	4b6a      	ldr	r3, [pc, #424]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a69      	ldr	r2, [pc, #420]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b67      	ldr	r3, [pc, #412]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a63      	ldr	r2, [pc, #396]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b61      	ldr	r3, [pc, #388]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b5e      	ldr	r3, [pc, #376]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b5b      	ldr	r3, [pc, #364]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	4b58      	ldr	r3, [pc, #352]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a57      	ldr	r2, [pc, #348]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020aa:	4b52      	ldr	r3, [pc, #328]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a51      	ldr	r2, [pc, #324]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 80020b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b4f      	ldr	r3, [pc, #316]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80020c8:	484b      	ldr	r0, [pc, #300]	; (80021f8 <MX_GPIO_Init+0x1dc>)
 80020ca:	f005 fe19 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	484a      	ldr	r0, [pc, #296]	; (80021fc <MX_GPIO_Init+0x1e0>)
 80020d4:	f005 fe14 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80020d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4844      	ldr	r0, [pc, #272]	; (8002200 <MX_GPIO_Init+0x1e4>)
 80020f0:	f005 fc5a 	bl	80079a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020f4:	2332      	movs	r3, #50	; 0x32
 80020f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002104:	230b      	movs	r3, #11
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4619      	mov	r1, r3
 800210e:	483c      	ldr	r0, [pc, #240]	; (8002200 <MX_GPIO_Init+0x1e4>)
 8002110:	f005 fc4a 	bl	80079a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8002114:	2382      	movs	r3, #130	; 0x82
 8002116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002124:	230b      	movs	r3, #11
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4835      	ldr	r0, [pc, #212]	; (8002204 <MX_GPIO_Init+0x1e8>)
 8002130:	f005 fc3a 	bl	80079a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002134:	f244 0381 	movw	r3, #16513	; 0x4081
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	482a      	ldr	r0, [pc, #168]	; (80021f8 <MX_GPIO_Init+0x1dc>)
 800214e:	f005 fc2b 	bl	80079a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002164:	230b      	movs	r3, #11
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	4822      	ldr	r0, [pc, #136]	; (80021f8 <MX_GPIO_Init+0x1dc>)
 8002170:	f005 fc1a 	bl	80079a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002174:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002186:	2307      	movs	r3, #7
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	481d      	ldr	r0, [pc, #116]	; (8002208 <MX_GPIO_Init+0x1ec>)
 8002192:	f005 fc09 	bl	80079a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002196:	2340      	movs	r3, #64	; 0x40
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	4813      	ldr	r0, [pc, #76]	; (80021fc <MX_GPIO_Init+0x1e0>)
 80021ae:	f005 fbfb 	bl	80079a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_GPIO_Init+0x1e0>)
 80021c6:	f005 fbef 	bl	80079a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021dc:	230b      	movs	r3, #11
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_GPIO_Init+0x1e0>)
 80021e8:	f005 fbde 	bl	80079a8 <HAL_GPIO_Init>

}
 80021ec:	bf00      	nop
 80021ee:	3730      	adds	r7, #48	; 0x30
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40021800 	.word	0x40021800
 8002200:	40020800 	.word	0x40020800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020c00 	.word	0x40020c00
 800220c:	00000000 	.word	0x00000000

08002210 <gyroSetTargetLooptime>:
static float accumulatedMeasurements[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static float gyroPrevious[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static int accumulatedMeasurementCount = 0;

static void gyroSetTargetLooptime(uint8_t pidDenom)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
    activePidLoopDenom = pidDenom;
 800221a:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <gyroSetTargetLooptime+0x90>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	7013      	strb	r3, [r2, #0]
    if (gyro.sampleRateHz) {
 8002220:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <gyroSetTargetLooptime+0x94>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d028      	beq.n	800227a <gyroSetTargetLooptime+0x6a>
        gyro.sampleLooptime = 1e6 / gyro.sampleRateHz;
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <gyroSetTargetLooptime+0x94>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002234:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8002298 <gyroSetTargetLooptime+0x88>
 8002238:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800223c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002240:	ee17 2a90 	vmov	r2, s15
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <gyroSetTargetLooptime+0x94>)
 8002246:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = activePidLoopDenom * 1e6 / gyro.sampleRateHz;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <gyroSetTargetLooptime+0x90>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002254:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8002298 <gyroSetTargetLooptime+0x88>
 8002258:	ee27 5b06 	vmul.f64	d5, d7, d6
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <gyroSetTargetLooptime+0x94>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002268:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800226c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002270:	ee17 2a90 	vmov	r2, s15
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <gyroSetTargetLooptime+0x94>)
 8002276:	605a      	str	r2, [r3, #4]
    } else {
        gyro.sampleLooptime = 0;
        gyro.targetLooptime = 0;
    }
}
 8002278:	e005      	b.n	8002286 <gyroSetTargetLooptime+0x76>
        gyro.sampleLooptime = 0;
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <gyroSetTargetLooptime+0x94>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = 0;
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <gyroSetTargetLooptime+0x94>)
 8002282:	2200      	movs	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	f3af 8000 	nop.w
 8002298:	00000000 	.word	0x00000000
 800229c:	412e8480 	.word	0x412e8480
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000500 	.word	0x20000500

080022a8 <gyroSetSampleRate>:

static uint16_t gyroSetSampleRate(gyroDev_t *gyro) {
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	gyro->gyroRateKHz = GYRO_RATE_6664_Hz;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	uint16_t gyroSampleRateHz = 6664;
 80022b8:	f641 2308 	movw	r3, #6664	; 0x1a08
 80022bc:	81fb      	strh	r3, [r7, #14]
	uint16_t accSampleRateHz = 6664;
 80022be:	f641 2308 	movw	r3, #6664	; 0x1a08
 80022c2:	81bb      	strh	r3, [r7, #12]

	gyro->mpuDividerDrops  = 0; // we no longer use the gyro's sample divider
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gyro->accSampleRateHz = accSampleRateHz;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	89ba      	ldrh	r2, [r7, #12]
 80022d0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	return gyroSampleRateHz;
 80022d4:	89fb      	ldrh	r3, [r7, #14]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <gyroInitSlewLimiter>:

static void gyroInitSlewLimiter(gyroSensor_t *gyroSensor) {
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e009      	b.n	8002304 <gyroInitSlewLimiter+0x22>
        gyroSensor->gyroDev.gyroADCRawPrevious[axis] = 0;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	332a      	adds	r3, #42	; 0x2a
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	2200      	movs	r2, #0
 80022fc:	605a      	str	r2, [r3, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b02      	cmp	r3, #2
 8002308:	ddf2      	ble.n	80022f0 <gyroInitSlewLimiter+0xe>
    }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <gyroInitSensorFilters>:

static void gyroInitSensorFilters(gyroSensor_t *gyroSensor)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    gyroInitSlewLimiter(gyroSensor);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ffde 	bl	80022e2 <gyroInitSlewLimiter>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <gyroInitSensor>:

static void gyroInitSensor(gyroSensor_t *gyroSensor)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
    gyroSensor->gyroDev.gyro_high_fsr = true;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    gyroSensor->gyroDev.gyroAlign = CW90_DEG;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    sensorAlignment_t customAlignment;
    buildAlignmentFromStandardAlignment(&customAlignment, gyroSensor->gyroDev.gyroAlign);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f004 fe1a 	bl	8006f8c <buildAlignmentFromStandardAlignment>
    buildRotationMatrixFromAlignment(&customAlignment, &gyroSensor->gyroDev.rotationMatrix);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f004 fdcd 	bl	8006f04 <buildRotationMatrixFromAlignment>
    gyroSensor->gyroDev.mpuIntExtiTag = 0U;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    gyroSensor->gyroDev.hardware_lpf = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    // The targetLooptime gets set later based on the active sensor's gyroSampleRateHz and pid_process_denom
    gyroSensor->gyroDev.gyroSampleRateHz = gyroSetSampleRate(&gyroSensor->gyroDev);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff93 	bl	80022a8 <gyroSetSampleRate>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
    gyroSensor->gyroDev.initFn(&gyroSensor->gyroDev);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4610      	mov	r0, r2
 8002394:	4798      	blx	r3

    // As new gyros are supported, be sure to add them below based on whether they are subject to the overflow/inversion bug
    // Any gyro not explicitly defined will default to not having built-in overflow protection as a safe alternative.
    gyroSensor->gyroDev.gyroHasOverflowProtection = false;  // default catch for newly added gyros until proven to be unaffected
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb

    gyroInitSensorFilters(gyroSensor);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffba 	bl	8002318 <gyroInitSensorFilters>
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <calculateNyquistAdjustedNotchHz>:
    FILTER_LPF1 = 0,
    FILTER_LPF2
};

static uint16_t calculateNyquistAdjustedNotchHz(uint16_t notchHz, uint16_t notchCutoffHz)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	460a      	mov	r2, r1
 80023b6:	80fb      	strh	r3, [r7, #6]
 80023b8:	4613      	mov	r3, r2
 80023ba:	80bb      	strh	r3, [r7, #4]
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / gyro.targetLooptime;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <calculateNyquistAdjustedNotchHz+0x44>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <calculateNyquistAdjustedNotchHz+0x48>)
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	60fb      	str	r3, [r7, #12]
    if (notchHz > gyroFrequencyNyquist) {
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d208      	bcs.n	80023e2 <calculateNyquistAdjustedNotchHz+0x36>
        if (notchCutoffHz < gyroFrequencyNyquist) {
 80023d0:	88bb      	ldrh	r3, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d902      	bls.n	80023de <calculateNyquistAdjustedNotchHz+0x32>
            notchHz = gyroFrequencyNyquist;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	80fb      	strh	r3, [r7, #6]
 80023dc:	e001      	b.n	80023e2 <calculateNyquistAdjustedNotchHz+0x36>
        } else {
            notchHz = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	80fb      	strh	r3, [r7, #6]
        }
    }

    return notchHz;
 80023e2:	88fb      	ldrh	r3, [r7, #6]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	20000500 	.word	0x20000500
 80023f4:	0007a120 	.word	0x0007a120

080023f8 <gyroInitLowpassFilterLpf>:

static bool gyroInitLowpassFilterLpf(int slot, int type, uint16_t lpfHz, uint32_t looptime)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08e      	sub	sp, #56	; 0x38
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
    filterApplyFnPtr *lowpassFilterApplyFn;
    gyroLowpassFilter_t *lowpassFilter = NULL;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (slot) {
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <gyroInitLowpassFilterLpf+0x22>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <gyroInitLowpassFilterLpf+0x2c>
 8002418:	e009      	b.n	800242e <gyroInitLowpassFilterLpf+0x36>
    case FILTER_LPF1:
        lowpassFilterApplyFn = &gyro.lowpassFilterApplyFn;
 800241a:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <gyroInitLowpassFilterLpf+0x1b8>)
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpassFilter;
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <gyroInitLowpassFilterLpf+0x1bc>)
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002422:	e006      	b.n	8002432 <gyroInitLowpassFilterLpf+0x3a>

    case FILTER_LPF2:
        lowpassFilterApplyFn = &gyro.lowpass2FilterApplyFn;
 8002424:	4b64      	ldr	r3, [pc, #400]	; (80025b8 <gyroInitLowpassFilterLpf+0x1c0>)
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpass2Filter;
 8002428:	4b64      	ldr	r3, [pc, #400]	; (80025bc <gyroInitLowpassFilterLpf+0x1c4>)
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800242c:	e001      	b.n	8002432 <gyroInitLowpassFilterLpf+0x3a>

    default:
        return false;
 800242e:	2300      	movs	r3, #0
 8002430:	e0b9      	b.n	80025a6 <gyroInitLowpassFilterLpf+0x1ae>
    }

    bool ret = false;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Establish some common constants
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / looptime;
 8002438:	4a61      	ldr	r2, [pc, #388]	; (80025c0 <gyroInitLowpassFilterLpf+0x1c8>)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	61bb      	str	r3, [r7, #24]
    const float gyroDt = looptime * 1e-6f;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80025c4 <gyroInitLowpassFilterLpf+0x1cc>
 8002450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002454:	edc7 7a05 	vstr	s15, [r7, #20]

    // Gain could be calculated a little later as it is specific to the pt1/bqrcf2/fkf branches
    const float gain = pt1FilterGain(lpfHz, gyroDt);
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	edd7 0a05 	vldr	s1, [r7, #20]
 8002466:	eeb0 0a67 	vmov.f32	s0, s15
 800246a:	f7fe fc8d 	bl	8000d88 <pt1FilterGain>
 800246e:	ed87 0a04 	vstr	s0, [r7, #16]

    // Dereference the pointer to null before checking valid cutoff and filter
    // type. It will be overridden for positive cases.
    *lowpassFilterApplyFn = nullFilterApply;
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <gyroInitLowpassFilterLpf+0x1d0>)
 8002476:	601a      	str	r2, [r3, #0]

    // If lowpass cutoff has been specified
    if (lpfHz) {
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 808e 	beq.w	800259c <gyroInitLowpassFilterLpf+0x1a4>
        switch (type) {
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b03      	cmp	r3, #3
 8002484:	f200 808d 	bhi.w	80025a2 <gyroInitLowpassFilterLpf+0x1aa>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <gyroInitLowpassFilterLpf+0x98>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024db 	.word	0x080024db
 8002498:	08002529 	.word	0x08002529
 800249c:	08002563 	.word	0x08002563
        case FILTER_PT1:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt1FilterApply;
 80024a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a2:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <gyroInitLowpassFilterLpf+0x1d4>)
 80024a4:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024aa:	e00f      	b.n	80024cc <gyroInitLowpassFilterLpf+0xd4>
                pt1FilterInit(&lowpassFilter[axis].pt1FilterState, gain);
 80024ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	461a      	mov	r2, r3
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	4413      	add	r3, r2
 80024bc:	ed97 0a04 	vldr	s0, [r7, #16]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fc89 	bl	8000dd8 <pt1FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	3301      	adds	r3, #1
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	ddec      	ble.n	80024ac <gyroInitLowpassFilterLpf+0xb4>
            }
            ret = true;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80024d8:	e063      	b.n	80025a2 <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_BIQUAD:
            if (lpfHz <= gyroFrequencyNyquist) {
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d35e      	bcc.n	80025a0 <gyroInitLowpassFilterLpf+0x1a8>
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApply;
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <gyroInitLowpassFilterLpf+0x1d8>)
 80024e6:	601a      	str	r2, [r3, #0]
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	e015      	b.n	800251a <gyroInitLowpassFilterLpf+0x122>
                    biquadFilterInitLPF(&lowpassFilter[axis].biquadFilterState, lpfHz, looptime);
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	461a      	mov	r2, r3
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	4413      	add	r3, r2
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	ee07 2a90 	vmov	s15, r2
 8002504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	eeb0 0a67 	vmov.f32	s0, s15
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fcc8 	bl	8000ea4 <biquadFilterInitLPF>
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	3301      	adds	r3, #1
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	2b02      	cmp	r3, #2
 800251e:	dde6      	ble.n	80024ee <gyroInitLowpassFilterLpf+0xf6>
                }
                ret = true;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8002526:	e03b      	b.n	80025a0 <gyroInitLowpassFilterLpf+0x1a8>
        case FILTER_PT2:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt2FilterApply;
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <gyroInitLowpassFilterLpf+0x1dc>)
 800252c:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	e00f      	b.n	8002554 <gyroInitLowpassFilterLpf+0x15c>
                pt2FilterInit(&lowpassFilter[axis].pt2FilterState, gain);
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	461a      	mov	r2, r3
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	4413      	add	r3, r2
 8002544:	ed97 0a04 	vldr	s0, [r7, #16]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fe4b 	bl	80011e4 <pt2FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	3301      	adds	r3, #1
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	2b02      	cmp	r3, #2
 8002558:	ddec      	ble.n	8002534 <gyroInitLowpassFilterLpf+0x13c>
            }
            ret = true;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8002560:	e01f      	b.n	80025a2 <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_PT3:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt3FilterApply;
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <gyroInitLowpassFilterLpf+0x1e0>)
 8002566:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e00f      	b.n	800258e <gyroInitLowpassFilterLpf+0x196>
                pt3FilterInit(&lowpassFilter[axis].pt3FilterState, gain);
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	461a      	mov	r2, r3
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	4413      	add	r3, r2
 800257e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fece 	bl	8001324 <pt3FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	2b02      	cmp	r3, #2
 8002592:	ddec      	ble.n	800256e <gyroInitLowpassFilterLpf+0x176>
            }
            ret = true;
 8002594:	2301      	movs	r3, #1
 8002596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800259a:	e002      	b.n	80025a2 <gyroInitLowpassFilterLpf+0x1aa>
        }
    }
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <gyroInitLowpassFilterLpf+0x1aa>
            break;
 80025a0:	bf00      	nop
    return ret;
 80025a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3738      	adds	r7, #56	; 0x38
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000688 	.word	0x20000688
 80025b4:	2000068c 	.word	0x2000068c
 80025b8:	20000704 	.word	0x20000704
 80025bc:	20000708 	.word	0x20000708
 80025c0:	0007a120 	.word	0x0007a120
 80025c4:	358637bd 	.word	0x358637bd
 80025c8:	08000d69 	.word	0x08000d69
 80025cc:	08000dff 	.word	0x08000dff
 80025d0:	08000ed5 	.word	0x08000ed5
 80025d4:	08001213 	.word	0x08001213
 80025d8:	0800135b 	.word	0x0800135b

080025dc <gyroInitFilterNotch1>:

static void gyroInitFilterNotch1(uint16_t notchHz, uint16_t notchCutoffHz)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	460a      	mov	r2, r1
 80025e6:	80fb      	strh	r3, [r7, #6]
 80025e8:	4613      	mov	r3, r2
 80025ea:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter1ApplyFn = nullFilterApply;
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <gyroInitFilterNotch1+0xb0>)
 80025ee:	4a28      	ldr	r2, [pc, #160]	; (8002690 <gyroInitFilterNotch1+0xb4>)
 80025f0:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 80025f4:	88ba      	ldrh	r2, [r7, #4]
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fed6 	bl	80023ac <calculateNyquistAdjustedNotchHz>
 8002600:	4603      	mov	r3, r0
 8002602:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03c      	beq.n	8002684 <gyroInitFilterNotch1+0xa8>
 800260a:	88bb      	ldrh	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d039      	beq.n	8002684 <gyroInitFilterNotch1+0xa8>
        gyro.notchFilter1ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <gyroInitFilterNotch1+0xb0>)
 8002612:	4a20      	ldr	r2, [pc, #128]	; (8002694 <gyroInitFilterNotch1+0xb8>)
 8002614:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	ee07 3a90 	vmov	s15, r3
 800261e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002622:	88bb      	ldrh	r3, [r7, #4]
 8002624:	ee07 3a10 	vmov	s14, r3
 8002628:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800262c:	eef0 0a47 	vmov.f32	s1, s14
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	f7fe fb76 	bl	8000d24 <filterGetNotchQ>
 8002638:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e01d      	b.n	800267e <gyroInitFilterNotch1+0xa2>
            biquadFilterInit(&gyro.notchFilter1[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <gyroInitFilterNotch1+0xb0>)
 8002652:	4413      	add	r3, r2
 8002654:	3304      	adds	r3, #4
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	ee07 2a90 	vmov	s15, r2
 800265c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <gyroInitFilterNotch1+0xb0>)
 8002662:	6851      	ldr	r1, [r2, #4]
 8002664:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002668:	2201      	movs	r2, #1
 800266a:	edd7 0a02 	vldr	s1, [r7, #8]
 800266e:	eeb0 0a67 	vmov.f32	s0, s15
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fbe8 	bl	8000e48 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3301      	adds	r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b02      	cmp	r3, #2
 8002682:	ddde      	ble.n	8002642 <gyroInitFilterNotch1+0x66>
        }
    }
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000500 	.word	0x20000500
 8002690:	08000d69 	.word	0x08000d69
 8002694:	08000ed5 	.word	0x08000ed5

08002698 <gyroInitFilterNotch2>:

static void gyroInitFilterNotch2(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	460a      	mov	r2, r1
 80026a2:	80fb      	strh	r3, [r7, #6]
 80026a4:	4613      	mov	r3, r2
 80026a6:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter2ApplyFn = nullFilterApply;
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <gyroInitFilterNotch2+0xb0>)
 80026aa:	4a28      	ldr	r2, [pc, #160]	; (800274c <gyroInitFilterNotch2+0xb4>)
 80026ac:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 80026b0:	88ba      	ldrh	r2, [r7, #4]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fe78 	bl	80023ac <calculateNyquistAdjustedNotchHz>
 80026bc:	4603      	mov	r3, r0
 80026be:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d03b      	beq.n	800273e <gyroInitFilterNotch2+0xa6>
 80026c6:	88bb      	ldrh	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d038      	beq.n	800273e <gyroInitFilterNotch2+0xa6>
        gyro.notchFilter2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <gyroInitFilterNotch2+0xb0>)
 80026ce:	4a20      	ldr	r2, [pc, #128]	; (8002750 <gyroInitFilterNotch2+0xb8>)
 80026d0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	ee07 3a10 	vmov	s14, r3
 80026e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80026e8:	eef0 0a47 	vmov.f32	s1, s14
 80026ec:	eeb0 0a67 	vmov.f32	s0, s15
 80026f0:	f7fe fb18 	bl	8000d24 <filterGetNotchQ>
 80026f4:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e01c      	b.n	8002738 <gyroInitFilterNotch2+0xa0>
            biquadFilterInit(&gyro.notchFilter2[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800270c:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <gyroInitFilterNotch2+0xb0>)
 800270e:	4413      	add	r3, r2
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	ee07 2a90 	vmov	s15, r2
 8002716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <gyroInitFilterNotch2+0xb0>)
 800271c:	6851      	ldr	r1, [r2, #4]
 800271e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002722:	2201      	movs	r2, #1
 8002724:	edd7 0a02 	vldr	s1, [r7, #8]
 8002728:	eeb0 0a67 	vmov.f32	s0, s15
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fb8b 	bl	8000e48 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3301      	adds	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b02      	cmp	r3, #2
 800273c:	dddf      	ble.n	80026fe <gyroInitFilterNotch2+0x66>
        }
    }
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000500 	.word	0x20000500
 800274c:	08000d69 	.word	0x08000d69
 8002750:	08000ed5 	.word	0x08000ed5

08002754 <gyroInitFilters>:

static void gyroInitFilters(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
    gyroInitLowpassFilterLpf(
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <gyroInitFilters+0x44>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002760:	2100      	movs	r1, #0
 8002762:	2000      	movs	r0, #0
 8002764:	f7ff fe48 	bl	80023f8 <gyroInitLowpassFilterLpf>
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.targetLooptime
    );

    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <gyroInitFilters+0x44>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002770:	2100      	movs	r1, #0
 8002772:	2001      	movs	r0, #1
 8002774:	f7ff fe40 	bl	80023f8 <gyroInitLowpassFilterLpf>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <gyroInitFilters+0x44>)
 800277e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.sampleLooptime
    );

    gyroInitFilterNotch1(0, 0);
 8002782:	2100      	movs	r1, #0
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff ff29 	bl	80025dc <gyroInitFilterNotch1>
    gyroInitFilterNotch2(0, 0);
 800278a:	2100      	movs	r1, #0
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff ff83 	bl	8002698 <gyroInitFilterNotch2>
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000500 	.word	0x20000500

0800279c <gyroInit>:

#define PID_PROCESS_DENOM_DEFAULT       1

void gyroInit(sensorGyroInitFuncPtr initFn, sensorGyroReadFuncPtr readFn)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
    gyro.gyroDebugMode = DEBUG_NONE;
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <gyroInit+0xb0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
    gyro.useDualGyroDebugging = false;
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <gyroInit+0xb0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
    gyro.gyroHasOverflowProtection = false;
 80027b6:	4b25      	ldr	r3, [pc, #148]	; (800284c <gyroInit+0xb0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
    gyro.gyroToUse = GYRO_CONFIG_USE_GYRO_1;
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <gyroInit+0xb0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
    gyro.gyroDebugAxis = FD_ROLL;
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <gyroInit+0xb0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

	gyro.gyroSensor1.gyroDev.initFn = initFn;
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <gyroInit+0xb0>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	63d3      	str	r3, [r2, #60]	; 0x3c
	gyro.gyroSensor1.gyroDev.readFn = readFn;
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <gyroInit+0xb0>)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
    static uint8_t gyroBuf1[GYRO_BUF_SIZE];
    // SPI DMA buffer required per device
    gyro.gyroSensor1.gyroDev.dev.txBuf = gyroBuf1;
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <gyroInit+0xb0>)
 80027dc:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <gyroInit+0xb4>)
 80027de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    gyro.gyroSensor1.gyroDev.dev.rxBuf = &gyroBuf1[GYRO_BUF_SIZE / 2];
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <gyroInit+0xb0>)
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <gyroInit+0xb8>)
 80027e6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    gyroInitSensor(&gyro.gyroSensor1);
 80027ea:	481b      	ldr	r0, [pc, #108]	; (8002858 <gyroInit+0xbc>)
 80027ec:	f7ff fd9f 	bl	800232e <gyroInitSensor>

    // Copy the sensor's scale to the high-level gyro object. If running in "BOTH" mode
    // then logic above requires both sensors to be the same so we'll use sensor1's scale.
    // This will need to be revised if we ever allow different sensor types to be used simultaneously.
    // Likewise determine the appropriate raw data for use in DEBUG_GYRO_RAW
    gyro.scale = gyro.gyroSensor1.gyroDev.scale;
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <gyroInit+0xb0>)
 80027f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <gyroInit+0xb0>)
 80027f8:	60d3      	str	r3, [r2, #12]
    gyro.rawSensorDev = &gyro.gyroSensor1.gyroDev;
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <gyroInit+0xb0>)
 80027fc:	4a16      	ldr	r2, [pc, #88]	; (8002858 <gyroInit+0xbc>)
 80027fe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    if (gyro.rawSensorDev) {
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <gyroInit+0xb0>)
 8002804:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00f      	beq.n	800282c <gyroInit+0x90>
        gyro.sampleRateHz = gyro.rawSensorDev->gyroSampleRateHz;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <gyroInit+0xb0>)
 800280e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002812:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <gyroInit+0xb0>)
 8002818:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = gyro.rawSensorDev->accSampleRateHz;
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <gyroInit+0xb0>)
 800281c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002820:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <gyroInit+0xb0>)
 8002826:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
 800282a:	e006      	b.n	800283a <gyroInit+0x9e>
    } else {
        gyro.sampleRateHz = 0;
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <gyroInit+0xb0>)
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 0;
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <gyroInit+0xb0>)
 8002834:	2200      	movs	r2, #0
 8002836:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
    }

	gyroSetTargetLooptime(PID_PROCESS_DENOM_DEFAULT);
 800283a:	2001      	movs	r0, #1
 800283c:	f7ff fce8 	bl	8002210 <gyroSetTargetLooptime>
	gyroInitFilters();
 8002840:	f7ff ff88 	bl	8002754 <gyroInitFilters>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000500 	.word	0x20000500
 8002850:	2000089c 	.word	0x2000089c
 8002854:	200008ac 	.word	0x200008ac
 8002858:	2000053c 	.word	0x2000053c

0800285c <gyroUpdateSensor>:

static void gyroUpdateSensor(gyroSensor_t *gyroSensor)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4610      	mov	r0, r2
 800286c:	4798      	blx	r3
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d02f      	beq.n	80028d4 <gyroUpdateSensor+0x78>
        return;
    }
    gyroSensor->gyroDev.dataReady = false;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    // move 16-bit gyro data into 32-bit variables to avoid overflows in calculations
    gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADC[X] - gyroSensor->gyroDev.gyroZero[X];
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADC[Y] - gyroSensor->gyroDev.gyroZero[Y];
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800289e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADC[Z] - gyroSensor->gyroDev.gyroZero[Z];
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80028b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    alignSensorViaRotation(gyroSensor->gyroDev.gyroADC, gyroSensor->gyroDev.gyroAlign);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f004 fbab 	bl	8007028 <alignSensorViaRotation>
 80028d2:	e000      	b.n	80028d6 <gyroUpdateSensor+0x7a>
        return;
 80028d4:	bf00      	nop
}
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <gyroFilter>:


static void gyroFilter(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	e074      	b.n	80029d2 <gyroFilter+0xf6>
        // downsample the individual gyro samples
        float gyroADCf = 0;
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
        if (gyro.downsampleFilterEnabled) {
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <gyroFilter+0x10c>)
 80028f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <gyroFilter+0x2e>
            // using gyro lowpass 2 filter for downsampling
            gyroADCf = gyro.sampleSum[axis];
 80028f8:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <gyroFilter+0x10c>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	330a      	adds	r3, #10
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	e020      	b.n	800294c <gyroFilter+0x70>
        } else {
            // using simple average for downsampling
            if (gyro.sampleCount) {
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <gyroFilter+0x10c>)
 800290c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <gyroFilter+0x5e>
                gyroADCf = gyro.sampleSum[axis] / gyro.sampleCount;
 8002914:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <gyroFilter+0x10c>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	330a      	adds	r3, #10
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3304      	adds	r3, #4
 8002920:	edd3 6a00 	vldr	s13, [r3]
 8002924:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <gyroFilter+0x10c>)
 8002926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002936:	edc7 7a00 	vstr	s15, [r7]
            }
            gyro.sampleSum[axis] = 0;
 800293a:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <gyroFilter+0x10c>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	330a      	adds	r3, #10
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
        }

        // apply static notch filters and software lowpass filters
        gyroADCf = gyro.notchFilter1ApplyFn((filter_t *)&gyro.notchFilter1[axis], gyroADCf);
 800294c:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <gyroFilter+0x10c>)
 800294e:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002960:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <gyroFilter+0x10c>)
 8002962:	4413      	add	r3, r2
 8002964:	3304      	adds	r3, #4
 8002966:	ed97 0a00 	vldr	s0, [r7]
 800296a:	4618      	mov	r0, r3
 800296c:	4788      	blx	r1
 800296e:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.notchFilter2ApplyFn((filter_t *)&gyro.notchFilter2[axis], gyroADCf);
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <gyroFilter+0x10c>)
 8002974:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002986:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <gyroFilter+0x10c>)
 8002988:	4413      	add	r3, r2
 800298a:	ed97 0a00 	vldr	s0, [r7]
 800298e:	4618      	mov	r0, r3
 8002990:	4788      	blx	r1
 8002992:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.lowpassFilterApplyFn((filter_t *)&gyro.lowpassFilter[axis], gyroADCf);
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <gyroFilter+0x10c>)
 8002998:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029aa:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <gyroFilter+0x10c>)
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	ed97 0a00 	vldr	s0, [r7]
 80029b4:	4618      	mov	r0, r3
 80029b6:	4788      	blx	r1
 80029b8:	ed87 0a00 	vstr	s0, [r7]


        gyro.gyroADCf[axis] = gyroADCf;
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <gyroFilter+0x10c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3306      	adds	r3, #6
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3304      	adds	r3, #4
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3301      	adds	r3, #1
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	dd87      	ble.n	80028e8 <gyroFilter+0xc>
    }
    gyro.sampleCount = 0;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <gyroFilter+0x10c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000500 	.word	0x20000500

080029ec <gyroAccumulateMeasurements>:

static void gyroAccumulateMeasurements(void) {
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	e038      	b.n	8002a6a <gyroAccumulateMeasurements+0x7e>
        // integrate using trapezium rule to avoid bias
        accumulatedMeasurements[axis] += 0.5f * (gyroPrevious[axis] + gyro.gyroADCf[axis]) * gyro.targetLooptime;
 80029f8:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <gyroAccumulateMeasurements+0x9c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	ed93 7a00 	vldr	s14, [r3]
 8002a04:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <gyroAccumulateMeasurements+0xa0>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	edd3 6a00 	vldr	s13, [r3]
 8002a10:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <gyroAccumulateMeasurements+0xa4>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3306      	adds	r3, #6
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a24:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002a28:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <gyroAccumulateMeasurements+0xa4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <gyroAccumulateMeasurements+0x9c>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	edc3 7a00 	vstr	s15, [r3]
        gyroPrevious[axis] = gyro.gyroADCf[axis];
 8002a4c:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <gyroAccumulateMeasurements+0xa4>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3306      	adds	r3, #6
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3304      	adds	r3, #4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	490c      	ldr	r1, [pc, #48]	; (8002a8c <gyroAccumulateMeasurements+0xa0>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3301      	adds	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	ddc3      	ble.n	80029f8 <gyroAccumulateMeasurements+0xc>
    }
    accumulatedMeasurementCount++;
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <gyroAccumulateMeasurements+0xa8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <gyroAccumulateMeasurements+0xa8>)
 8002a78:	6013      	str	r3, [r2, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000880 	.word	0x20000880
 8002a8c:	2000088c 	.word	0x2000088c
 8002a90:	20000500 	.word	0x20000500
 8002a94:	20000898 	.word	0x20000898

08002a98 <gyroUpdate>:

void gyroUpdate(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	gyroUpdateSensor(&gyro.gyroSensor1);
 8002a9c:	4842      	ldr	r0, [pc, #264]	; (8002ba8 <gyroUpdate+0x110>)
 8002a9e:	f7ff fedd 	bl	800285c <gyroUpdateSensor>

	gyro.gyroADC[X] = gyro.gyroSensor1.gyroDev.gyroADC[X] * gyro.gyroSensor1.gyroDev.scale;
 8002aa2:	4b42      	ldr	r3, [pc, #264]	; (8002bac <gyroUpdate+0x114>)
 8002aa4:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002aa8:	4b40      	ldr	r3, [pc, #256]	; (8002bac <gyroUpdate+0x114>)
 8002aaa:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <gyroUpdate+0x114>)
 8002ab4:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro.gyroADC[Y] = gyro.gyroSensor1.gyroDev.gyroADC[Y] * gyro.gyroSensor1.gyroDev.scale;
 8002ab8:	4b3c      	ldr	r3, [pc, #240]	; (8002bac <gyroUpdate+0x114>)
 8002aba:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <gyroUpdate+0x114>)
 8002ac0:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac8:	4b38      	ldr	r3, [pc, #224]	; (8002bac <gyroUpdate+0x114>)
 8002aca:	edc3 7a05 	vstr	s15, [r3, #20]
	gyro.gyroADC[Z] = gyro.gyroSensor1.gyroDev.gyroADC[Z] * gyro.gyroSensor1.gyroDev.scale;
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <gyroUpdate+0x114>)
 8002ad0:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <gyroUpdate+0x114>)
 8002ad6:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ade:	4b33      	ldr	r3, [pc, #204]	; (8002bac <gyroUpdate+0x114>)
 8002ae0:	edc3 7a06 	vstr	s15, [r3, #24]

    if (gyro.downsampleFilterEnabled) {
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <gyroUpdate+0x114>)
 8002ae6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d02d      	beq.n	8002b4a <gyroUpdate+0xb2>
        // using gyro lowpass 2 filter for downsampling
        gyro.sampleSum[X] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[X], gyro.gyroADC[X]);
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <gyroUpdate+0x114>)
 8002af0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002af4:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <gyroUpdate+0x114>)
 8002af6:	edd2 7a04 	vldr	s15, [r2, #16]
 8002afa:	eeb0 0a67 	vmov.f32	s0, s15
 8002afe:	482c      	ldr	r0, [pc, #176]	; (8002bb0 <gyroUpdate+0x118>)
 8002b00:	4798      	blx	r3
 8002b02:	eef0 7a40 	vmov.f32	s15, s0
 8002b06:	4b29      	ldr	r3, [pc, #164]	; (8002bac <gyroUpdate+0x114>)
 8002b08:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Y], gyro.gyroADC[Y]);
 8002b0c:	4b27      	ldr	r3, [pc, #156]	; (8002bac <gyroUpdate+0x114>)
 8002b0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b12:	4a26      	ldr	r2, [pc, #152]	; (8002bac <gyroUpdate+0x114>)
 8002b14:	edd2 7a05 	vldr	s15, [r2, #20]
 8002b18:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1c:	4825      	ldr	r0, [pc, #148]	; (8002bb4 <gyroUpdate+0x11c>)
 8002b1e:	4798      	blx	r3
 8002b20:	eef0 7a40 	vmov.f32	s15, s0
 8002b24:	4b21      	ldr	r3, [pc, #132]	; (8002bac <gyroUpdate+0x114>)
 8002b26:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Z], gyro.gyroADC[Z]);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <gyroUpdate+0x114>)
 8002b2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b30:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <gyroUpdate+0x114>)
 8002b32:	edd2 7a06 	vldr	s15, [r2, #24]
 8002b36:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3a:	481f      	ldr	r0, [pc, #124]	; (8002bb8 <gyroUpdate+0x120>)
 8002b3c:	4798      	blx	r3
 8002b3e:	eef0 7a40 	vmov.f32	s15, s0
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <gyroUpdate+0x114>)
 8002b44:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8002b48:	e028      	b.n	8002b9c <gyroUpdate+0x104>
    } else {
        // using simple averaging for downsampling
        gyro.sampleSum[X] += gyro.gyroADC[X];
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <gyroUpdate+0x114>)
 8002b4c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <gyroUpdate+0x114>)
 8002b52:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <gyroUpdate+0x114>)
 8002b5c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <gyroUpdate+0x114>)
 8002b62:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <gyroUpdate+0x114>)
 8002b68:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <gyroUpdate+0x114>)
 8002b72:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <gyroUpdate+0x114>)
 8002b78:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <gyroUpdate+0x114>)
 8002b7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <gyroUpdate+0x114>)
 8002b88:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleCount++;
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <gyroUpdate+0x114>)
 8002b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b92:	3301      	adds	r3, #1
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <gyroUpdate+0x114>)
 8002b98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    gyroFilter();
 8002b9c:	f7ff fe9e 	bl	80028dc <gyroFilter>
	gyroAccumulateMeasurements();
 8002ba0:	f7ff ff24 	bl	80029ec <gyroAccumulateMeasurements>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000053c 	.word	0x2000053c
 8002bac:	20000500 	.word	0x20000500
 8002bb0:	20000708 	.word	0x20000708
 8002bb4:	20000730 	.word	0x20000730
 8002bb8:	20000758 	.word	0x20000758

08002bbc <gyroGetAccumulationAverage>:

bool gyroGetAccumulationAverage(float *accumulationAverage)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
    if (accumulatedMeasurementCount) {
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <gyroGetAccumulationAverage+0x9c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02e      	beq.n	8002c2a <gyroGetAccumulationAverage+0x6e>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        const timeUs_t accumulatedMeasurementTimeUs = accumulatedMeasurementCount * gyro.targetLooptime;
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <gyroGetAccumulationAverage+0xa0>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <gyroGetAccumulationAverage+0x9c>)
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	60fb      	str	r3, [r7, #12]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e01c      	b.n	8002c1a <gyroGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accumulatedMeasurements[axis] / accumulatedMeasurementTimeUs;
 8002be0:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <gyroGetAccumulationAverage+0xa4>)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	edd3 6a00 	vldr	s13, [r3]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c02:	edc3 7a00 	vstr	s15, [r3]
            accumulatedMeasurements[axis] = 0.0f;
 8002c06:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <gyroGetAccumulationAverage+0xa4>)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	dddf      	ble.n	8002be0 <gyroGetAccumulationAverage+0x24>
        }
        accumulatedMeasurementCount = 0;
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <gyroGetAccumulationAverage+0x9c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
        return true;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e010      	b.n	8002c4c <gyroGetAccumulationAverage+0x90>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	e009      	b.n	8002c44 <gyroGetAccumulationAverage+0x88>
            accumulationAverage[axis] = 0.0f;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	3301      	adds	r3, #1
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	ddf2      	ble.n	8002c30 <gyroGetAccumulationAverage+0x74>
        }
        return false;
 8002c4a:	2300      	movs	r3, #0
    }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	20000898 	.word	0x20000898
 8002c5c:	20000500 	.word	0x20000500
 8002c60:	20000880 	.word	0x20000880

08002c64 <gyroOverflowDetected>:

bool gyroOverflowDetected(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
    return false;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <MX_I2C1_Init+0x78>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <MX_I2C1_Init+0x7c>)
 8002c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cae:	480e      	ldr	r0, [pc, #56]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002cb0:	f005 f840 	bl	8007d34 <HAL_I2C_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cba:	f002 fd11 	bl	80056e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002cc2:	f005 fd8f 	bl	80087e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ccc:	f002 fd08 	bl	80056e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_I2C1_Init+0x74>)
 8002cd4:	f005 fdd1 	bl	800887a <HAL_I2CEx_ConfigDigitalFilter>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cde:	f002 fcff 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200008bc 	.word	0x200008bc
 8002cec:	40005400 	.word	0x40005400
 8002cf0:	2010091a 	.word	0x2010091a

08002cf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b0ae      	sub	sp, #184	; 0xb8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2290      	movs	r2, #144	; 0x90
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f00b ffe2 	bl	800ecde <memset>
  if(i2cHandle->Instance==I2C1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_I2C_MspInit+0xb4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d13c      	bne.n	8002d9e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d2e:	f107 0314 	add.w	r3, r7, #20
 8002d32:	4618      	mov	r0, r3
 8002d34:	f006 fc9c 	bl	8009670 <HAL_RCCEx_PeriphCLKConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002d3e:	f002 fccf 	bl	80056e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <HAL_I2C_MspInit+0xb8>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a19      	ldr	r2, [pc, #100]	; (8002dac <HAL_I2C_MspInit+0xb8>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_I2C_MspInit+0xb8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d62:	2312      	movs	r3, #18
 8002d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d74:	2304      	movs	r3, #4
 8002d76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480b      	ldr	r0, [pc, #44]	; (8002db0 <HAL_I2C_MspInit+0xbc>)
 8002d82:	f004 fe11 	bl	80079a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_I2C_MspInit+0xb8>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <HAL_I2C_MspInit+0xb8>)
 8002d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_I2C_MspInit+0xb8>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d9e:	bf00      	nop
 8002da0:	37b8      	adds	r7, #184	; 0xb8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40005400 	.word	0x40005400
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020400 	.word	0x40020400

08002db4 <getCosTiltAngle>:
static int throttleAngleValue;
static float fc_acc;
static float smallAngleCosZ = 0;

static float getCosTiltAngle(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
    return rMat[2][2];
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <getCosTiltAngle+0x18>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	ee07 3a90 	vmov	s15, r3
}
 8002dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	20000920 	.word	0x20000920

08002dd0 <imuQuaternionComputeProducts>:

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	ed93 7a00 	vldr	s14, [r3]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	ed93 7a00 	vldr	s14, [r3]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	ed93 7a00 	vldr	s14, [r3]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <imuComputeRotationMatrix>:

static void imuComputeRotationMatrix(void){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 8002ec8:	4946      	ldr	r1, [pc, #280]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002eca:	4847      	ldr	r0, [pc, #284]	; (8002fe8 <imuComputeRotationMatrix+0x124>)
 8002ecc:	f7ff ff80 	bl	8002dd0 <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 8002ed0:	4b44      	ldr	r3, [pc, #272]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002ed2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ed6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ede:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ee2:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002ee4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ee8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef0:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002ef2:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002ef8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002efc:	4b39      	ldr	r3, [pc, #228]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002efe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f0a:	4b38      	ldr	r3, [pc, #224]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002f0c:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f12:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f16:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f18:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f24:	4b31      	ldr	r3, [pc, #196]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002f26:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f2c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f32:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002f40:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f46:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002f66:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f6c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f70:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002f80:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f86:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002f8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002f9a:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002fa0:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002fa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002fb4:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002fba:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <imuComputeRotationMatrix+0x120>)
 8002fcc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <imuComputeRotationMatrix+0x128>)
 8002fda:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000014 	.word	0x20000014
 8002fe8:	20000004 	.word	0x20000004
 8002fec:	20000920 	.word	0x20000920

08002ff0 <calculateAccZLowPassFilterRCTimeConstant>:

static float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.5f / (M_PIf * accz_lpf_cutoff);
 8002ffa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ffe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003020 <calculateAccZLowPassFilterRCTimeConstant+0x30>
 8003002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003006:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800300a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800300e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003012:	eeb0 0a67 	vmov.f32	s0, s15
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40490fdb 	.word	0x40490fdb

08003024 <calculateThrottleAngleScale>:

static float calculateThrottleAngleScale(uint16_t throttle_correction_angle)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	80fb      	strh	r3, [r7, #6]
    return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003038:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003058 <calculateThrottleAngleScale+0x34>
 800303c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003040:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800305c <calculateThrottleAngleScale+0x38>
 8003044:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003048:	eeb0 0a67 	vmov.f32	s0, s15
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	44610000 	.word	0x44610000
 800305c:	440f3d4c 	.word	0x440f3d4c

08003060 <imuConfigure>:

static void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	460a      	mov	r2, r1
 800306a:	80fb      	strh	r3, [r7, #6]
 800306c:	4613      	mov	r3, r2
 800306e:	717b      	strb	r3, [r7, #5]
    imuRuntimeConfig.dcm_kp = 2500 / 10000.0f;
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <imuConfigure+0x70>)
 8003072:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003076:	605a      	str	r2, [r3, #4]
    imuRuntimeConfig.dcm_ki = 5000 / 10000.0f;
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <imuConfigure+0x70>)
 800307a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800307e:	601a      	str	r2, [r3, #0]

    smallAngleCosZ = cos_approx(degreesToRadians(25));
 8003080:	2019      	movs	r0, #25
 8003082:	f7fe fcc1 	bl	8001a08 <degreesToRadians>
 8003086:	eef0 7a40 	vmov.f32	s15, s0
 800308a:	eeb0 0a67 	vmov.f32	s0, s15
 800308e:	f7fe fa5d 	bl	800154c <cos_approx>
 8003092:	eef0 7a40 	vmov.f32	s15, s0
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <imuConfigure+0x74>)
 8003098:	edc3 7a00 	vstr	s15, [r3]

    fc_acc = calculateAccZLowPassFilterRCTimeConstant(5.0f); // Set to fix value
 800309c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80030a0:	f7ff ffa6 	bl	8002ff0 <calculateAccZLowPassFilterRCTimeConstant>
 80030a4:	eef0 7a40 	vmov.f32	s15, s0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <imuConfigure+0x78>)
 80030aa:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = calculateThrottleAngleScale(throttle_correction_angle);
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ffb7 	bl	8003024 <calculateThrottleAngleScale>
 80030b6:	eef0 7a40 	vmov.f32	s15, s0
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <imuConfigure+0x7c>)
 80030bc:	edc3 7a00 	vstr	s15, [r3]

    throttleAngleValue = throttle_correction_value;
 80030c0:	797b      	ldrb	r3, [r7, #5]
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <imuConfigure+0x80>)
 80030c4:	6013      	str	r3, [r2, #0]
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000918 	.word	0x20000918
 80030d4:	2000095c 	.word	0x2000095c
 80030d8:	20000958 	.word	0x20000958
 80030dc:	20000950 	.word	0x20000950
 80030e0:	20000954 	.word	0x20000954

080030e4 <imuInit>:

void imuInit(void) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
	imuConfigure(800, 10);
 80030e8:	210a      	movs	r1, #10
 80030ea:	f44f 7048 	mov.w	r0, #800	; 0x320
 80030ee:	f7ff ffb7 	bl	8003060 <imuConfigure>
    canUseGPSHeading = false;
 80030f2:	4b03      	ldr	r3, [pc, #12]	; (8003100 <imuInit+0x1c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]

    imuComputeRotationMatrix();
 80030f8:	f7ff fee4 	bl	8002ec4 <imuComputeRotationMatrix>
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000001 	.word	0x20000001

08003104 <imuIsAccelerometerHealthy>:

static bool imuIsAccelerometerHealthy(float *accAverage)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
    float accMagnitudeSq = 0;
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	e012      	b.n	800313e <imuIsAccelerometerHealthy+0x3a>
        const float a = accAverage[axis];
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]
        accMagnitudeSq += a * a;
 8003124:	edd7 7a03 	vldr	s15, [r7, #12]
 8003128:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800312c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	3301      	adds	r3, #1
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b02      	cmp	r3, #2
 8003142:	dde9      	ble.n	8003118 <imuIsAccelerometerHealthy+0x14>
    }

    accMagnitudeSq = accMagnitudeSq * sq(acc.dev.acc_1G_rec);
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <imuIsAccelerometerHealthy+0x94>)
 8003146:	ed93 7a00 	vldr	s14, [r3]
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <imuIsAccelerometerHealthy+0x94>)
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003154:	ed97 7a05 	vldr	s14, [r7, #20]
 8003158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Accept accel readings only in range 0.9g - 1.1g
    return (0.81f < accMagnitudeSq) && (accMagnitudeSq < 1.21f);
 8003160:	edd7 7a05 	vldr	s15, [r7, #20]
 8003164:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800319c <imuIsAccelerometerHealthy+0x98>
 8003168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	dd0a      	ble.n	8003188 <imuIsAccelerometerHealthy+0x84>
 8003172:	edd7 7a05 	vldr	s15, [r7, #20]
 8003176:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80031a0 <imuIsAccelerometerHealthy+0x9c>
 800317a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003182:	d501      	bpl.n	8003188 <imuIsAccelerometerHealthy+0x84>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <imuIsAccelerometerHealthy+0x86>
 8003188:	2300      	movs	r3, #0
 800318a:	b2db      	uxtb	r3, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	20000254 	.word	0x20000254
 800319c:	3f4f5c29 	.word	0x3f4f5c29
 80031a0:	3f9ae148 	.word	0x3f9ae148

080031a4 <invSqrt>:

static float invSqrt(float x)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 80031ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80031b2:	f00e fb9d 	bl	80118f0 <sqrtf>
 80031b6:	eef0 7a40 	vmov.f32	s15, s0
 80031ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80031c6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <imuMahonyAHRSupdate>:

static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
                                bool useAcc, float ax, float ay, float az,
                                bool useMag,
                                bool useCOG, float courseOverGround, const float dcmKpGain)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	ed2d 8b02 	vpush	{d8}
 80031d6:	b09e      	sub	sp, #120	; 0x78
 80031d8:	af00      	add	r7, sp, #0
 80031da:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80031de:	edc7 0a08 	vstr	s1, [r7, #32]
 80031e2:	ed87 1a07 	vstr	s2, [r7, #28]
 80031e6:	edc7 1a06 	vstr	s3, [r7, #24]
 80031ea:	4603      	mov	r3, r0
 80031ec:	ed87 2a04 	vstr	s4, [r7, #16]
 80031f0:	edc7 2a03 	vstr	s5, [r7, #12]
 80031f4:	ed87 3a02 	vstr	s6, [r7, #8]
 80031f8:	edc7 3a01 	vstr	s7, [r7, #4]
 80031fc:	ed87 4a00 	vstr	s8, [r7]
 8003200:	75fb      	strb	r3, [r7, #23]
 8003202:	460b      	mov	r3, r1
 8003204:	75bb      	strb	r3, [r7, #22]
 8003206:	4613      	mov	r3, r2
 8003208:	757b      	strb	r3, [r7, #21]
    static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error terms scaled by Ki

    // Calculate general spin rate (rad/s)
    const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 800320a:	edd7 7a08 	vldr	s15, [r7, #32]
 800320e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003212:	edd7 7a07 	vldr	s15, [r7, #28]
 8003216:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800321a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003222:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322a:	eeb0 0a67 	vmov.f32	s0, s15
 800322e:	f00e fb5f 	bl	80118f0 <sqrtf>
 8003232:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    // Use raw heading error (from GPS or whatever else)
    float ex = 0, ey = 0, ez = 0;
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	677b      	str	r3, [r7, #116]	; 0x74
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	673b      	str	r3, [r7, #112]	; 0x70
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (useCOG) {
 8003248:	7d7b      	ldrb	r3, [r7, #21]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d060      	beq.n	8003310 <imuMahonyAHRSupdate+0x140>
        while (courseOverGround >  M_PIf) {
 800324e:	e007      	b.n	8003260 <imuMahonyAHRSupdate+0x90>
            courseOverGround -= (2.0f * M_PIf);
 8003250:	edd7 7a01 	vldr	s15, [r7, #4]
 8003254:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003278 <imuMahonyAHRSupdate+0xa8>
 8003258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800325c:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround >  M_PIf) {
 8003260:	edd7 7a01 	vldr	s15, [r7, #4]
 8003264:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8003274 <imuMahonyAHRSupdate+0xa4>
 8003268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	dcee      	bgt.n	8003250 <imuMahonyAHRSupdate+0x80>
        }

        while (courseOverGround < -M_PIf) {
 8003272:	e00d      	b.n	8003290 <imuMahonyAHRSupdate+0xc0>
 8003274:	40490fdb 	.word	0x40490fdb
 8003278:	40c90fdb 	.word	0x40c90fdb
 800327c:	c0490fdb 	.word	0xc0490fdb
            courseOverGround += (2.0f * M_PIf);
 8003280:	edd7 7a01 	vldr	s15, [r7, #4]
 8003284:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8003278 <imuMahonyAHRSupdate+0xa8>
 8003288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800328c:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround < -M_PIf) {
 8003290:	edd7 7a01 	vldr	s15, [r7, #4]
 8003294:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800327c <imuMahonyAHRSupdate+0xac>
 8003298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	d4ee      	bmi.n	8003280 <imuMahonyAHRSupdate+0xb0>
        }

        const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGround) * rMat[1][0]);
 80032a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80032a6:	f7fe f8a7 	bl	80013f8 <sin_approx>
 80032aa:	eef0 7a40 	vmov.f32	s15, s0
 80032ae:	eeb1 7a67 	vneg.f32	s14, s15
 80032b2:	4bdb      	ldr	r3, [pc, #876]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80032b4:	edd3 7a00 	vldr	s15, [r3]
 80032b8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80032bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80032c0:	f7fe f944 	bl	800154c <cos_approx>
 80032c4:	eeb0 7a40 	vmov.f32	s14, s0
 80032c8:	4bd5      	ldr	r3, [pc, #852]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80032ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80032ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80032d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        ex = rMat[2][0] * ez_ef;
 80032da:	4bd1      	ldr	r3, [pc, #836]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80032dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80032e0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80032e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey = rMat[2][1] * ez_ef;
 80032ec:	4bcc      	ldr	r3, [pc, #816]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80032ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80032f2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez = rMat[2][2] * ez_ef;
 80032fe:	4bc8      	ldr	r3, [pc, #800]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 8003300:	edd3 7a08 	vldr	s15, [r3, #32]
 8003304:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8003308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured magnetic field vector
    float mx = mag.magADC[X];
 8003310:	4bc4      	ldr	r3, [pc, #784]	; (8003624 <imuMahonyAHRSupdate+0x454>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
    float my = mag.magADC[Y];
 8003316:	4bc3      	ldr	r3, [pc, #780]	; (8003624 <imuMahonyAHRSupdate+0x454>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	65fb      	str	r3, [r7, #92]	; 0x5c
    float mz = mag.magADC[Z];
 800331c:	4bc1      	ldr	r3, [pc, #772]	; (8003624 <imuMahonyAHRSupdate+0x454>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	65bb      	str	r3, [r7, #88]	; 0x58
    float recipMagNorm = sq(mx) + sq(my) + sq(mz);
 8003322:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003326:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800332a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800332e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003336:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800333a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800333e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003342:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (useMag && recipMagNorm > 0.01f) {
 8003346:	7dbb      	ldrb	r3, [r7, #22]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 809f 	beq.w	800348c <imuMahonyAHRSupdate+0x2bc>
 800334e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003352:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003628 <imuMahonyAHRSupdate+0x458>
 8003356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	f340 8095 	ble.w	800348c <imuMahonyAHRSupdate+0x2bc>
        // Normalise magnetometer measurement
        recipMagNorm = invSqrt(recipMagNorm);
 8003362:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8003366:	f7ff ff1d 	bl	80031a4 <invSqrt>
 800336a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        mx *= recipMagNorm;
 800336e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003372:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        my *= recipMagNorm;
 800337e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003382:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        mz *= recipMagNorm;
 800338e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003392:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        // For magnetometer correction we make an assumption that magnetic field is perpendicular to gravity (ignore Z-component in EF).
        // This way magnetic field will only affect heading and wont mess roll/pitch angles

        // (hx; hy; 0) - measured mag field vector in EF (assuming Z-component is zero)
        // (bx; 0; 0) - reference mag field vector heading due North in EF (assuming Z-component is zero)
        const float hx = rMat[0][0] * mx + rMat[0][1] * my + rMat[0][2] * mz;
 800339e:	4ba0      	ldr	r3, [pc, #640]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80033a0:	ed93 7a00 	vldr	s14, [r3]
 80033a4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80033a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033ac:	4b9c      	ldr	r3, [pc, #624]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80033ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80033b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80033b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033be:	4b98      	ldr	r3, [pc, #608]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80033c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80033c4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        const float hy = rMat[1][0] * mx + rMat[1][1] * my + rMat[1][2] * mz;
 80033d4:	4b92      	ldr	r3, [pc, #584]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80033d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80033da:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80033de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e2:	4b8f      	ldr	r3, [pc, #572]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80033e4:	edd3 6a04 	vldr	s13, [r3, #16]
 80033e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80033ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f4:	4b8a      	ldr	r3, [pc, #552]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 80033f6:	edd3 6a05 	vldr	s13, [r3, #20]
 80033fa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80033fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003406:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        const float bx = sqrtf(hx * hx + hy * hy);
 800340a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800340e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003412:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003416:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800341a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341e:	eeb0 0a67 	vmov.f32	s0, s15
 8003422:	f00e fa65 	bl	80118f0 <sqrtf>
 8003426:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

        // magnetometer error is cross product between estimated magnetic north and measured magnetic north (calculated in EF)
        const float ez_ef = -(hy * bx);
 800342a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800342e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	eef1 7a67 	vneg.f32	s15, s15
 800343a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        // Rotate mag error vector back to BF and accumulate
        ex += rMat[2][0] * ez_ef;
 800343e:	4b78      	ldr	r3, [pc, #480]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 8003440:	ed93 7a06 	vldr	s14, [r3, #24]
 8003444:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003454:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += rMat[2][1] * ez_ef;
 8003458:	4b71      	ldr	r3, [pc, #452]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 800345a:	ed93 7a07 	vldr	s14, [r3, #28]
 800345e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003466:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += rMat[2][2] * ez_ef;
 8003472:	4b6b      	ldr	r3, [pc, #428]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 8003474:	ed93 7a08 	vldr	s14, [r3, #32]
 8003478:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800347c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003480:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8003484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003488:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured acceleration vector
    float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 800348c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003490:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003494:	edd7 7a03 	vldr	s15, [r7, #12]
 8003498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800349c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (useAcc && recipAccNorm > 0.01f) {
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d068      	beq.n	8003588 <imuMahonyAHRSupdate+0x3b8>
 80034b6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80034ba:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003628 <imuMahonyAHRSupdate+0x458>
 80034be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c6:	dd5f      	ble.n	8003588 <imuMahonyAHRSupdate+0x3b8>
        // Normalise accelerometer measurement
        recipAccNorm = invSqrt(recipAccNorm);
 80034c8:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80034cc:	f7ff fe6a 	bl	80031a4 <invSqrt>
 80034d0:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        ax *= recipAccNorm;
 80034d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80034d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80034dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e0:	edc7 7a04 	vstr	s15, [r7, #16]
        ay *= recipAccNorm;
 80034e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80034e8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80034ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f0:	edc7 7a03 	vstr	s15, [r7, #12]
        az *= recipAccNorm;
 80034f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80034f8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80034fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003500:	edc7 7a02 	vstr	s15, [r7, #8]

        // Error is sum of cross product between estimated direction and measured direction of gravity
        ex += (ay * rMat[2][2] - az * rMat[2][1]);
 8003504:	4b46      	ldr	r3, [pc, #280]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 8003506:	ed93 7a08 	vldr	s14, [r3, #32]
 800350a:	edd7 7a03 	vldr	s15, [r7, #12]
 800350e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003512:	4b43      	ldr	r3, [pc, #268]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 8003514:	edd3 6a07 	vldr	s13, [r3, #28]
 8003518:	edd7 7a02 	vldr	s15, [r7, #8]
 800351c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003524:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += (az * rMat[2][0] - ax * rMat[2][2]);
 8003530:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 8003532:	ed93 7a06 	vldr	s14, [r3, #24]
 8003536:	edd7 7a02 	vldr	s15, [r7, #8]
 800353a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800353e:	4b38      	ldr	r3, [pc, #224]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 8003540:	edd3 6a08 	vldr	s13, [r3, #32]
 8003544:	edd7 7a04 	vldr	s15, [r7, #16]
 8003548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003550:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003558:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 800355c:	4b30      	ldr	r3, [pc, #192]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 800355e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003562:	edd7 7a04 	vldr	s15, [r7, #16]
 8003566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <imuMahonyAHRSupdate+0x450>)
 800356c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003570:	edd7 7a03 	vldr	s15, [r7, #12]
 8003574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8003580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003584:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Compute and apply integral feedback if enabled
    if (imuRuntimeConfig.dcm_ki > 0.0f) {
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <imuMahonyAHRSupdate+0x45c>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	dd53      	ble.n	8003640 <imuMahonyAHRSupdate+0x470>
        // Stop integrating if spinning beyond the certain limit
        if (spin_rate < DEGREES_TO_RADIANS(SPIN_RATE_LIMIT)) {
 8003598:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800359c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003630 <imuMahonyAHRSupdate+0x460>
 80035a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d556      	bpl.n	8003658 <imuMahonyAHRSupdate+0x488>
            const float dcmKiGain = imuRuntimeConfig.dcm_ki;
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <imuMahonyAHRSupdate+0x45c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
            integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
 80035b0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80035b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <imuMahonyAHRSupdate+0x464>)
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <imuMahonyAHRSupdate+0x464>)
 80035d0:	edc3 7a00 	vstr	s15, [r3]
            integralFBy += dcmKiGain * ey * dt;
 80035d4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035d8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80035dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e8:	4b13      	ldr	r3, [pc, #76]	; (8003638 <imuMahonyAHRSupdate+0x468>)
 80035ea:	edd3 7a00 	vldr	s15, [r3]
 80035ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <imuMahonyAHRSupdate+0x468>)
 80035f4:	edc3 7a00 	vstr	s15, [r3]
            integralFBz += dcmKiGain * ez * dt;
 80035f8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035fc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003604:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <imuMahonyAHRSupdate+0x46c>)
 800360e:	edd3 7a00 	vldr	s15, [r3]
 8003612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <imuMahonyAHRSupdate+0x46c>)
 8003618:	edc3 7a00 	vstr	s15, [r3]
 800361c:	e01c      	b.n	8003658 <imuMahonyAHRSupdate+0x488>
 800361e:	bf00      	nop
 8003620:	20000920 	.word	0x20000920
 8003624:	200009f4 	.word	0x200009f4
 8003628:	3c23d70a 	.word	0x3c23d70a
 800362c:	20000918 	.word	0x20000918
 8003630:	3eb2b8c2 	.word	0x3eb2b8c2
 8003634:	20000960 	.word	0x20000960
 8003638:	20000964 	.word	0x20000964
 800363c:	20000968 	.word	0x20000968
        }
    } else {
        integralFBx = 0.0f;    // prevent integral windup
 8003640:	4ba3      	ldr	r3, [pc, #652]	; (80038d0 <imuMahonyAHRSupdate+0x700>)
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
        integralFBy = 0.0f;
 8003648:	4ba2      	ldr	r3, [pc, #648]	; (80038d4 <imuMahonyAHRSupdate+0x704>)
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
        integralFBz = 0.0f;
 8003650:	4ba1      	ldr	r3, [pc, #644]	; (80038d8 <imuMahonyAHRSupdate+0x708>)
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional and integral feedback
    gx += dcmKpGain * ex + integralFBx;
 8003658:	ed97 7a00 	vldr	s14, [r7]
 800365c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003664:	4b9a      	ldr	r3, [pc, #616]	; (80038d0 <imuMahonyAHRSupdate+0x700>)
 8003666:	edd3 7a00 	vldr	s15, [r3]
 800366a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003676:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += dcmKpGain * ey + integralFBy;
 800367a:	ed97 7a00 	vldr	s14, [r7]
 800367e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003686:	4b93      	ldr	r3, [pc, #588]	; (80038d4 <imuMahonyAHRSupdate+0x704>)
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003690:	ed97 7a07 	vldr	s14, [r7, #28]
 8003694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003698:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += dcmKpGain * ez + integralFBz;
 800369c:	ed97 7a00 	vldr	s14, [r7]
 80036a0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80036a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a8:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <imuMahonyAHRSupdate+0x708>)
 80036aa:	edd3 7a00 	vldr	s15, [r3]
 80036ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80036b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ba:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrate rate of change of quaternion
    gx *= (0.5f * dt);
 80036be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	edc7 7a08 	vstr	s15, [r7, #32]
    gy *= (0.5f * dt);
 80036d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ea:	edc7 7a07 	vstr	s15, [r7, #28]
    gz *= (0.5f * dt);
 80036ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003702:	edc7 7a06 	vstr	s15, [r7, #24]

    quaternion buffer;
    buffer.w = q.w;
 8003706:	4b75      	ldr	r3, [pc, #468]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer.x = q.x;
 800370c:	4b73      	ldr	r3, [pc, #460]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
    buffer.y = q.y;
 8003712:	4b72      	ldr	r3, [pc, #456]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
    buffer.z = q.z;
 8003718:	4b70      	ldr	r3, [pc, #448]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	637b      	str	r3, [r7, #52]	; 0x34

    q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 800371e:	4b6f      	ldr	r3, [pc, #444]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003720:	ed93 7a00 	vldr	s14, [r3]
 8003724:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003728:	eef1 6a67 	vneg.f32	s13, s15
 800372c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003730:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003734:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003738:	edd7 7a07 	vldr	s15, [r7, #28]
 800373c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003740:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003744:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003748:	edd7 7a06 	vldr	s15, [r7, #24]
 800374c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003750:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003758:	4b60      	ldr	r3, [pc, #384]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800375a:	edc3 7a00 	vstr	s15, [r3]
    q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 800375e:	4b5f      	ldr	r3, [pc, #380]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003760:	ed93 7a01 	vldr	s14, [r3, #4]
 8003764:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003768:	edd7 7a08 	vldr	s15, [r7, #32]
 800376c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003770:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003774:	edd7 7a06 	vldr	s15, [r7, #24]
 8003778:	ee66 7a27 	vmul.f32	s15, s12, s15
 800377c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003780:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003784:	edd7 7a07 	vldr	s15, [r7, #28]
 8003788:	ee66 7a27 	vmul.f32	s15, s12, s15
 800378c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003794:	4b51      	ldr	r3, [pc, #324]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003796:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 800379a:	4b50      	ldr	r3, [pc, #320]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800379c:	ed93 7a02 	vldr	s14, [r3, #8]
 80037a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80037a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80037a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037ac:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 80037b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80037b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80037bc:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80037c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80037c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d0:	4b42      	ldr	r3, [pc, #264]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 80037d2:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 80037d6:	4b41      	ldr	r3, [pc, #260]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 80037d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80037dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80037e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80037e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037e8:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 80037ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80037f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80037f8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80037fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003800:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003804:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380c:	4b33      	ldr	r3, [pc, #204]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800380e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalise quaternion
    float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 8003812:	4b32      	ldr	r3, [pc, #200]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003814:	ed93 7a00 	vldr	s14, [r3]
 8003818:	4b30      	ldr	r3, [pc, #192]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003824:	edd3 6a01 	vldr	s13, [r3, #4]
 8003828:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800382a:	edd3 7a01 	vldr	s15, [r3, #4]
 800382e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003836:	4b29      	ldr	r3, [pc, #164]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003838:	edd3 6a02 	vldr	s13, [r3, #8]
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800383e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800384c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003850:	4b22      	ldr	r3, [pc, #136]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003852:	edd3 7a03 	vldr	s15, [r3, #12]
 8003856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800385a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385e:	eeb0 0a67 	vmov.f32	s0, s15
 8003862:	f7ff fc9f 	bl	80031a4 <invSqrt>
 8003866:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    q.w *= recipNorm;
 800386a:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800386c:	ed93 7a00 	vldr	s14, [r3]
 8003870:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800387a:	edc3 7a00 	vstr	s15, [r3]
    q.x *= recipNorm;
 800387e:	4b17      	ldr	r3, [pc, #92]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003880:	ed93 7a01 	vldr	s14, [r3, #4]
 8003884:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 800388e:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y *= recipNorm;
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 8003894:	ed93 7a02 	vldr	s14, [r3, #8]
 8003898:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 80038a2:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z *= recipNorm;
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 80038a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80038ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80038b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <imuMahonyAHRSupdate+0x70c>)
 80038b6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Pre-compute rotation matrix from quaternion
    imuComputeRotationMatrix();
 80038ba:	f7ff fb03 	bl	8002ec4 <imuComputeRotationMatrix>

    attitudeIsEstablished = true;
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <imuMahonyAHRSupdate+0x710>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	3778      	adds	r7, #120	; 0x78
 80038c8:	46bd      	mov	sp, r7
 80038ca:	ecbd 8b02 	vpop	{d8}
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000960 	.word	0x20000960
 80038d4:	20000964 	.word	0x20000964
 80038d8:	20000968 	.word	0x20000968
 80038dc:	20000004 	.word	0x20000004
 80038e0:	20000916 	.word	0x20000916

080038e4 <imuUpdateEulerAngles>:

static void imuUpdateEulerAngles(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
    attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 80038e8:	4b30      	ldr	r3, [pc, #192]	; (80039ac <imuUpdateEulerAngles+0xc8>)
 80038ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <imuUpdateEulerAngles+0xc8>)
 80038f0:	ed93 7a08 	vldr	s14, [r3, #32]
 80038f4:	eef0 0a47 	vmov.f32	s1, s14
 80038f8:	eeb0 0a67 	vmov.f32	s0, s15
 80038fc:	f7fd fe92 	bl	8001624 <atan2_approx>
 8003900:	eef0 7a40 	vmov.f32	s15, s0
 8003904:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80039b0 <imuUpdateEulerAngles+0xcc>
 8003908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800390c:	eeb0 0a67 	vmov.f32	s0, s15
 8003910:	f00d fe34 	bl	801157c <lrintf>
 8003914:	4603      	mov	r3, r0
 8003916:	b21a      	sxth	r2, r3
 8003918:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <imuUpdateEulerAngles+0xd0>)
 800391a:	801a      	strh	r2, [r3, #0]
    attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PIf));
 800391c:	4b23      	ldr	r3, [pc, #140]	; (80039ac <imuUpdateEulerAngles+0xc8>)
 800391e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003922:	eef1 7a67 	vneg.f32	s15, s15
 8003926:	eeb0 0a67 	vmov.f32	s0, s15
 800392a:	f7fd fe27 	bl	800157c <acos_approx>
 800392e:	eef0 7a40 	vmov.f32	s15, s0
 8003932:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80039b8 <imuUpdateEulerAngles+0xd4>
 8003936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800393a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80039b0 <imuUpdateEulerAngles+0xcc>
 800393e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003942:	eeb0 0a67 	vmov.f32	s0, s15
 8003946:	f00d fe19 	bl	801157c <lrintf>
 800394a:	4603      	mov	r3, r0
 800394c:	b21a      	sxth	r2, r3
 800394e:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <imuUpdateEulerAngles+0xd0>)
 8003950:	805a      	strh	r2, [r3, #2]
    attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 8003952:	4b16      	ldr	r3, [pc, #88]	; (80039ac <imuUpdateEulerAngles+0xc8>)
 8003954:	edd3 7a03 	vldr	s15, [r3, #12]
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <imuUpdateEulerAngles+0xc8>)
 800395a:	ed93 7a00 	vldr	s14, [r3]
 800395e:	eef0 0a47 	vmov.f32	s1, s14
 8003962:	eeb0 0a67 	vmov.f32	s0, s15
 8003966:	f7fd fe5d 	bl	8001624 <atan2_approx>
 800396a:	eef0 7a40 	vmov.f32	s15, s0
 800396e:	eef1 7a67 	vneg.f32	s15, s15
 8003972:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80039b0 <imuUpdateEulerAngles+0xcc>
 8003976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800397a:	eeb0 0a67 	vmov.f32	s0, s15
 800397e:	f00d fdfd 	bl	801157c <lrintf>
 8003982:	4603      	mov	r3, r0
 8003984:	b21a      	sxth	r2, r3
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <imuUpdateEulerAngles+0xd0>)
 8003988:	809a      	strh	r2, [r3, #4]

    if (attitude.values.yaw < 0) {
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <imuUpdateEulerAngles+0xd0>)
 800398c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	da09      	bge.n	80039a8 <imuUpdateEulerAngles+0xc4>
        attitude.values.yaw += 3600;
 8003994:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <imuUpdateEulerAngles+0xd0>)
 8003996:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	b21a      	sxth	r2, r3
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <imuUpdateEulerAngles+0xd0>)
 80039a6:	809a      	strh	r2, [r3, #4]
    }
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000920 	.word	0x20000920
 80039b0:	440f3d4c 	.word	0x440f3d4c
 80039b4:	20000910 	.word	0x20000910
 80039b8:	3fc90fdb 	.word	0x3fc90fdb

080039bc <imuCalcKpGain>:

static float imuCalcKpGain(timeUs_t currentTimeUs, bool useAcc, float *gyroAverage)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	460b      	mov	r3, r1
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	72fb      	strb	r3, [r7, #11]
    static bool lastArmState = false;
    static timeUs_t gyroQuietPeriodTimeEnd = 0;
    static timeUs_t attitudeResetTimeEnd = 0;
    static bool attitudeResetCompleted = false;
    float ret;
    bool attitudeResetActive = false;
 80039ca:	2300      	movs	r3, #0
 80039cc:	74fb      	strb	r3, [r7, #19]

    const bool armState = false;
 80039ce:	2300      	movs	r3, #0
 80039d0:	74bb      	strb	r3, [r7, #18]

    if (!armState) {
 80039d2:	7cbb      	ldrb	r3, [r7, #18]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d163      	bne.n	8003aa0 <imuCalcKpGain+0xe4>
        }

        // If gyro activity exceeds the threshold then restart the quiet period.
        // Also, if the attitude reset has been complete and there is subsequent gyro activity then
        // start the reset cycle again. This addresses the case where the pilot rights the craft after a crash.
        if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 80039d8:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <imuCalcKpGain+0x128>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d107      	bne.n	80039f0 <imuCalcKpGain+0x34>
 80039e0:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <imuCalcKpGain+0x12c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <imuCalcKpGain+0x34>
 80039e8:	4b40      	ldr	r3, [pc, #256]	; (8003aec <imuCalcKpGain+0x130>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d030      	beq.n	8003a52 <imuCalcKpGain+0x96>
            if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	edd3 7a00 	vldr	s15, [r3]
 80039f6:	eef0 7ae7 	vabs.f32	s15, s15
 80039fa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80039fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a06:	dc1c      	bgt.n	8003a42 <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	eef0 7ae7 	vabs.f32	s15, s15
 8003a14:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a20:	dc0f      	bgt.n	8003a42 <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3308      	adds	r3, #8
 8003a26:	edd3 7a00 	vldr	s15, [r3]
 8003a2a:	eef0 7ae7 	vabs.f32	s15, s15
 8003a2e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3a:	dc02      	bgt.n	8003a42 <imuCalcKpGain+0x86>
                || (!useAcc)) {
 8003a3c:	7afb      	ldrb	r3, [r7, #11]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d107      	bne.n	8003a52 <imuCalcKpGain+0x96>

                gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <imuCalcKpGain+0x134>)
 8003a46:	4413      	add	r3, r2
 8003a48:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <imuCalcKpGain+0x12c>)
 8003a4a:	6013      	str	r3, [r2, #0]
                attitudeResetTimeEnd = 0;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <imuCalcKpGain+0x128>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
            }
        }
        if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <imuCalcKpGain+0x128>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d011      	beq.n	8003a7e <imuCalcKpGain+0xc2>
            if (currentTimeUs >= attitudeResetTimeEnd) {
 8003a5a:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <imuCalcKpGain+0x128>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d309      	bcc.n	8003a78 <imuCalcKpGain+0xbc>
                gyroQuietPeriodTimeEnd = 0;
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <imuCalcKpGain+0x12c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
                attitudeResetTimeEnd = 0;
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <imuCalcKpGain+0x128>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
                attitudeResetCompleted = true;
 8003a70:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <imuCalcKpGain+0x130>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e013      	b.n	8003aa0 <imuCalcKpGain+0xe4>
            } else {
                attitudeResetActive = true;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	74fb      	strb	r3, [r7, #19]
 8003a7c:	e010      	b.n	8003aa0 <imuCalcKpGain+0xe4>
            }
        } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 8003a7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <imuCalcKpGain+0x12c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00c      	beq.n	8003aa0 <imuCalcKpGain+0xe4>
 8003a86:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <imuCalcKpGain+0x12c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d307      	bcc.n	8003aa0 <imuCalcKpGain+0xe4>
            // Start the high gain period to bring the estimation into convergence
            attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <imuCalcKpGain+0x138>)
 8003a94:	4413      	add	r3, r2
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <imuCalcKpGain+0x128>)
 8003a98:	6013      	str	r3, [r2, #0]
            gyroQuietPeriodTimeEnd = 0;
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <imuCalcKpGain+0x12c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
        }
    }
    lastArmState = armState;
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <imuCalcKpGain+0x13c>)
 8003aa2:	7cbb      	ldrb	r3, [r7, #18]
 8003aa4:	7013      	strb	r3, [r2, #0]

    if (attitudeResetActive) {
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <imuCalcKpGain+0xf6>
        ret = ATTITUDE_RESET_KP_GAIN;
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <imuCalcKpGain+0x140>)
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e00d      	b.n	8003ace <imuCalcKpGain+0x112>
    } else {
       ret = imuRuntimeConfig.dcm_kp;
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <imuCalcKpGain+0x144>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	617b      	str	r3, [r7, #20]
       if (!armState) {
 8003ab8:	7cbb      	ldrb	r3, [r7, #18]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <imuCalcKpGain+0x112>
          ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 8003abe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ac2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aca:	edc7 7a05 	vstr	s15, [r7, #20]
       }
    }

    return ret;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	ee07 3a90 	vmov	s15, r3
}
 8003ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000970 	.word	0x20000970
 8003ae8:	20000974 	.word	0x20000974
 8003aec:	20000978 	.word	0x20000978
 8003af0:	0003d090 	.word	0x0003d090
 8003af4:	0007a120 	.word	0x0007a120
 8003af8:	2000096c 	.word	0x2000096c
 8003afc:	41c80000 	.word	0x41c80000
 8003b00:	20000918 	.word	0x20000918

08003b04 <imuCalculateEstimatedAttitude>:

void imuCalculateEstimatedAttitude()
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	ed2d 8b08 	vpush	{d8-d11}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
    static timeUs_t previousIMUUpdateTime;
    bool useAcc = false;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	77fb      	strb	r3, [r7, #31]
    bool useMag = false;
 8003b12:	2300      	movs	r3, #0
 8003b14:	77bb      	strb	r3, [r7, #30]
    bool useCOG = true; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground course
 8003b16:	2301      	movs	r3, #1
 8003b18:	777b      	strb	r3, [r7, #29]
    float courseOverGround = DECIDEGREES_TO_RADIANS(65535); // worst case
 8003b1a:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <imuCalculateEstimatedAttitude+0xec>)
 8003b1c:	61bb      	str	r3, [r7, #24]

    const timeDelta_t deltaT = 10000;
 8003b1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b22:	617b      	str	r3, [r7, #20]
    timeUs_t currentTimeUs = previousIMUUpdateTime + deltaT;
 8003b24:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <imuCalculateEstimatedAttitude+0xf0>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
    previousIMUUpdateTime = currentTimeUs;
 8003b2e:	4a31      	ldr	r2, [pc, #196]	; (8003bf4 <imuCalculateEstimatedAttitude+0xf0>)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6013      	str	r3, [r2, #0]

    useMag = true;
 8003b34:	2301      	movs	r3, #1
 8003b36:	77bb      	strb	r3, [r7, #30]

    float gyroAverage[XYZ_AXIS_COUNT];
    gyroGetAccumulationAverage(gyroAverage);
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff f83e 	bl	8002bbc <gyroGetAccumulationAverage>

    if (accGetAccumulationAverage(accAverage)) {
 8003b40:	482d      	ldr	r0, [pc, #180]	; (8003bf8 <imuCalculateEstimatedAttitude+0xf4>)
 8003b42:	f7fc feef 	bl	8000924 <accGetAccumulationAverage>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <imuCalculateEstimatedAttitude+0x52>
        useAcc = imuIsAccelerometerHealthy(accAverage);
 8003b4c:	482a      	ldr	r0, [pc, #168]	; (8003bf8 <imuCalculateEstimatedAttitude+0xf4>)
 8003b4e:	f7ff fad9 	bl	8003104 <imuIsAccelerometerHealthy>
 8003b52:	4603      	mov	r3, r0
 8003b54:	77fb      	strb	r3, [r7, #31]
    }

    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	ee07 3a90 	vmov	s15, r3
 8003b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b60:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003bfc <imuCalculateEstimatedAttitude+0xf8>
 8003b64:	ee27 8a87 	vmul.f32	s16, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003b68:	edd7 7a01 	vldr	s15, [r7, #4]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003b6c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003c00 <imuCalculateEstimatedAttitude+0xfc>
 8003b70:	ee67 8a87 	vmul.f32	s17, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003b74:	edd7 7a02 	vldr	s15, [r7, #8]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003b78:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003c00 <imuCalculateEstimatedAttitude+0xfc>
 8003b7c:	ee27 9a87 	vmul.f32	s18, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003b80:	edd7 7a03 	vldr	s15, [r7, #12]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003b84:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003c00 <imuCalculateEstimatedAttitude+0xfc>
 8003b88:	ee67 9a87 	vmul.f32	s19, s15, s14
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <imuCalculateEstimatedAttitude+0xf4>)
 8003b8e:	ed93 aa00 	vldr	s20, [r3]
 8003b92:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <imuCalculateEstimatedAttitude+0xf4>)
 8003b94:	edd3 aa01 	vldr	s21, [r3, #4]
 8003b98:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <imuCalculateEstimatedAttitude+0xf4>)
 8003b9a:	ed93 ba02 	vldr	s22, [r3, #8]
 8003b9e:	1d3a      	adds	r2, r7, #4
 8003ba0:	7ffb      	ldrb	r3, [r7, #31]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6938      	ldr	r0, [r7, #16]
 8003ba6:	f7ff ff09 	bl	80039bc <imuCalcKpGain>
 8003baa:	eef0 7a40 	vmov.f32	s15, s0
 8003bae:	7f7a      	ldrb	r2, [r7, #29]
 8003bb0:	7fb9      	ldrb	r1, [r7, #30]
 8003bb2:	7ffb      	ldrb	r3, [r7, #31]
 8003bb4:	eeb0 4a67 	vmov.f32	s8, s15
 8003bb8:	edd7 3a06 	vldr	s7, [r7, #24]
 8003bbc:	eeb0 3a4b 	vmov.f32	s6, s22
 8003bc0:	eef0 2a6a 	vmov.f32	s5, s21
 8003bc4:	eeb0 2a4a 	vmov.f32	s4, s20
 8003bc8:	4618      	mov	r0, r3
 8003bca:	eef0 1a69 	vmov.f32	s3, s19
 8003bce:	eeb0 1a49 	vmov.f32	s2, s18
 8003bd2:	eef0 0a68 	vmov.f32	s1, s17
 8003bd6:	eeb0 0a48 	vmov.f32	s0, s16
 8003bda:	f7ff faf9 	bl	80031d0 <imuMahonyAHRSupdate>
                        useAcc, accAverage[X], accAverage[Y], accAverage[Z],
                        useMag,
                        useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage));

    imuUpdateEulerAngles();
 8003bde:	f7ff fe81 	bl	80038e4 <imuUpdateEulerAngles>
}
 8003be2:	bf00      	nop
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	ecbd 8b08 	vpop	{d8-d11}
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	42e4c2a3 	.word	0x42e4c2a3
 8003bf4:	2000097c 	.word	0x2000097c
 8003bf8:	20000944 	.word	0x20000944
 8003bfc:	358637bd 	.word	0x358637bd
 8003c00:	3c8efa35 	.word	0x3c8efa35

08003c04 <calculateThrottleAngleCorrection>:

static int calculateThrottleAngleCorrection(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	ed2d 8b02 	vpush	{d8}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
    /*
    * Use 0 as the throttle angle correction if we are inverted, vertical or with a
    * small angle < 0.86 deg
    * TODO: Define this small angle in config.
    */
    if (getCosTiltAngle() <= 0.015f) {
 8003c0e:	f7ff f8d1 	bl	8002db4 <getCosTiltAngle>
 8003c12:	eef0 7a40 	vmov.f32	s15, s0
 8003c16:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003ca4 <calculateThrottleAngleCorrection+0xa0>
 8003c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	d801      	bhi.n	8003c28 <calculateThrottleAngleCorrection+0x24>
        return 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e036      	b.n	8003c96 <calculateThrottleAngleCorrection+0x92>
    }
    int angle = lrintf(acos_approx(getCosTiltAngle()) * throttleAngleScale);
 8003c28:	f7ff f8c4 	bl	8002db4 <getCosTiltAngle>
 8003c2c:	eef0 7a40 	vmov.f32	s15, s0
 8003c30:	eeb0 0a67 	vmov.f32	s0, s15
 8003c34:	f7fd fca2 	bl	800157c <acos_approx>
 8003c38:	eeb0 7a40 	vmov.f32	s14, s0
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <calculateThrottleAngleCorrection+0xa4>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4a:	f00d fc97 	bl	801157c <lrintf>
 8003c4e:	6078      	str	r0, [r7, #4]
    if (angle > 900)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003c56:	dd02      	ble.n	8003c5e <calculateThrottleAngleCorrection+0x5a>
        angle = 900;
 8003c58:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003c5c:	607b      	str	r3, [r7, #4]
    return lrintf(throttleAngleValue * sin_approx(angle / (900.0f * M_PIf / 2.0f)));
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <calculateThrottleAngleCorrection+0xa8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c74:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003cb0 <calculateThrottleAngleCorrection+0xac>
 8003c78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c7c:	eeb0 0a47 	vmov.f32	s0, s14
 8003c80:	f7fd fbba 	bl	80013f8 <sin_approx>
 8003c84:	eef0 7a40 	vmov.f32	s15, s0
 8003c88:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c90:	f00d fc74 	bl	801157c <lrintf>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	ecbd 8b02 	vpop	{d8}
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	3c75c28f 	.word	0x3c75c28f
 8003ca8:	20000950 	.word	0x20000950
 8003cac:	20000954 	.word	0x20000954
 8003cb0:	44b0b6ef 	.word	0x44b0b6ef

08003cb4 <mixerSetThrottleAngleCorrection>:

static void mixerSetThrottleAngleCorrection(int correctionValue) { }
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <imuCalculateThrottleAngleCorrection>:

void imuCalculateThrottleAngleCorrection(void) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
	// Update the throttle correction for angle and supply it to the mixer
	int throttleAngleCorrection = calculateThrottleAngleCorrection();
 8003cce:	f7ff ff99 	bl	8003c04 <calculateThrottleAngleCorrection>
 8003cd2:	6078      	str	r0, [r7, #4]
	mixerSetThrottleAngleCorrection(throttleAngleCorrection);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ffed 	bl	8003cb4 <mixerSetThrottleAngleCorrection>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <lps22hb_platform_write>:
#include "bin_semaphores.h"
float pressure;
stmdev_ctx_t lps22hb_dev_ctx;

int32_t lps22hb_platform_write(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af04      	add	r7, sp, #16
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	72fb      	strb	r3, [r7, #11]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <lps22hb_platform_write+0x44>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10d      	bne.n	8003d1c <lps22hb_platform_write+0x38>
		/* Write multiple command */
		HAL_I2C_Mem_Write(handle, LPS22HB_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT,
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2301      	movs	r3, #1
 8003d14:	21bb      	movs	r1, #187	; 0xbb
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f004 f89c 	bl	8007e54 <HAL_I2C_Mem_Write>
				bufp, len, 1000);
	}
	return 0;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200008bc 	.word	0x200008bc

08003d2c <lps22hb_platform_read>:

int32_t lps22hb_platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af04      	add	r7, sp, #16
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	461a      	mov	r2, r3
 8003d38:	460b      	mov	r3, r1
 8003d3a:	72fb      	strb	r3, [r7, #11]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <lps22hb_platform_read+0x44>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10d      	bne.n	8003d64 <lps22hb_platform_read+0x38>
		/* Read multiple command */
		HAL_I2C_Mem_Read(handle, LPS22HB_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp,
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d50:	9302      	str	r3, [sp, #8]
 8003d52:	893b      	ldrh	r3, [r7, #8]
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	21bb      	movs	r1, #187	; 0xbb
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f004 f98c 	bl	800807c <HAL_I2C_Mem_Read>
				len, 1000);
	}
	return 0;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200008bc 	.word	0x200008bc

08003d74 <LPS22HB_init>:

void LPS22HB_init() {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
	uint8_t id, rst = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	71bb      	strb	r3, [r7, #6]

	lps22hb_dev_ctx.write_reg = lps22hb_platform_write;
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <LPS22HB_init+0x60>)
 8003d80:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <LPS22HB_init+0x64>)
 8003d82:	601a      	str	r2, [r3, #0]
	lps22hb_dev_ctx.read_reg = lps22hb_platform_read;
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <LPS22HB_init+0x60>)
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <LPS22HB_init+0x68>)
 8003d88:	605a      	str	r2, [r3, #4]
	lps22hb_dev_ctx.handle = &hi2c1;
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <LPS22HB_init+0x60>)
 8003d8c:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <LPS22HB_init+0x6c>)
 8003d8e:	60da      	str	r2, [r3, #12]

	// Poll device
	while (id != LPS22HB_ID) {
 8003d90:	e004      	b.n	8003d9c <LPS22HB_init+0x28>
		lps22hb_device_id_get(&lps22hb_dev_ctx, &id);
 8003d92:	1dfb      	adds	r3, r7, #7
 8003d94:	4619      	mov	r1, r3
 8003d96:	480f      	ldr	r0, [pc, #60]	; (8003dd4 <LPS22HB_init+0x60>)
 8003d98:	f000 f92c 	bl	8003ff4 <lps22hb_device_id_get>
	while (id != LPS22HB_ID) {
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2bb1      	cmp	r3, #177	; 0xb1
 8003da0:	d1f7      	bne.n	8003d92 <LPS22HB_init+0x1e>
	}

	// Restore default configuration
	lps22hb_reset_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);
 8003da2:	2101      	movs	r1, #1
 8003da4:	480b      	ldr	r0, [pc, #44]	; (8003dd4 <LPS22HB_init+0x60>)
 8003da6:	f000 f936 	bl	8004016 <lps22hb_reset_set>
	do {
		lps22hb_reset_get(&lps22hb_dev_ctx, &rst);
 8003daa:	1dbb      	adds	r3, r7, #6
 8003dac:	4619      	mov	r1, r3
 8003dae:	4809      	ldr	r0, [pc, #36]	; (8003dd4 <LPS22HB_init+0x60>)
 8003db0:	f000 f957 	bl	8004062 <lps22hb_reset_get>
	} while (rst);
 8003db4:	79bb      	ldrb	r3, [r7, #6]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f7      	bne.n	8003daa <LPS22HB_init+0x36>

	// Enable Block Data Update
	//lps22hb_block_data_update_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);

	// Enable low pass filter on output
	lps22hb_low_pass_filter_mode_set(&lps22hb_dev_ctx, LPS22HB_LPF_ODR_DIV_2);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <LPS22HB_init+0x60>)
 8003dbe:	f000 f88b 	bl	8003ed8 <lps22hb_low_pass_filter_mode_set>

	// Set Data-ready signal on INT_DRDY pin
	//lps22hb_drdy_on_int_set(&lps22hb_dev_ctx, PROPERTY_ENABLE);

	// Set Output Data Rate
	lps22hb_data_rate_set(&lps22hb_dev_ctx, LPS22HB_ODR_10_Hz);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4803      	ldr	r0, [pc, #12]	; (8003dd4 <LPS22HB_init+0x60>)
 8003dc6:	f000 f8ad 	bl	8003f24 <lps22hb_data_rate_set>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000984 	.word	0x20000984
 8003dd8:	08003ce5 	.word	0x08003ce5
 8003ddc:	08003d2d 	.word	0x08003d2d
 8003de0:	200008bc 	.word	0x200008bc

08003de4 <LPS22HB_dataRead>:

void LPS22HB_dataRead() {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
	uint8_t reg;
	uint32_t temp; //variabile temporanea

	/* Read output only if new value is available */
	lps22hb_press_data_ready_get(&lps22hb_dev_ctx, &reg);
 8003dea:	1dfb      	adds	r3, r7, #7
 8003dec:	4619      	mov	r1, r3
 8003dee:	4813      	ldr	r0, [pc, #76]	; (8003e3c <LPS22HB_dataRead+0x58>)
 8003df0:	f000 f8be 	bl	8003f70 <lps22hb_press_data_ready_get>
	if (reg) {
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01b      	beq.n	8003e32 <LPS22HB_dataRead+0x4e>
		//memset(lps22hb_data.raw.u8bit, 0x00, sizeof(int32_t));
		lps22hb_pressure_raw_get(&lps22hb_dev_ctx, &temp);
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	480f      	ldr	r0, [pc, #60]	; (8003e3c <LPS22HB_dataRead+0x58>)
 8003e00:	f000 f8cf 	bl	8003fa2 <lps22hb_pressure_raw_get>
		if(osSemaphoreAcquire(binSemaphorePresHandle, 0)==osOK){
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <LPS22HB_dataRead+0x5c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f007 fc76 	bl	800b6fc <osSemaphoreAcquire>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <LPS22HB_dataRead+0x4e>
			pressure = lps22hb_from_lsb_to_hpa(temp);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f845 	bl	8003ea8 <lps22hb_from_lsb_to_hpa>
 8003e1e:	eef0 7a40 	vmov.f32	s15, s0
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <LPS22HB_dataRead+0x60>)
 8003e24:	edc3 7a00 	vstr	s15, [r3]
			osSemaphoreRelease(binSemaphorePresHandle);
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <LPS22HB_dataRead+0x5c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f007 fccb 	bl	800b7c8 <osSemaphoreRelease>
		}
	}
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000984 	.word	0x20000984
 8003e40:	200004f4 	.word	0x200004f4
 8003e44:	20000980 	.word	0x20000980

08003e48 <lps22hb_read_reg>:
  *
  */
int32_t __weak lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	461a      	mov	r2, r3
 8003e54:	460b      	mov	r3, r1
 8003e56:	72fb      	strb	r3, [r7, #11]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685c      	ldr	r4, [r3, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68d8      	ldr	r0, [r3, #12]
 8003e64:	893b      	ldrh	r3, [r7, #8]
 8003e66:	7af9      	ldrb	r1, [r7, #11]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	47a0      	blx	r4
 8003e6c:	6178      	str	r0, [r7, #20]

  return ret;
 8003e6e:	697b      	ldr	r3, [r7, #20]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd90      	pop	{r4, r7, pc}

08003e78 <lps22hb_write_reg>:
  *
  */
int32_t __weak lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	461a      	mov	r2, r3
 8003e84:	460b      	mov	r3, r1
 8003e86:	72fb      	strb	r3, [r7, #11]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	68d8      	ldr	r0, [r3, #12]
 8003e94:	893b      	ldrh	r3, [r7, #8]
 8003e96:	7af9      	ldrb	r1, [r7, #11]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	47a0      	blx	r4
 8003e9c:	6178      	str	r0, [r7, #20]

  return ret;
 8003e9e:	697b      	ldr	r3, [r7, #20]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd90      	pop	{r4, r7, pc}

08003ea8 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003ed4 <lps22hb_from_lsb_to_hpa+0x2c>
 8003ebe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ec2:	eef0 7a66 	vmov.f32	s15, s13
}
 8003ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	49800000 	.word	0x49800000

08003ed8 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003ee4:	f107 0208 	add.w	r2, r7, #8
 8003ee8:	2301      	movs	r3, #1
 8003eea:	2110      	movs	r1, #16
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ffab 	bl	8003e48 <lps22hb_read_reg>
 8003ef2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	7a3b      	ldrb	r3, [r7, #8]
 8003f04:	f362 0383 	bfi	r3, r2, #2, #2
 8003f08:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003f0a:	f107 0208 	add.w	r2, r7, #8
 8003f0e:	2301      	movs	r3, #1
 8003f10:	2110      	movs	r1, #16
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff ffb0 	bl	8003e78 <lps22hb_write_reg>
 8003f18:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003f30:	f107 0208 	add.w	r2, r7, #8
 8003f34:	2301      	movs	r3, #1
 8003f36:	2110      	movs	r1, #16
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff85 	bl	8003e48 <lps22hb_read_reg>
 8003f3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	7a3b      	ldrb	r3, [r7, #8]
 8003f50:	f362 1306 	bfi	r3, r2, #4, #3
 8003f54:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003f56:	f107 0208 	add.w	r2, r7, #8
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	2110      	movs	r1, #16
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff8a 	bl	8003e78 <lps22hb_write_reg>
 8003f64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f66:	68fb      	ldr	r3, [r7, #12]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <lps22hb_press_data_ready_get>:
  * @param  val    Change the values of p_da in reg STATUS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_press_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  lps22hb_status_t status;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t *)&status, 1);
 8003f7a:	f107 0208 	add.w	r2, r7, #8
 8003f7e:	2301      	movs	r3, #1
 8003f80:	2127      	movs	r1, #39	; 0x27
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff60 	bl	8003e48 <lps22hb_read_reg>
 8003f88:	60f8      	str	r0, [r7, #12]
  *val = status.p_da;
 8003f8a:	7a3b      	ldrb	r3, [r7, #8]
 8003f8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	701a      	strb	r2, [r3, #0]

  return ret;
 8003f98:	68fb      	ldr	r3, [r7, #12]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8003fac:	f107 0208 	add.w	r2, r7, #8
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	2128      	movs	r1, #40	; 0x28
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff47 	bl	8003e48 <lps22hb_read_reg>
 8003fba:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8003fbc:	7abb      	ldrb	r3, [r7, #10]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	7a7a      	ldrb	r2, [r7, #9]
 8003fcc:	441a      	add	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	7a3a      	ldrb	r2, [r7, #8]
 8003fda:	441a      	add	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	021a      	lsls	r2, r3, #8
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	601a      	str	r2, [r3, #0]

  return ret;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8003ffe:	2301      	movs	r3, #1
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	210f      	movs	r1, #15
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff1f 	bl	8003e48 <lps22hb_read_reg>
 800400a:	60f8      	str	r0, [r7, #12]

  return ret;
 800400c:	68fb      	ldr	r3, [r7, #12]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <lps22hb_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004022:	f107 0208 	add.w	r2, r7, #8
 8004026:	2301      	movs	r3, #1
 8004028:	2111      	movs	r1, #17
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff0c 	bl	8003e48 <lps22hb_read_reg>
 8004030:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10f      	bne.n	8004058 <lps22hb_reset_set+0x42>
  {
    ctrl_reg2.swreset = val;
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	7a3b      	ldrb	r3, [r7, #8]
 8004042:	f362 0382 	bfi	r3, r2, #2, #1
 8004046:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004048:	f107 0208 	add.w	r2, r7, #8
 800404c:	2301      	movs	r3, #1
 800404e:	2111      	movs	r1, #17
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff11 	bl	8003e78 <lps22hb_write_reg>
 8004056:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004058:	68fb      	ldr	r3, [r7, #12]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <lps22hb_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800406c:	f107 0208 	add.w	r2, r7, #8
 8004070:	2301      	movs	r3, #1
 8004072:	2111      	movs	r1, #17
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fee7 	bl	8003e48 <lps22hb_read_reg>
 800407a:	60f8      	str	r0, [r7, #12]
  *val = ctrl_reg2.swreset;
 800407c:	7a3b      	ldrb	r3, [r7, #8]
 800407e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	701a      	strb	r2, [r3, #0]

  return ret;
 800408a:	68fb      	ldr	r3, [r7, #12]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <lsm303agr_platform_write>:
stmdev_ctx_t lsm303agr_dev_ctx_mg;
lsm303agr_data magnetometer;
lsm303agr_data accellerometer1;

int32_t lsm303agr_platform_write(void *handle, uint8_t Reg,
		uint8_t *Bufp, uint16_t len) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af04      	add	r7, sp, #16
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	461a      	mov	r2, r3
 80040a0:	460b      	mov	r3, r1
 80040a2:	72fb      	strb	r3, [r7, #11]
 80040a4:	4613      	mov	r3, r2
 80040a6:	813b      	strh	r3, [r7, #8]
	uint32_t i2c_add = (uint32_t) handle;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	617b      	str	r3, [r7, #20]
	if (i2c_add == LSM303AGR_I2C_ADD_XL) {
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b33      	cmp	r3, #51	; 0x33
 80040b0:	d103      	bne.n	80040ba <lsm303agr_platform_write+0x26>
		/* enable auto incremented in multiple read/write commands */
		Reg |= 0x80;
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040b8:	72fb      	strb	r3, [r7, #11]
	}
	HAL_I2C_Mem_Write(&hi2c1, i2c_add, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len,
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	b299      	uxth	r1, r3
 80040be:	7afb      	ldrb	r3, [r7, #11]
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c6:	9302      	str	r3, [sp, #8]
 80040c8:	893b      	ldrh	r3, [r7, #8]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	2301      	movs	r3, #1
 80040d2:	4804      	ldr	r0, [pc, #16]	; (80040e4 <lsm303agr_platform_write+0x50>)
 80040d4:	f003 febe 	bl	8007e54 <HAL_I2C_Mem_Write>
			1000);
	return 0;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200008bc 	.word	0x200008bc

080040e8 <lsm303agr_platform_read>:

int32_t lsm303agr_platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af04      	add	r7, sp, #16
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	461a      	mov	r2, r3
 80040f4:	460b      	mov	r3, r1
 80040f6:	72fb      	strb	r3, [r7, #11]
 80040f8:	4613      	mov	r3, r2
 80040fa:	813b      	strh	r3, [r7, #8]
	uint32_t i2c_add = (uint32_t) handle;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	617b      	str	r3, [r7, #20]
	if (i2c_add == LSM303AGR_I2C_ADD_XL) {
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b33      	cmp	r3, #51	; 0x33
 8004104:	d103      	bne.n	800410e <lsm303agr_platform_read+0x26>
		/* enable auto incremented in multiple read/write commands */
		Reg |= 0x80;
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800410c:	72fb      	strb	r3, [r7, #11]
	}
	HAL_I2C_Mem_Read(&hi2c1, (uint8_t) i2c_add, Reg, I2C_MEMADD_SIZE_8BIT, Bufp,
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	b299      	uxth	r1, r3
 8004114:	7afb      	ldrb	r3, [r7, #11]
 8004116:	b29a      	uxth	r2, r3
 8004118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800411c:	9302      	str	r3, [sp, #8]
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2301      	movs	r3, #1
 8004128:	4803      	ldr	r0, [pc, #12]	; (8004138 <lsm303agr_platform_read+0x50>)
 800412a:	f003 ffa7 	bl	800807c <HAL_I2C_Mem_Read>
			len, 1000);
	return 0;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	200008bc 	.word	0x200008bc

0800413c <LSM303AGR_init>:

void LSM303AGR_init() {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
	uint8_t id, rst = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	71bb      	strb	r3, [r7, #6]

	// Accelerometro
	lsm303agr_dev_ctx_xl.write_reg = lsm303agr_platform_write;
 8004146:	4b30      	ldr	r3, [pc, #192]	; (8004208 <LSM303AGR_init+0xcc>)
 8004148:	4a30      	ldr	r2, [pc, #192]	; (800420c <LSM303AGR_init+0xd0>)
 800414a:	601a      	str	r2, [r3, #0]
	lsm303agr_dev_ctx_xl.read_reg = lsm303agr_platform_read;
 800414c:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <LSM303AGR_init+0xcc>)
 800414e:	4a30      	ldr	r2, [pc, #192]	; (8004210 <LSM303AGR_init+0xd4>)
 8004150:	605a      	str	r2, [r3, #4]
	lsm303agr_dev_ctx_xl.handle = (void*) LSM303AGR_I2C_ADD_XL;
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <LSM303AGR_init+0xcc>)
 8004154:	2233      	movs	r2, #51	; 0x33
 8004156:	60da      	str	r2, [r3, #12]

	// Poll device
	while (id != LSM303AGR_ID_XL) {
 8004158:	e004      	b.n	8004164 <LSM303AGR_init+0x28>
		lsm303agr_xl_device_id_get(&lsm303agr_dev_ctx_xl, &id);
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	4619      	mov	r1, r3
 800415e:	482a      	ldr	r0, [pc, #168]	; (8004208 <LSM303AGR_init+0xcc>)
 8004160:	f000 fba4 	bl	80048ac <lsm303agr_xl_device_id_get>
	while (id != LSM303AGR_ID_XL) {
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	2b33      	cmp	r3, #51	; 0x33
 8004168:	d1f7      	bne.n	800415a <LSM303AGR_init+0x1e>
	}

	/* Enable Block Data Update */
	lsm303agr_xl_block_data_update_set(&lsm303agr_dev_ctx_xl, PROPERTY_ENABLE);
 800416a:	2101      	movs	r1, #1
 800416c:	4826      	ldr	r0, [pc, #152]	; (8004208 <LSM303AGR_init+0xcc>)
 800416e:	f000 fa23 	bl	80045b8 <lsm303agr_xl_block_data_update_set>

	/* Set Output Data Rate */
	lsm303agr_xl_data_rate_set(&lsm303agr_dev_ctx_xl, LSM303AGR_XL_ODR_1Hz);
 8004172:	2101      	movs	r1, #1
 8004174:	4824      	ldr	r0, [pc, #144]	; (8004208 <LSM303AGR_init+0xcc>)
 8004176:	f000 f9d3 	bl	8004520 <lsm303agr_xl_data_rate_set>

	/* Set accelerometer full scale */
	lsm303agr_xl_full_scale_set(&lsm303agr_dev_ctx_xl, LSM303AGR_2g);
 800417a:	2100      	movs	r1, #0
 800417c:	4822      	ldr	r0, [pc, #136]	; (8004208 <LSM303AGR_init+0xcc>)
 800417e:	f000 f9f5 	bl	800456c <lsm303agr_xl_full_scale_set>

	/* Enable temperature sensor */
	lsm303agr_temperature_meas_set(&lsm303agr_dev_ctx_xl, LSM303AGR_TEMP_ENABLE);
 8004182:	2103      	movs	r1, #3
 8004184:	4820      	ldr	r0, [pc, #128]	; (8004208 <LSM303AGR_init+0xcc>)
 8004186:	f000 f94d 	bl	8004424 <lsm303agr_temperature_meas_set>
	/* Set device in continuos mode */
	lsm303agr_xl_operating_mode_set(&lsm303agr_dev_ctx_xl, LSM303AGR_HR_12bit);
 800418a:	2100      	movs	r1, #0
 800418c:	481e      	ldr	r0, [pc, #120]	; (8004208 <LSM303AGR_init+0xcc>)
 800418e:	f000 f96f 	bl	8004470 <lsm303agr_xl_operating_mode_set>

	// Magnetometro
	id = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	71fb      	strb	r3, [r7, #7]
	rst = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	71bb      	strb	r3, [r7, #6]

	lsm303agr_dev_ctx_mg.write_reg = lsm303agr_platform_write;
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <LSM303AGR_init+0xd8>)
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <LSM303AGR_init+0xd0>)
 800419e:	601a      	str	r2, [r3, #0]
	lsm303agr_dev_ctx_mg.read_reg = lsm303agr_platform_read;
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <LSM303AGR_init+0xd8>)
 80041a2:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <LSM303AGR_init+0xd4>)
 80041a4:	605a      	str	r2, [r3, #4]
	lsm303agr_dev_ctx_mg.handle = (void*) LSM303AGR_I2C_ADD_MG;
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <LSM303AGR_init+0xd8>)
 80041a8:	223d      	movs	r2, #61	; 0x3d
 80041aa:	60da      	str	r2, [r3, #12]

	// Poll device
	while (id != LSM303AGR_ID_MG) {
 80041ac:	e004      	b.n	80041b8 <LSM303AGR_init+0x7c>
		lsm303agr_mag_device_id_get(&lsm303agr_dev_ctx_mg, &id);
 80041ae:	1dfb      	adds	r3, r7, #7
 80041b0:	4619      	mov	r1, r3
 80041b2:	4818      	ldr	r0, [pc, #96]	; (8004214 <LSM303AGR_init+0xd8>)
 80041b4:	f000 fb9c 	bl	80048f0 <lsm303agr_mag_device_id_get>
	while (id != LSM303AGR_ID_MG) {
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	d1f7      	bne.n	80041ae <LSM303AGR_init+0x72>
	}

	/* Restore default configuration for magnetometer */
	lsm303agr_mag_reset_set(&lsm303agr_dev_ctx_mg, PROPERTY_ENABLE);
 80041be:	2101      	movs	r1, #1
 80041c0:	4814      	ldr	r0, [pc, #80]	; (8004214 <LSM303AGR_init+0xd8>)
 80041c2:	f000 fba6 	bl	8004912 <lsm303agr_mag_reset_set>
	do {
		lsm303agr_mag_reset_get(&lsm303agr_dev_ctx_mg, &rst);
 80041c6:	1dbb      	adds	r3, r7, #6
 80041c8:	4619      	mov	r1, r3
 80041ca:	4812      	ldr	r0, [pc, #72]	; (8004214 <LSM303AGR_init+0xd8>)
 80041cc:	f000 fbc7 	bl	800495e <lsm303agr_mag_reset_get>
	} while (rst);
 80041d0:	79bb      	ldrb	r3, [r7, #6]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f7      	bne.n	80041c6 <LSM303AGR_init+0x8a>

	/* Enable Block Data Update */
	lsm303agr_mag_block_data_update_set(&lsm303agr_dev_ctx_mg, PROPERTY_ENABLE);
 80041d6:	2101      	movs	r1, #1
 80041d8:	480e      	ldr	r0, [pc, #56]	; (8004214 <LSM303AGR_init+0xd8>)
 80041da:	f000 faf6 	bl	80047ca <lsm303agr_mag_block_data_update_set>

	/* Set Output Data Rate */
	lsm303agr_mag_data_rate_set(&lsm303agr_dev_ctx_mg, LSM303AGR_MG_ODR_10Hz);
 80041de:	2100      	movs	r1, #0
 80041e0:	480c      	ldr	r0, [pc, #48]	; (8004214 <LSM303AGR_init+0xd8>)
 80041e2:	f000 fa80 	bl	80046e6 <lsm303agr_mag_data_rate_set>

	/* Set / Reset magnetic sensor mode */
	lsm303agr_mag_set_rst_mode_set(&lsm303agr_dev_ctx_mg,
 80041e6:	2101      	movs	r1, #1
 80041e8:	480a      	ldr	r0, [pc, #40]	; (8004214 <LSM303AGR_init+0xd8>)
 80041ea:	f000 fac8 	bl	800477e <lsm303agr_mag_set_rst_mode_set>
			LSM303AGR_SENS_OFF_CANC_EVERY_ODR);

	/* Enable temperature compensation on mag sensor */
	lsm303agr_mag_offset_temp_comp_set(&lsm303agr_dev_ctx_mg, PROPERTY_ENABLE);
 80041ee:	2101      	movs	r1, #1
 80041f0:	4808      	ldr	r0, [pc, #32]	; (8004214 <LSM303AGR_init+0xd8>)
 80041f2:	f000 fa9e 	bl	8004732 <lsm303agr_mag_offset_temp_comp_set>

	/* Set magnetometer in continuos mode */
	lsm303agr_mag_operating_mode_set(&lsm303agr_dev_ctx_mg,
 80041f6:	2100      	movs	r1, #0
 80041f8:	4806      	ldr	r0, [pc, #24]	; (8004214 <LSM303AGR_init+0xd8>)
 80041fa:	f000 fa4e 	bl	800469a <lsm303agr_mag_operating_mode_set>
			LSM303AGR_CONTINUOUS_MODE);
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000994 	.word	0x20000994
 800420c:	08004095 	.word	0x08004095
 8004210:	080040e9 	.word	0x080040e9
 8004214:	200009a4 	.word	0x200009a4

08004218 <LSM303AGR_dataReadAcc>:

void LSM303AGR_dataReadAcc() {
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
	/* Read output only if new value is available */
	lsm303agr_reg_t reg;
	lsm303agr_xl_status_get(&lsm303agr_dev_ctx_xl, &reg.status_reg_a);
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	4619      	mov	r1, r3
 8004224:	4825      	ldr	r0, [pc, #148]	; (80042bc <LSM303AGR_dataReadAcc+0xa4>)
 8004226:	f000 fb52 	bl	80048ce <lsm303agr_xl_status_get>
	int16_t temp[3];
	float toMS2 = 9.81;
 800422a:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <LSM303AGR_dataReadAcc+0xa8>)
 800422c:	60fb      	str	r3, [r7, #12]

	if (reg.status_reg_a.zyxda) {
 800422e:	7a3b      	ldrb	r3, [r7, #8]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d03c      	beq.n	80042b4 <LSM303AGR_dataReadAcc+0x9c>
		/* Read accelerometer data */
		//memset(lsm303agr_xl_data.raw.u8bit, 0x00, 3 * sizeof(int16_t));
		lsm303agr_acceleration_raw_get(&lsm303agr_dev_ctx_xl, temp);
 800423a:	463b      	mov	r3, r7
 800423c:	4619      	mov	r1, r3
 800423e:	481f      	ldr	r0, [pc, #124]	; (80042bc <LSM303AGR_dataReadAcc+0xa4>)
 8004240:	f000 f9e0 	bl	8004604 <lsm303agr_acceleration_raw_get>
		if(osSemaphoreAcquire(binSemaphoreAcc1Handle, 0)==osOK){
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <LSM303AGR_dataReadAcc+0xac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f007 fa56 	bl	800b6fc <osSemaphoreAcquire>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d12e      	bne.n	80042b4 <LSM303AGR_dataReadAcc+0x9c>
			accellerometer1.x = lsm303agr_from_fs_2g_hr_to_mg(temp[0])/toMS2;
 8004256:	f9b7 3000 	ldrsh.w	r3, [r7]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 f8b0 	bl	80043c0 <lsm303agr_from_fs_2g_hr_to_mg>
 8004260:	eef0 6a40 	vmov.f32	s13, s0
 8004264:	ed97 7a03 	vldr	s14, [r7, #12]
 8004268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <LSM303AGR_dataReadAcc+0xb0>)
 800426e:	edc3 7a00 	vstr	s15, [r3]
			accellerometer1.y = lsm303agr_from_fs_2g_hr_to_mg(temp[1])/toMS2;
 8004272:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f8a2 	bl	80043c0 <lsm303agr_from_fs_2g_hr_to_mg>
 800427c:	eef0 6a40 	vmov.f32	s13, s0
 8004280:	ed97 7a03 	vldr	s14, [r7, #12]
 8004284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <LSM303AGR_dataReadAcc+0xb0>)
 800428a:	edc3 7a01 	vstr	s15, [r3, #4]
			accellerometer1.z = lsm303agr_from_fs_2g_hr_to_mg(temp[2])/toMS2;
 800428e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f894 	bl	80043c0 <lsm303agr_from_fs_2g_hr_to_mg>
 8004298:	eef0 6a40 	vmov.f32	s13, s0
 800429c:	ed97 7a03 	vldr	s14, [r7, #12]
 80042a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042a4:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <LSM303AGR_dataReadAcc+0xb0>)
 80042a6:	edc3 7a02 	vstr	s15, [r3, #8]
			osSemaphoreRelease(binSemaphoreAcc1Handle);
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <LSM303AGR_dataReadAcc+0xac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f007 fa8a 	bl	800b7c8 <osSemaphoreRelease>
		}
	}
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000994 	.word	0x20000994
 80042c0:	411cf5c3 	.word	0x411cf5c3
 80042c4:	200004e4 	.word	0x200004e4
 80042c8:	200009c0 	.word	0x200009c0

080042cc <LSM303AGR_dataReadMag>:

void LSM303AGR_dataReadMag() {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
	/* Read output only if new value is available */
	lsm303agr_reg_t reg;
	int16_t temp[3]; //variabile temporanea
	lsm303agr_mag_status_get(&lsm303agr_dev_ctx_mg, &reg.status_reg_m);
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	4619      	mov	r1, r3
 80042d8:	481e      	ldr	r0, [pc, #120]	; (8004354 <LSM303AGR_dataReadMag+0x88>)
 80042da:	f000 fb59 	bl	8004990 <lsm303agr_mag_status_get>
	if (reg.status_reg_m.zyxda) {
 80042de:	7b3b      	ldrb	r3, [r7, #12]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d030      	beq.n	800434c <LSM303AGR_dataReadMag+0x80>
		/* Read magnetic field data */
		//memset(lsm303agr_mg_data.raw.u8bit, 0x00, 3 * sizeof(int16_t));
		lsm303agr_magnetic_raw_get(&lsm303agr_dev_ctx_mg, temp);
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4819      	ldr	r0, [pc, #100]	; (8004354 <LSM303AGR_dataReadMag+0x88>)
 80042f0:	f000 fa91 	bl	8004816 <lsm303agr_magnetic_raw_get>
		if(osSemaphoreAcquire(binSemaphoreMagHandle, 0)==osOK){
 80042f4:	4b18      	ldr	r3, [pc, #96]	; (8004358 <LSM303AGR_dataReadMag+0x8c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f007 f9fe 	bl	800b6fc <osSemaphoreAcquire>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d122      	bne.n	800434c <LSM303AGR_dataReadMag+0x80>
			magnetometer.x = lsm303agr_from_lsb_to_mgauss(temp[0]);
 8004306:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f874 	bl	80043f8 <lsm303agr_from_lsb_to_mgauss>
 8004310:	eef0 7a40 	vmov.f32	s15, s0
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <LSM303AGR_dataReadMag+0x90>)
 8004316:	edc3 7a00 	vstr	s15, [r3]
			magnetometer.y = lsm303agr_from_lsb_to_mgauss(temp[1]);
 800431a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f86a 	bl	80043f8 <lsm303agr_from_lsb_to_mgauss>
 8004324:	eef0 7a40 	vmov.f32	s15, s0
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <LSM303AGR_dataReadMag+0x90>)
 800432a:	edc3 7a01 	vstr	s15, [r3, #4]
			magnetometer.z = lsm303agr_from_lsb_to_mgauss(temp[2]);
 800432e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f860 	bl	80043f8 <lsm303agr_from_lsb_to_mgauss>
 8004338:	eef0 7a40 	vmov.f32	s15, s0
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <LSM303AGR_dataReadMag+0x90>)
 800433e:	edc3 7a02 	vstr	s15, [r3, #8]
			osSemaphoreRelease(binSemaphoreMagHandle);
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <LSM303AGR_dataReadMag+0x8c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f007 fa3e 	bl	800b7c8 <osSemaphoreRelease>
		}
	}
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200009a4 	.word	0x200009a4
 8004358:	200004ec 	.word	0x200004ec
 800435c:	200009b4 	.word	0x200009b4

08004360 <lsm303agr_read_reg>:
  *
  */
int32_t __weak lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	461a      	mov	r2, r3
 800436c:	460b      	mov	r3, r1
 800436e:	72fb      	strb	r3, [r7, #11]
 8004370:	4613      	mov	r3, r2
 8004372:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685c      	ldr	r4, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68d8      	ldr	r0, [r3, #12]
 800437c:	893b      	ldrh	r3, [r7, #8]
 800437e:	7af9      	ldrb	r1, [r7, #11]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	47a0      	blx	r4
 8004384:	6178      	str	r0, [r7, #20]

  return ret;
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <lsm303agr_write_reg>:
  *
  */
int32_t __weak lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	461a      	mov	r2, r3
 800439c:	460b      	mov	r3, r1
 800439e:	72fb      	strb	r3, [r7, #11]
 80043a0:	4613      	mov	r3, r2
 80043a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681c      	ldr	r4, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68d8      	ldr	r0, [r3, #12]
 80043ac:	893b      	ldrh	r3, [r7, #8]
 80043ae:	7af9      	ldrb	r1, [r7, #11]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	47a0      	blx	r4
 80043b4:	6178      	str	r0, [r7, #20]

  return ret;
 80043b6:	697b      	ldr	r3, [r7, #20]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd90      	pop	{r4, r7, pc}

080043c0 <lsm303agr_from_fs_2g_hr_to_mg>:
  * @{
  *
  */

float_t lsm303agr_from_fs_2g_hr_to_mg(int16_t lsb)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f) * 0.98f;
 80043ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043d6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80043da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043de:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80043f4 <lsm303agr_from_fs_2g_hr_to_mg+0x34>
 80043e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80043e6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	3f7ae148 	.word	0x3f7ae148

080043f8 <lsm303agr_from_lsb_to_mgauss>:
{
  return (((float_t)lsb / 256.0f) * 1.0f) + 25.0f;
}

float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 1.5f;
 8004402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800440e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004412:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004416:	eeb0 0a67 	vmov.f32	s0, s15
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <lsm303agr_temperature_meas_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_temperature_meas_set(stmdev_ctx_t *ctx,
                                       lsm303agr_temp_en_a_t val)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_temp_cfg_reg_a_t temp_cfg_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8004430:	f107 0208 	add.w	r2, r7, #8
 8004434:	2301      	movs	r3, #1
 8004436:	211f      	movs	r1, #31
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff91 	bl	8004360 <lsm303agr_read_reg>
 800443e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&temp_cfg_reg_a, 1);

  if (ret == 0)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <lsm303agr_temperature_meas_set+0x42>
  {
    temp_cfg_reg_a.temp_en = (uint8_t)val;
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	b2da      	uxtb	r2, r3
 800444e:	7a3b      	ldrb	r3, [r7, #8]
 8004450:	f362 1387 	bfi	r3, r2, #6, #2
 8004454:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
 8004456:	f107 0208 	add.w	r2, r7, #8
 800445a:	2301      	movs	r3, #1
 800445c:	211f      	movs	r1, #31
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff ff96 	bl	8004390 <lsm303agr_write_reg>
 8004464:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&temp_cfg_reg_a, 1);
  }

  return ret;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <lsm303agr_xl_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_set(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t val)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  uint8_t lpen, hr;

  if (val == LSM303AGR_HR_12bit)
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <lsm303agr_xl_operating_mode_set+0x1c>
  {
    lpen = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	74fb      	strb	r3, [r7, #19]
    hr   = 1;
 8004486:	2301      	movs	r3, #1
 8004488:	74bb      	strb	r3, [r7, #18]
 800448a:	e00b      	b.n	80044a4 <lsm303agr_xl_operating_mode_set+0x34>
  }

  else if (val == LSM303AGR_NM_10bit)
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d104      	bne.n	800449c <lsm303agr_xl_operating_mode_set+0x2c>
  {
    lpen = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	74fb      	strb	r3, [r7, #19]
    hr   = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	74bb      	strb	r3, [r7, #18]
 800449a:	e003      	b.n	80044a4 <lsm303agr_xl_operating_mode_set+0x34>
  }

  else
  {
    lpen = 1;
 800449c:	2301      	movs	r3, #1
 800449e:	74fb      	strb	r3, [r7, #19]
    hr   = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	74bb      	strb	r3, [r7, #18]
  }

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80044a4:	f107 0210 	add.w	r2, r7, #16
 80044a8:	2301      	movs	r3, #1
 80044aa:	2120      	movs	r1, #32
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff57 	bl	8004360 <lsm303agr_read_reg>
 80044b2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);
  ctrl_reg1_a.lpen = (uint8_t)lpen;
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	7c3b      	ldrb	r3, [r7, #16]
 80044be:	f362 03c3 	bfi	r3, r2, #3, #1
 80044c2:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <lsm303agr_xl_operating_mode_set+0x6a>
  {
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80044ca:	f107 0210 	add.w	r2, r7, #16
 80044ce:	2301      	movs	r3, #1
 80044d0:	2120      	movs	r1, #32
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff5c 	bl	8004390 <lsm303agr_write_reg>
 80044d8:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  if (ret == 0)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d107      	bne.n	80044f0 <lsm303agr_xl_operating_mode_set+0x80>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80044e0:	f107 020c 	add.w	r2, r7, #12
 80044e4:	2301      	movs	r3, #1
 80044e6:	2123      	movs	r1, #35	; 0x23
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ff39 	bl	8004360 <lsm303agr_read_reg>
 80044ee:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ret == 0)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <lsm303agr_xl_operating_mode_set+0xa6>
  {
    ctrl_reg4_a.hr = hr;
 80044f6:	7cbb      	ldrb	r3, [r7, #18]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	7b3b      	ldrb	r3, [r7, #12]
 8004500:	f362 03c3 	bfi	r3, r2, #3, #1
 8004504:	733b      	strb	r3, [r7, #12]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004506:	f107 020c 	add.w	r2, r7, #12
 800450a:	2301      	movs	r3, #1
 800450c:	2123      	movs	r1, #35	; 0x23
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff ff3e 	bl	8004390 <lsm303agr_write_reg>
 8004514:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004516:	697b      	ldr	r3, [r7, #20]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800452c:	f107 0208 	add.w	r2, r7, #8
 8004530:	2301      	movs	r3, #1
 8004532:	2120      	movs	r1, #32
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff13 	bl	8004360 <lsm303agr_read_reg>
 800453a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	b2da      	uxtb	r2, r3
 800454a:	7a3b      	ldrb	r3, [r7, #8]
 800454c:	f362 1307 	bfi	r3, r2, #4, #4
 8004550:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004552:	f107 0208 	add.w	r2, r7, #8
 8004556:	2301      	movs	r3, #1
 8004558:	2120      	movs	r1, #32
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff ff18 	bl	8004390 <lsm303agr_write_reg>
 8004560:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8004562:	68fb      	ldr	r3, [r7, #12]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004578:	f107 0208 	add.w	r2, r7, #8
 800457c:	2301      	movs	r3, #1
 800457e:	2123      	movs	r1, #35	; 0x23
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff feed 	bl	8004360 <lsm303agr_read_reg>
 8004586:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	b2da      	uxtb	r2, r3
 8004596:	7a3b      	ldrb	r3, [r7, #8]
 8004598:	f362 1305 	bfi	r3, r2, #4, #2
 800459c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800459e:	f107 0208 	add.w	r2, r7, #8
 80045a2:	2301      	movs	r3, #1
 80045a4:	2123      	movs	r1, #35	; 0x23
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff fef2 	bl	8004390 <lsm303agr_write_reg>
 80045ac:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80045c4:	f107 0208 	add.w	r2, r7, #8
 80045c8:	2301      	movs	r3, #1
 80045ca:	2123      	movs	r1, #35	; 0x23
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fec7 	bl	8004360 <lsm303agr_read_reg>
 80045d2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10f      	bne.n	80045fa <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	7a3b      	ldrb	r3, [r7, #8]
 80045e4:	f362 13c7 	bfi	r3, r2, #7, #1
 80045e8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80045ea:	f107 0208 	add.w	r2, r7, #8
 80045ee:	2301      	movs	r3, #1
 80045f0:	2123      	movs	r1, #35	; 0x23
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fecc 	bl	8004390 <lsm303agr_write_reg>
 80045f8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80045fa:	68fb      	ldr	r3, [r7, #12]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800460e:	f107 020c 	add.w	r2, r7, #12
 8004612:	2306      	movs	r3, #6
 8004614:	2128      	movs	r1, #40	; 0x28
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff fea2 	bl	8004360 <lsm303agr_read_reg>
 800461c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800461e:	7b7b      	ldrb	r3, [r7, #13]
 8004620:	b21a      	sxth	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800462c:	b29b      	uxth	r3, r3
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	b29a      	uxth	r2, r3
 8004632:	7b3b      	ldrb	r3, [r7, #12]
 8004634:	b29b      	uxth	r3, r3
 8004636:	4413      	add	r3, r2
 8004638:	b29b      	uxth	r3, r3
 800463a:	b21a      	sxth	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	3302      	adds	r3, #2
 8004646:	b212      	sxth	r2, r2
 8004648:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	3302      	adds	r3, #2
 800464e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004652:	b29b      	uxth	r3, r3
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	b29a      	uxth	r2, r3
 8004658:	7bbb      	ldrb	r3, [r7, #14]
 800465a:	b29b      	uxth	r3, r3
 800465c:	4413      	add	r3, r2
 800465e:	b29a      	uxth	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	3302      	adds	r3, #2
 8004664:	b212      	sxth	r2, r2
 8004666:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004668:	7c7a      	ldrb	r2, [r7, #17]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	3304      	adds	r3, #4
 800466e:	b212      	sxth	r2, r2
 8004670:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3304      	adds	r3, #4
 8004676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800467a:	b29b      	uxth	r3, r3
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	b29a      	uxth	r2, r3
 8004680:	7c3b      	ldrb	r3, [r7, #16]
 8004682:	b29b      	uxth	r3, r3
 8004684:	4413      	add	r3, r2
 8004686:	b29a      	uxth	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	3304      	adds	r3, #4
 800468c:	b212      	sxth	r2, r2
 800468e:	801a      	strh	r2, [r3, #0]

  return ret;
 8004690:	697b      	ldr	r3, [r7, #20]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80046a6:	f107 0208 	add.w	r2, r7, #8
 80046aa:	2301      	movs	r3, #1
 80046ac:	2160      	movs	r1, #96	; 0x60
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fe56 	bl	8004360 <lsm303agr_read_reg>
 80046b4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10f      	bne.n	80046dc <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	7a3b      	ldrb	r3, [r7, #8]
 80046c6:	f362 0301 	bfi	r3, r2, #0, #2
 80046ca:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80046cc:	f107 0208 	add.w	r2, r7, #8
 80046d0:	2301      	movs	r3, #1
 80046d2:	2160      	movs	r1, #96	; 0x60
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fe5b 	bl	8004390 <lsm303agr_write_reg>
 80046da:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80046dc:	68fb      	ldr	r3, [r7, #12]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	460b      	mov	r3, r1
 80046f0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80046f2:	f107 0208 	add.w	r2, r7, #8
 80046f6:	2301      	movs	r3, #1
 80046f8:	2160      	movs	r1, #96	; 0x60
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fe30 	bl	8004360 <lsm303agr_read_reg>
 8004700:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10f      	bne.n	8004728 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	b2da      	uxtb	r2, r3
 8004710:	7a3b      	ldrb	r3, [r7, #8]
 8004712:	f362 0383 	bfi	r3, r2, #2, #2
 8004716:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004718:	f107 0208 	add.w	r2, r7, #8
 800471c:	2301      	movs	r3, #1
 800471e:	2160      	movs	r1, #96	; 0x60
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff fe35 	bl	8004390 <lsm303agr_write_reg>
 8004726:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004728:	68fb      	ldr	r3, [r7, #12]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <lsm303agr_mag_offset_temp_comp_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_offset_temp_comp_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800473e:	f107 0208 	add.w	r2, r7, #8
 8004742:	2301      	movs	r3, #1
 8004744:	2160      	movs	r1, #96	; 0x60
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fe0a 	bl	8004360 <lsm303agr_read_reg>
 800474c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <lsm303agr_mag_offset_temp_comp_set+0x42>
  {
    cfg_reg_a_m.comp_temp_en = (uint8_t)val;
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	7a3b      	ldrb	r3, [r7, #8]
 800475e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004762:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004764:	f107 0208 	add.w	r2, r7, #8
 8004768:	2301      	movs	r3, #1
 800476a:	2160      	movs	r1, #96	; 0x60
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fe0f 	bl	8004390 <lsm303agr_write_reg>
 8004772:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004774:	68fb      	ldr	r3, [r7, #12]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <lsm303agr_mag_set_rst_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_set_rst_mode_set(stmdev_ctx_t *ctx,
                                       lsm303agr_set_rst_m_t val)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
 800478a:	f107 0208 	add.w	r2, r7, #8
 800478e:	2301      	movs	r3, #1
 8004790:	2161      	movs	r1, #97	; 0x61
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff fde4 	bl	8004360 <lsm303agr_read_reg>
 8004798:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_b_m, 1);

  if (ret == 0)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10f      	bne.n	80047c0 <lsm303agr_mag_set_rst_mode_set+0x42>
  {
    cfg_reg_b_m.set_rst = (uint8_t)val;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	7a3b      	ldrb	r3, [r7, #8]
 80047aa:	f362 0342 	bfi	r3, r2, #1, #2
 80047ae:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
 80047b0:	f107 0208 	add.w	r2, r7, #8
 80047b4:	2301      	movs	r3, #1
 80047b6:	2161      	movs	r1, #97	; 0x61
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff fde9 	bl	8004390 <lsm303agr_write_reg>
 80047be:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_b_m, 1);
  }

  return ret;
 80047c0:	68fb      	ldr	r3, [r7, #12]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80047d6:	f107 0208 	add.w	r2, r7, #8
 80047da:	2301      	movs	r3, #1
 80047dc:	2162      	movs	r1, #98	; 0x62
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff fdbe 	bl	8004360 <lsm303agr_read_reg>
 80047e4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10f      	bne.n	800480c <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	7a3b      	ldrb	r3, [r7, #8]
 80047f6:	f362 1304 	bfi	r3, r2, #4, #1
 80047fa:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80047fc:	f107 0208 	add.w	r2, r7, #8
 8004800:	2301      	movs	r3, #1
 8004802:	2162      	movs	r1, #98	; 0x62
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fdc3 	bl	8004390 <lsm303agr_write_reg>
 800480a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004820:	f107 020c 	add.w	r2, r7, #12
 8004824:	2306      	movs	r3, #6
 8004826:	2168      	movs	r1, #104	; 0x68
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fd99 	bl	8004360 <lsm303agr_read_reg>
 800482e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004830:	7b7b      	ldrb	r3, [r7, #13]
 8004832:	b21a      	sxth	r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800483e:	b29b      	uxth	r3, r3
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	b29a      	uxth	r2, r3
 8004844:	7b3b      	ldrb	r3, [r7, #12]
 8004846:	b29b      	uxth	r3, r3
 8004848:	4413      	add	r3, r2
 800484a:	b29b      	uxth	r3, r3
 800484c:	b21a      	sxth	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	3302      	adds	r3, #2
 8004858:	b212      	sxth	r2, r2
 800485a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	3302      	adds	r3, #2
 8004860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004864:	b29b      	uxth	r3, r3
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	b29a      	uxth	r2, r3
 800486a:	7bbb      	ldrb	r3, [r7, #14]
 800486c:	b29b      	uxth	r3, r3
 800486e:	4413      	add	r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	3302      	adds	r3, #2
 8004876:	b212      	sxth	r2, r2
 8004878:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800487a:	7c7a      	ldrb	r2, [r7, #17]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	3304      	adds	r3, #4
 8004880:	b212      	sxth	r2, r2
 8004882:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	3304      	adds	r3, #4
 8004888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800488c:	b29b      	uxth	r3, r3
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	b29a      	uxth	r2, r3
 8004892:	7c3b      	ldrb	r3, [r7, #16]
 8004894:	b29b      	uxth	r3, r3
 8004896:	4413      	add	r3, r2
 8004898:	b29a      	uxth	r2, r3
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	3304      	adds	r3, #4
 800489e:	b212      	sxth	r2, r2
 80048a0:	801a      	strh	r2, [r3, #0]

  return ret;
 80048a2:	697b      	ldr	r3, [r7, #20]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80048b6:	2301      	movs	r3, #1
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	210f      	movs	r1, #15
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fd4f 	bl	8004360 <lsm303agr_read_reg>
 80048c2:	60f8      	str	r0, [r7, #12]

  return ret;
 80048c4:	68fb      	ldr	r3, [r7, #12]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <lsm303agr_xl_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_status_get(stmdev_ctx_t *ctx,
                                lsm303agr_status_reg_a_t *val)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_A, (uint8_t *) val, 1);
 80048d8:	2301      	movs	r3, #1
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	2127      	movs	r1, #39	; 0x27
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fd3e 	bl	8004360 <lsm303agr_read_reg>
 80048e4:	60f8      	str	r0, [r7, #12]

  return ret;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80048fa:	2301      	movs	r3, #1
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	214f      	movs	r1, #79	; 0x4f
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fd2d 	bl	8004360 <lsm303agr_read_reg>
 8004906:	60f8      	str	r0, [r7, #12]

  return ret;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <lsm303agr_mag_reset_set>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800491e:	f107 0208 	add.w	r2, r7, #8
 8004922:	2301      	movs	r3, #1
 8004924:	2160      	movs	r1, #96	; 0x60
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fd1a 	bl	8004360 <lsm303agr_read_reg>
 800492c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10f      	bne.n	8004954 <lsm303agr_mag_reset_set+0x42>
  {
    cfg_reg_a_m.soft_rst = (uint8_t)val;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	7a3b      	ldrb	r3, [r7, #8]
 800493e:	f362 1345 	bfi	r3, r2, #5, #1
 8004942:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004944:	f107 0208 	add.w	r2, r7, #8
 8004948:	2301      	movs	r3, #1
 800494a:	2160      	movs	r1, #96	; 0x60
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fd1f 	bl	8004390 <lsm303agr_write_reg>
 8004952:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004954:	68fb      	ldr	r3, [r7, #12]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <lsm303agr_mag_reset_get>:
  * @param  val    Change the values of soft_rst in reg CFG_REG_A_M.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004968:	f107 0208 	add.w	r2, r7, #8
 800496c:	2301      	movs	r3, #1
 800496e:	2160      	movs	r1, #96	; 0x60
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fcf5 	bl	8004360 <lsm303agr_read_reg>
 8004976:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);
  *val = cfg_reg_a_m.soft_rst;
 8004978:	7a3b      	ldrb	r3, [r7, #8]
 800497a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	701a      	strb	r2, [r3, #0]

  return ret;
 8004986:	68fb      	ldr	r3, [r7, #12]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <lsm303agr_mag_status_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_status_get(stmdev_ctx_t *ctx,
                                 lsm303agr_status_reg_m_t *val)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M, (uint8_t *) val, 1);
 800499a:	2301      	movs	r3, #1
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	2167      	movs	r1, #103	; 0x67
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fcdd 	bl	8004360 <lsm303agr_read_reg>
 80049a6:	60f8      	str	r0, [r7, #12]

  return ret;
 80049a8:	68fb      	ldr	r3, [r7, #12]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <lsm6dsl_platform_write>:
lsm6dsl_data gyroscope;
lsm6dsl_data accellerometer2;
stmdev_ctx_t lsm6dsl_dev_ctx;

int32_t lsm6dsl_platform_write(void *handle, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af04      	add	r7, sp, #16
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	461a      	mov	r2, r3
 80049c0:	460b      	mov	r3, r1
 80049c2:	72fb      	strb	r3, [r7, #11]
 80049c4:	4613      	mov	r3, r2
 80049c6:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <lsm6dsl_platform_write+0x44>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10d      	bne.n	80049ec <lsm6dsl_platform_write+0x38>
		HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg,
 80049d0:	7afb      	ldrb	r3, [r7, #11]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049d8:	9302      	str	r3, [sp, #8]
 80049da:	893b      	ldrh	r3, [r7, #8]
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	2301      	movs	r3, #1
 80049e4:	21d7      	movs	r1, #215	; 0xd7
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f003 fa34 	bl	8007e54 <HAL_I2C_Mem_Write>
		I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
	}
	return 0;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200008bc 	.word	0x200008bc

080049fc <lsm6dsl_platform_read>:

int32_t lsm6dsl_platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af04      	add	r7, sp, #16
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	461a      	mov	r2, r3
 8004a08:	460b      	mov	r3, r1
 8004a0a:	72fb      	strb	r3, [r7, #11]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	813b      	strh	r3, [r7, #8]
	if (handle == &hi2c1) {
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a0b      	ldr	r2, [pc, #44]	; (8004a40 <lsm6dsl_platform_read+0x44>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d10d      	bne.n	8004a34 <lsm6dsl_platform_read+0x38>
		HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg,
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a20:	9302      	str	r3, [sp, #8]
 8004a22:	893b      	ldrh	r3, [r7, #8]
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	21d7      	movs	r1, #215	; 0xd7
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f003 fb24 	bl	800807c <HAL_I2C_Mem_Read>
		I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
	}
	return 0;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	200008bc 	.word	0x200008bc

08004a44 <LSM6DSL_init>:

void LSM6DSL_init() {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
	uint8_t id, rst = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	71bb      	strb	r3, [r7, #6]

	lsm6dsl_dev_ctx.write_reg = lsm6dsl_platform_write;
 8004a4e:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a50:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <LSM6DSL_init+0x94>)
 8004a52:	601a      	str	r2, [r3, #0]
	lsm6dsl_dev_ctx.read_reg = lsm6dsl_platform_read;
 8004a54:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a56:	4a21      	ldr	r2, [pc, #132]	; (8004adc <LSM6DSL_init+0x98>)
 8004a58:	605a      	str	r2, [r3, #4]
	lsm6dsl_dev_ctx.handle = &hi2c1;
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a5c:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <LSM6DSL_init+0x9c>)
 8004a5e:	60da      	str	r2, [r3, #12]

	// Poll device
	while (id != LSM6DSL_ID) {
 8004a60:	e004      	b.n	8004a6c <LSM6DSL_init+0x28>
		lsm6dsl_device_id_get(&lsm6dsl_dev_ctx, &id);
 8004a62:	1dfb      	adds	r3, r7, #7
 8004a64:	4619      	mov	r1, r3
 8004a66:	481b      	ldr	r0, [pc, #108]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a68:	f000 faa5 	bl	8004fb6 <lsm6dsl_device_id_get>
	while (id != LSM6DSL_ID) {
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	2b6a      	cmp	r3, #106	; 0x6a
 8004a70:	d1f7      	bne.n	8004a62 <LSM6DSL_init+0x1e>
	}

	/*
	 *  Restore default configuration
	 */
	lsm6dsl_reset_set(&lsm6dsl_dev_ctx, PROPERTY_ENABLE);
 8004a72:	2101      	movs	r1, #1
 8004a74:	4817      	ldr	r0, [pc, #92]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a76:	f000 faaf 	bl	8004fd8 <lsm6dsl_reset_set>
	do {
		lsm6dsl_reset_get(&lsm6dsl_dev_ctx, &rst);
 8004a7a:	1dbb      	adds	r3, r7, #6
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4815      	ldr	r0, [pc, #84]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a80:	f000 fad0 	bl	8005024 <lsm6dsl_reset_get>
	} while (rst);
 8004a84:	79bb      	ldrb	r3, [r7, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f7      	bne.n	8004a7a <LSM6DSL_init+0x36>
	/*
	 *  Enable Block Data Update
	 */
	lsm6dsl_block_data_update_set(&lsm6dsl_dev_ctx, PROPERTY_ENABLE);
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4811      	ldr	r0, [pc, #68]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a8e:	f000 f9c5 	bl	8004e1c <lsm6dsl_block_data_update_set>
	/*
	 * Set Output Data Rate
	 */
	lsm6dsl_xl_data_rate_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_ODR_12Hz5);
 8004a92:	2101      	movs	r1, #1
 8004a94:	480f      	ldr	r0, [pc, #60]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a96:	f000 f94f 	bl	8004d38 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&lsm6dsl_dev_ctx, LSM6DSL_GY_ODR_12Hz5);
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004a9e:	f000 f997 	bl	8004dd0 <lsm6dsl_gy_data_rate_set>
	/*
	 * Set full scale
	 */
	lsm6dsl_xl_full_scale_set(&lsm6dsl_dev_ctx, LSM6DSL_2g);
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	480b      	ldr	r0, [pc, #44]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004aa6:	f000 f921 	bl	8004cec <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&lsm6dsl_dev_ctx, LSM6DSL_2000dps);
 8004aaa:	2106      	movs	r1, #6
 8004aac:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004aae:	f000 f969 	bl	8004d84 <lsm6dsl_gy_full_scale_set>

	/*
	 * Configure filtering chain(No aux interface)
	 */
	/* Accelerometer - analog filter */
	lsm6dsl_xl_filter_analog_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004ab6:	f000 face 	bl	8005056 <lsm6dsl_xl_filter_analog_set>

	/* Accelerometer - LPF1 path ( LPF2 not used )*/
	//lsm6dsl_xl_lp1_bandwidth_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_LP1_ODR_DIV_4);
	/* Accelerometer - LPF1 + LPF2 path */
	lsm6dsl_xl_lp2_bandwidth_set(&lsm6dsl_dev_ctx,
 8004aba:	2111      	movs	r1, #17
 8004abc:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004abe:	f000 faf0 	bl	80050a2 <lsm6dsl_xl_lp2_bandwidth_set>

	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&lsm6dsl_dev_ctx, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&lsm6dsl_dev_ctx, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&lsm6dsl_dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8004ac2:	21a8      	movs	r1, #168	; 0xa8
 8004ac4:	4803      	ldr	r0, [pc, #12]	; (8004ad4 <LSM6DSL_init+0x90>)
 8004ac6:	f000 fb23 	bl	8005110 <lsm6dsl_gy_band_pass_set>
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200009e4 	.word	0x200009e4
 8004ad8:	080049b5 	.word	0x080049b5
 8004adc:	080049fd 	.word	0x080049fd
 8004ae0:	200008bc 	.word	0x200008bc

08004ae4 <LSM6DSL_dataReadAcc>:

void LSM6DSL_dataReadAcc() {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
	/* Read output only if new value is available */
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(&lsm6dsl_dev_ctx, &reg.status_reg);
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4619      	mov	r1, r3
 8004af0:	4825      	ldr	r0, [pc, #148]	; (8004b88 <LSM6DSL_dataReadAcc+0xa4>)
 8004af2:	f000 f9b9 	bl	8004e68 <lsm6dsl_status_reg_get>
	int16_t temp[3];
	float toMS2 = 9.81;
 8004af6:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <LSM6DSL_dataReadAcc+0xa8>)
 8004af8:	60fb      	str	r3, [r7, #12]
	if (reg.status_reg.xlda) {
 8004afa:	7a3b      	ldrb	r3, [r7, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d03c      	beq.n	8004b80 <LSM6DSL_dataReadAcc+0x9c>
		lsm6dsl_acceleration_raw_get(&lsm6dsl_dev_ctx, temp);
 8004b06:	463b      	mov	r3, r7
 8004b08:	4619      	mov	r1, r3
 8004b0a:	481f      	ldr	r0, [pc, #124]	; (8004b88 <LSM6DSL_dataReadAcc+0xa4>)
 8004b0c:	f000 fa08 	bl	8004f20 <lsm6dsl_acceleration_raw_get>
		if(osSemaphoreAcquire(binSemaphoreAcc2Handle, 0)==osOK){
 8004b10:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <LSM6DSL_dataReadAcc+0xac>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f006 fdf0 	bl	800b6fc <osSemaphoreAcquire>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d12e      	bne.n	8004b80 <LSM6DSL_dataReadAcc+0x9c>
			accellerometer2.x = lsm6dsl_from_fs2g_to_mg(temp[0])/toMS2;
 8004b22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f8b0 	bl	8004c8c <lsm6dsl_from_fs2g_to_mg>
 8004b2c:	eef0 6a40 	vmov.f32	s13, s0
 8004b30:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b38:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <LSM6DSL_dataReadAcc+0xb0>)
 8004b3a:	edc3 7a00 	vstr	s15, [r3]
			accellerometer2.y = lsm6dsl_from_fs2g_to_mg(temp[1])/toMS2;
 8004b3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f8a2 	bl	8004c8c <lsm6dsl_from_fs2g_to_mg>
 8004b48:	eef0 6a40 	vmov.f32	s13, s0
 8004b4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <LSM6DSL_dataReadAcc+0xb0>)
 8004b56:	edc3 7a01 	vstr	s15, [r3, #4]
			accellerometer2.z = lsm6dsl_from_fs2g_to_mg(temp[2])/toMS2;
 8004b5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f894 	bl	8004c8c <lsm6dsl_from_fs2g_to_mg>
 8004b64:	eef0 6a40 	vmov.f32	s13, s0
 8004b68:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <LSM6DSL_dataReadAcc+0xb0>)
 8004b72:	edc3 7a02 	vstr	s15, [r3, #8]
			osSemaphoreRelease(binSemaphoreAcc2Handle);
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <LSM6DSL_dataReadAcc+0xac>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f006 fe24 	bl	800b7c8 <osSemaphoreRelease>
		}
	}
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200009e4 	.word	0x200009e4
 8004b8c:	411cf5c3 	.word	0x411cf5c3
 8004b90:	200004e8 	.word	0x200004e8
 8004b94:	200009d8 	.word	0x200009d8

08004b98 <LSM6DSL_dataReadGyro>:

void LSM6DSL_dataReadGyro() {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
	/* Read output only if new value is available */
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(&lsm6dsl_dev_ctx, &reg.status_reg);
 8004b9e:	f107 030c 	add.w	r3, r7, #12
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	481e      	ldr	r0, [pc, #120]	; (8004c20 <LSM6DSL_dataReadGyro+0x88>)
 8004ba6:	f000 f95f 	bl	8004e68 <lsm6dsl_status_reg_get>
	int16_t temp[3];  //variabile temporanea
	if (reg.status_reg.gda) {
 8004baa:	7b3b      	ldrb	r3, [r7, #12]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d030      	beq.n	8004c18 <LSM6DSL_dataReadGyro+0x80>
		lsm6dsl_angular_rate_raw_get(&lsm6dsl_dev_ctx, temp);
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4819      	ldr	r0, [pc, #100]	; (8004c20 <LSM6DSL_dataReadGyro+0x88>)
 8004bbc:	f000 f965 	bl	8004e8a <lsm6dsl_angular_rate_raw_get>
		if(osSemaphoreAcquire(binSemaphoreGyrHandle, 0)==osOK){
 8004bc0:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <LSM6DSL_dataReadGyro+0x8c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f006 fd98 	bl	800b6fc <osSemaphoreAcquire>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d122      	bne.n	8004c18 <LSM6DSL_dataReadGyro+0x80>
			gyroscope.x = lsm6dsl_from_fs2000dps_to_mdps(temp[0]);
 8004bd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f870 	bl	8004cbc <lsm6dsl_from_fs2000dps_to_mdps>
 8004bdc:	eef0 7a40 	vmov.f32	s15, s0
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <LSM6DSL_dataReadGyro+0x90>)
 8004be2:	edc3 7a00 	vstr	s15, [r3]
			gyroscope.y = lsm6dsl_from_fs2000dps_to_mdps(temp[1]);
 8004be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f866 	bl	8004cbc <lsm6dsl_from_fs2000dps_to_mdps>
 8004bf0:	eef0 7a40 	vmov.f32	s15, s0
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <LSM6DSL_dataReadGyro+0x90>)
 8004bf6:	edc3 7a01 	vstr	s15, [r3, #4]
			gyroscope.z = lsm6dsl_from_fs2000dps_to_mdps(temp[2]);
 8004bfa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f85c 	bl	8004cbc <lsm6dsl_from_fs2000dps_to_mdps>
 8004c04:	eef0 7a40 	vmov.f32	s15, s0
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <LSM6DSL_dataReadGyro+0x90>)
 8004c0a:	edc3 7a02 	vstr	s15, [r3, #8]
			osSemaphoreRelease(binSemaphoreGyrHandle);
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <LSM6DSL_dataReadGyro+0x8c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f006 fdd8 	bl	800b7c8 <osSemaphoreRelease>
		}
	}
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	200009e4 	.word	0x200009e4
 8004c24:	200004f0 	.word	0x200004f0
 8004c28:	200009cc 	.word	0x200009cc

08004c2c <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	460b      	mov	r3, r1
 8004c3a:	72fb      	strb	r3, [r7, #11]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685c      	ldr	r4, [r3, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68d8      	ldr	r0, [r3, #12]
 8004c48:	893b      	ldrh	r3, [r7, #8]
 8004c4a:	7af9      	ldrb	r1, [r7, #11]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	47a0      	blx	r4
 8004c50:	6178      	str	r0, [r7, #20]

  return ret;
 8004c52:	697b      	ldr	r3, [r7, #20]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd90      	pop	{r4, r7, pc}

08004c5c <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	461a      	mov	r2, r3
 8004c68:	460b      	mov	r3, r1
 8004c6a:	72fb      	strb	r3, [r7, #11]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681c      	ldr	r4, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68d8      	ldr	r0, [r3, #12]
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	7af9      	ldrb	r1, [r7, #11]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	47a0      	blx	r4
 8004c80:	6178      	str	r0, [r7, #20]

  return ret;
 8004c82:	697b      	ldr	r3, [r7, #20]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd90      	pop	{r4, r7, pc}

08004c8c <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8004c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004cb8 <lsm6dsl_from_fs2g_to_mg+0x2c>
 8004ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004caa:	eeb0 0a67 	vmov.f32	s0, s15
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	3d79db23 	.word	0x3d79db23

08004cbc <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004ce8 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8004cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004cda:	eeb0 0a67 	vmov.f32	s0, s15
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	428c0000 	.word	0x428c0000

08004cec <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004cf8:	f107 0208 	add.w	r2, r7, #8
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	2110      	movs	r1, #16
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff93 	bl	8004c2c <lsm6dsl_read_reg>
 8004d06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	7a3b      	ldrb	r3, [r7, #8]
 8004d18:	f362 0383 	bfi	r3, r2, #2, #2
 8004d1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004d1e:	f107 0208 	add.w	r2, r7, #8
 8004d22:	2301      	movs	r3, #1
 8004d24:	2110      	movs	r1, #16
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ff98 	bl	8004c5c <lsm6dsl_write_reg>
 8004d2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004d44:	f107 0208 	add.w	r2, r7, #8
 8004d48:	2301      	movs	r3, #1
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff6d 	bl	8004c2c <lsm6dsl_read_reg>
 8004d52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	7a3b      	ldrb	r3, [r7, #8]
 8004d64:	f362 1307 	bfi	r3, r2, #4, #4
 8004d68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004d6a:	f107 0208 	add.w	r2, r7, #8
 8004d6e:	2301      	movs	r3, #1
 8004d70:	2110      	movs	r1, #16
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ff72 	bl	8004c5c <lsm6dsl_write_reg>
 8004d78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004d90:	f107 0208 	add.w	r2, r7, #8
 8004d94:	2301      	movs	r3, #1
 8004d96:	2111      	movs	r1, #17
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff47 	bl	8004c2c <lsm6dsl_read_reg>
 8004d9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	7a3b      	ldrb	r3, [r7, #8]
 8004db0:	f362 0343 	bfi	r3, r2, #1, #3
 8004db4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004db6:	f107 0208 	add.w	r2, r7, #8
 8004dba:	2301      	movs	r3, #1
 8004dbc:	2111      	movs	r1, #17
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff ff4c 	bl	8004c5c <lsm6dsl_write_reg>
 8004dc4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004ddc:	f107 0208 	add.w	r2, r7, #8
 8004de0:	2301      	movs	r3, #1
 8004de2:	2111      	movs	r1, #17
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff ff21 	bl	8004c2c <lsm6dsl_read_reg>
 8004dea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10f      	bne.n	8004e12 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	7a3b      	ldrb	r3, [r7, #8]
 8004dfc:	f362 1307 	bfi	r3, r2, #4, #4
 8004e00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e02:	f107 0208 	add.w	r2, r7, #8
 8004e06:	2301      	movs	r3, #1
 8004e08:	2111      	movs	r1, #17
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ff26 	bl	8004c5c <lsm6dsl_write_reg>
 8004e10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e12:	68fb      	ldr	r3, [r7, #12]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004e28:	f107 0208 	add.w	r2, r7, #8
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	2112      	movs	r1, #18
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff fefb 	bl	8004c2c <lsm6dsl_read_reg>
 8004e36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	7a3b      	ldrb	r3, [r7, #8]
 8004e48:	f362 1386 	bfi	r3, r2, #6, #1
 8004e4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004e4e:	f107 0208 	add.w	r2, r7, #8
 8004e52:	2301      	movs	r3, #1
 8004e54:	2112      	movs	r1, #18
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff ff00 	bl	8004c5c <lsm6dsl_write_reg>
 8004e5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <lsm6dsl_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx,
                               lsm6dsl_status_reg_t *val)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t *) val, 1);
 8004e72:	2301      	movs	r3, #1
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	211e      	movs	r1, #30
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fed7 	bl	8004c2c <lsm6dsl_read_reg>
 8004e7e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e80:	68fb      	ldr	r3, [r7, #12]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b086      	sub	sp, #24
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8004e94:	f107 020c 	add.w	r2, r7, #12
 8004e98:	2306      	movs	r3, #6
 8004e9a:	2122      	movs	r1, #34	; 0x22
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fec5 	bl	8004c2c <lsm6dsl_read_reg>
 8004ea2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004ea4:	7b7b      	ldrb	r3, [r7, #13]
 8004ea6:	b21a      	sxth	r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	7b3b      	ldrb	r3, [r7, #12]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	b21a      	sxth	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	3302      	adds	r3, #2
 8004ecc:	b212      	sxth	r2, r2
 8004ece:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	7bbb      	ldrb	r3, [r7, #14]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	3302      	adds	r3, #2
 8004eea:	b212      	sxth	r2, r2
 8004eec:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004eee:	7c7a      	ldrb	r2, [r7, #17]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	b212      	sxth	r2, r2
 8004ef6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	3304      	adds	r3, #4
 8004efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	7c3b      	ldrb	r3, [r7, #16]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	b212      	sxth	r2, r2
 8004f14:	801a      	strh	r2, [r3, #0]

  return ret;
 8004f16:	697b      	ldr	r3, [r7, #20]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8004f2a:	f107 020c 	add.w	r2, r7, #12
 8004f2e:	2306      	movs	r3, #6
 8004f30:	2128      	movs	r1, #40	; 0x28
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff fe7a 	bl	8004c2c <lsm6dsl_read_reg>
 8004f38:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004f3a:	7b7b      	ldrb	r3, [r7, #13]
 8004f3c:	b21a      	sxth	r2, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	7b3b      	ldrb	r3, [r7, #12]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b21a      	sxth	r2, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004f5c:	7bfa      	ldrb	r2, [r7, #15]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	3302      	adds	r3, #2
 8004f62:	b212      	sxth	r2, r2
 8004f64:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	3302      	adds	r3, #2
 8004f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	3302      	adds	r3, #2
 8004f80:	b212      	sxth	r2, r2
 8004f82:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004f84:	7c7a      	ldrb	r2, [r7, #17]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	b212      	sxth	r2, r2
 8004f8c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	3304      	adds	r3, #4
 8004f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	7c3b      	ldrb	r3, [r7, #16]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	b212      	sxth	r2, r2
 8004faa:	801a      	strh	r2, [r3, #0]

  return ret;
 8004fac:	697b      	ldr	r3, [r7, #20]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	210f      	movs	r1, #15
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fe30 	bl	8004c2c <lsm6dsl_read_reg>
 8004fcc:	60f8      	str	r0, [r7, #12]

  return ret;
 8004fce:	68fb      	ldr	r3, [r7, #12]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004fe4:	f107 0208 	add.w	r2, r7, #8
 8004fe8:	2301      	movs	r3, #1
 8004fea:	2112      	movs	r1, #18
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fe1d 	bl	8004c2c <lsm6dsl_read_reg>
 8004ff2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10f      	bne.n	800501a <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	b2da      	uxtb	r2, r3
 8005002:	7a3b      	ldrb	r3, [r7, #8]
 8005004:	f362 0300 	bfi	r3, r2, #0, #1
 8005008:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800500a:	f107 0208 	add.w	r2, r7, #8
 800500e:	2301      	movs	r3, #1
 8005010:	2112      	movs	r1, #18
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff fe22 	bl	8004c5c <lsm6dsl_write_reg>
 8005018:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800501a:	68fb      	ldr	r3, [r7, #12]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800502e:	f107 0208 	add.w	r2, r7, #8
 8005032:	2301      	movs	r3, #1
 8005034:	2112      	movs	r1, #18
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fdf8 	bl	8004c2c <lsm6dsl_read_reg>
 800503c:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800503e:	7a3b      	ldrb	r3, [r7, #8]
 8005040:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	701a      	strb	r2, [r3, #0]

  return ret;
 800504c:	68fb      	ldr	r3, [r7, #12]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <lsm6dsl_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_bw0_xl_t val)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005062:	f107 0208 	add.w	r2, r7, #8
 8005066:	2301      	movs	r3, #1
 8005068:	2110      	movs	r1, #16
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fdde 	bl	8004c2c <lsm6dsl_read_reg>
 8005070:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10f      	bne.n	8005098 <lsm6dsl_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	7a3b      	ldrb	r3, [r7, #8]
 8005082:	f362 0300 	bfi	r3, r2, #0, #1
 8005086:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005088:	f107 0208 	add.w	r2, r7, #8
 800508c:	2301      	movs	r3, #1
 800508e:	2110      	movs	r1, #16
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fde3 	bl	8004c5c <lsm6dsl_write_reg>
 8005096:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005098:	68fb      	ldr	r3, [r7, #12]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	460b      	mov	r3, r1
 80050ac:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80050ae:	f107 0208 	add.w	r2, r7, #8
 80050b2:	2301      	movs	r3, #1
 80050b4:	2117      	movs	r1, #23
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fdb8 	bl	8004c2c <lsm6dsl_read_reg>
 80050bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d120      	bne.n	8005106 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	7a3b      	ldrb	r3, [r7, #8]
 80050d0:	f362 03c3 	bfi	r3, r2, #3, #1
 80050d4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	7a3b      	ldrb	r3, [r7, #8]
 80050e0:	f362 1346 	bfi	r3, r2, #5, #2
 80050e4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80050e6:	7a3b      	ldrb	r3, [r7, #8]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80050ee:	7a3b      	ldrb	r3, [r7, #8]
 80050f0:	f36f 0382 	bfc	r3, #2, #1
 80050f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80050f6:	f107 0208 	add.w	r2, r7, #8
 80050fa:	2301      	movs	r3, #1
 80050fc:	2117      	movs	r1, #23
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fdac 	bl	8004c5c <lsm6dsl_write_reg>
 8005104:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005106:	68fb      	ldr	r3, [r7, #12]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800511c:	f107 0208 	add.w	r2, r7, #8
 8005120:	2301      	movs	r3, #1
 8005122:	2116      	movs	r1, #22
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fd81 	bl	8004c2c <lsm6dsl_read_reg>
 800512a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d157      	bne.n	80051e2 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	b2da      	uxtb	r2, r3
 800513c:	7a3b      	ldrb	r3, [r7, #8]
 800513e:	f362 1305 	bfi	r3, r2, #4, #2
 8005142:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	09db      	lsrs	r3, r3, #7
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	7a3b      	ldrb	r3, [r7, #8]
 8005152:	f362 1386 	bfi	r3, r2, #6, #1
 8005156:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8005158:	f107 0208 	add.w	r2, r7, #8
 800515c:	2301      	movs	r3, #1
 800515e:	2116      	movs	r1, #22
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff fd7b 	bl	8004c5c <lsm6dsl_write_reg>
 8005166:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d139      	bne.n	80051e2 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800516e:	f107 020c 	add.w	r2, r7, #12
 8005172:	2301      	movs	r3, #1
 8005174:	2115      	movs	r1, #21
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fd58 	bl	8004c2c <lsm6dsl_read_reg>
 800517c:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d12e      	bne.n	80051e2 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	b2da      	uxtb	r2, r3
 800518c:	7b3b      	ldrb	r3, [r7, #12]
 800518e:	f362 0301 	bfi	r3, r2, #0, #2
 8005192:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8005194:	f107 020c 	add.w	r2, r7, #12
 8005198:	2301      	movs	r3, #1
 800519a:	2115      	movs	r1, #21
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fd5d 	bl	8004c5c <lsm6dsl_write_reg>
 80051a2:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d11b      	bne.n	80051e2 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 80051aa:	f107 0210 	add.w	r2, r7, #16
 80051ae:	2301      	movs	r3, #1
 80051b0:	2113      	movs	r1, #19
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fd3a 	bl	8004c2c <lsm6dsl_read_reg>
 80051b8:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d110      	bne.n	80051e2 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	7c3b      	ldrb	r3, [r7, #16]
 80051cc:	f362 0341 	bfi	r3, r2, #1, #1
 80051d0:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 80051d2:	f107 0210 	add.w	r2, r7, #16
 80051d6:	2301      	movs	r3, #1
 80051d8:	2113      	movs	r1, #19
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fd3e 	bl	8004c5c <lsm6dsl_write_reg>
 80051e0:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 80051e2:	697b      	ldr	r3, [r7, #20]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <compassDetect>:
} compassConfig_t;

static compassConfig_t compassConfig;

static bool compassDetect(magDev_t *magDev, uint8_t *alignment)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
    *alignment = ALIGN_DEFAULT;  // may be overridden if target specifies MAG_*_ALIGN
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]

    magSensor_e magHardware = MAG_NONE;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]

    extDevice_t *dev = &magDev->dev;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3318      	adds	r3, #24
 8005204:	60bb      	str	r3, [r7, #8]
    // Associate magnetometer bus with its device
    dev->bus = &magDev->bus;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	601a      	str	r2, [r3, #0]


    switch (compassConfig.mag_busType) {
 8005210:	4b19      	ldr	r3, [pc, #100]	; (8005278 <compassDetect+0x8c>)
 8005212:	789b      	ldrb	r3, [r3, #2]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10f      	bne.n	8005238 <compassDetect+0x4c>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, compassConfig.mag_i2c_device);
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <compassDetect+0x8c>)
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	4619      	mov	r1, r3
 800521e:	68b8      	ldr	r0, [r7, #8]
 8005220:	f7fb fd44 	bl	8000cac <i2cBusSetInstance>
        dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 8005224:	4b14      	ldr	r3, [pc, #80]	; (8005278 <compassDetect+0x8c>)
 8005226:	791a      	ldrb	r2, [r3, #4]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	711a      	strb	r2, [r3, #4]
        break;
 800522c:	bf00      	nop
    case BUS_TYPE_SPI:
    default:
        return false;
    }

    switch (compassConfig.mag_hardware) {
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <compassDetect+0x8c>)
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <compassDetect+0x54>
 8005236:	e001      	b.n	800523c <compassDetect+0x50>
        return false;
 8005238:	2300      	movs	r3, #0
 800523a:	e019      	b.n	8005270 <compassDetect+0x84>
    switch (compassConfig.mag_hardware) {
 800523c:	2b02      	cmp	r3, #2
 800523e:	d10e      	bne.n	800525e <compassDetect+0x72>
    case MAG_DEFAULT:
    case MAG_HMC5883:
        if (dev->bus->busType == BUS_TYPE_I2C) {
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d103      	bne.n	8005252 <compassDetect+0x66>
            dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 800524a:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <compassDetect+0x8c>)
 800524c:	791a      	ldrb	r2, [r3, #4]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	711a      	strb	r2, [r3, #4]
        }

        *alignment = MAG_HMC5883_ALIGN;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	701a      	strb	r2, [r3, #0]
        magHardware = MAG_HMC5883;
 8005258:	2302      	movs	r3, #2
 800525a:	73fb      	strb	r3, [r7, #15]
        break;
 800525c:	e002      	b.n	8005264 <compassDetect+0x78>

    default:
        magHardware = MAG_NONE;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
        break;
 8005262:	bf00      	nop
    }

    // MAG_MPU925X_AK8963 is an MPU925x configured as I2C passthrough to the built-in AK8963 magnetometer
    // Passthrough mode disables the gyro/acc part of the MPU, so we only want to detect this sensor if mag_hardware was explicitly set to MAG_MPU925X_AK8963
    if (magHardware == MAG_NONE) {
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <compassDetect+0x82>
        return false;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <compassDetect+0x84>
    }

    return true;
 800526e:	2301      	movs	r3, #1
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000af4 	.word	0x20000af4

0800527c <magInit>:


void magInit(sensorMagInitFuncPtr initFn, sensorMagReadFuncPtr readFn) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	magDev.init = initFn;
 8005286:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <magInit+0x64>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60d3      	str	r3, [r2, #12]
	magDev.read = readFn;
 800528c:	4a14      	ldr	r2, [pc, #80]	; (80052e0 <magInit+0x64>)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6113      	str	r3, [r2, #16]

	//TODO

    sensor_align_e alignment;

    if (!compassDetect(&magDev, &alignment)) {
 8005292:	f107 030f 	add.w	r3, r7, #15
 8005296:	4619      	mov	r1, r3
 8005298:	4811      	ldr	r0, [pc, #68]	; (80052e0 <magInit+0x64>)
 800529a:	f7ff ffa7 	bl	80051ec <compassDetect>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d018      	beq.n	80052d6 <magInit+0x5a>
        return;
    }

    magDev.init(&magDev);
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <magInit+0x64>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	480d      	ldr	r0, [pc, #52]	; (80052e0 <magInit+0x64>)
 80052aa:	4798      	blx	r3
    doneInit = true;
 80052ac:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <magInit+0x68>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]

    magDev.magAlignment = alignment;
 80052b2:	7bfa      	ldrb	r2, [r7, #15]
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <magInit+0x64>)
 80052b6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    if (compassConfig.mag_alignment != ALIGN_DEFAULT) {
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <magInit+0x6c>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <magInit+0x50>
        magDev.magAlignment = compassConfig.mag_alignment;
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <magInit+0x6c>)
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <magInit+0x64>)
 80052c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    buildRotationMatrixFromAlignment(&compassConfig.mag_customAlignment, &magDev.rotationMatrix);
 80052cc:	4907      	ldr	r1, [pc, #28]	; (80052ec <magInit+0x70>)
 80052ce:	4808      	ldr	r0, [pc, #32]	; (80052f0 <magInit+0x74>)
 80052d0:	f001 fe18 	bl	8006f04 <buildRotationMatrixFromAlignment>
 80052d4:	e000      	b.n	80052d8 <magInit+0x5c>
        return;
 80052d6:	bf00      	nop
}
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000a00 	.word	0x20000a00
 80052e4:	20000af0 	.word	0x20000af0
 80052e8:	20000af4 	.word	0x20000af4
 80052ec:	20000ac4 	.word	0x20000ac4
 80052f0:	20000b04 	.word	0x20000b04

080052f4 <magUpdate>:

void magUpdate(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
    if (!magDev.read(&magDev)) {
 80052fa:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <magUpdate+0xb8>)
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	482b      	ldr	r0, [pc, #172]	; (80053ac <magUpdate+0xb8>)
 8005300:	4798      	blx	r3
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d04d      	beq.n	80053a4 <magUpdate+0xb0>
        return;
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8005308:	2300      	movs	r3, #0
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	e00c      	b.n	8005328 <magUpdate+0x34>
    	mag.magADC[axis] = magDev.magADC[axis];
 800530e:	4a27      	ldr	r2, [pc, #156]	; (80053ac <magUpdate+0xb8>)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4925      	ldr	r1, [pc, #148]	; (80053b0 <magUpdate+0xbc>)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3301      	adds	r3, #1
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b02      	cmp	r3, #2
 800532c:	ddef      	ble.n	800530e <magUpdate+0x1a>
    }

    alignSensorViaRotation(mag.magADC, magDev.magAlignment);
 800532e:	4b1f      	ldr	r3, [pc, #124]	; (80053ac <magUpdate+0xb8>)
 8005330:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005334:	4619      	mov	r1, r3
 8005336:	481e      	ldr	r0, [pc, #120]	; (80053b0 <magUpdate+0xbc>)
 8005338:	f001 fe76 	bl	8007028 <alignSensorViaRotation>

    flightDynamicsTrims_t *magZero = &compassConfig.magZero;
 800533c:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <magUpdate+0xc0>)
 800533e:	603b      	str	r3, [r7, #0]
    if (doneInit) {              // we apply offset only once mag calibration is done
 8005340:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <magUpdate+0xc4>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02e      	beq.n	80053a6 <magUpdate+0xb2>
        mag.magADC[X] -= magZero->raw[X];
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <magUpdate+0xbc>)
 800534a:	ed93 7a00 	vldr	s14, [r3]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800535c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005360:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <magUpdate+0xbc>)
 8005362:	edc3 7a00 	vstr	s15, [r3]
        mag.magADC[Y] -= magZero->raw[Y];
 8005366:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <magUpdate+0xbc>)
 8005368:	ed93 7a01 	vldr	s14, [r3, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800537a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <magUpdate+0xbc>)
 8005380:	edc3 7a01 	vstr	s15, [r3, #4]
        mag.magADC[Z] -= magZero->raw[Z];
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <magUpdate+0xbc>)
 8005386:	ed93 7a02 	vldr	s14, [r3, #8]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <magUpdate+0xbc>)
 800539e:	edc3 7a02 	vstr	s15, [r3, #8]
 80053a2:	e000      	b.n	80053a6 <magUpdate+0xb2>
        return;
 80053a4:	bf00      	nop
    }
}
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000a00 	.word	0x20000a00
 80053b0:	200009f4 	.word	0x200009f4
 80053b4:	20000afc 	.word	0x20000afc
 80053b8:	20000af0 	.word	0x20000af0

080053bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053c0:	f002 f9bf 	bl	8007742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053c4:	f000 f83a 	bl	800543c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053c8:	f7fc fe28 	bl	800201c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80053cc:	f002 f8e8 	bl	80075a0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80053d0:	f7fd fc50 	bl	8002c74 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80053d4:	f002 f856 	bl	8007484 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* init sensors*/
  LSM303AGR_init();
 80053d8:	f7fe feb0 	bl	800413c <LSM303AGR_init>
  LSM6DSL_init();
 80053dc:	f7ff fb32 	bl	8004a44 <LSM6DSL_init>
  LPS22HB_init();
 80053e0:	f7fe fcc8 	bl	8003d74 <LPS22HB_init>

  /* initialization of control task */
  gyroInit(sensorGyroInit, sensorGyroRead);
 80053e4:	490d      	ldr	r1, [pc, #52]	; (800541c <main+0x60>)
 80053e6:	480e      	ldr	r0, [pc, #56]	; (8005420 <main+0x64>)
 80053e8:	f7fd f9d8 	bl	800279c <gyroInit>
  controlMotorInit();
 80053ec:	f7fb fc8a 	bl	8000d04 <controlMotorInit>

  /* initialization of attitude task */
  accInit(sensorAccInit, sensorAccRead);
 80053f0:	490c      	ldr	r1, [pc, #48]	; (8005424 <main+0x68>)
 80053f2:	480d      	ldr	r0, [pc, #52]	; (8005428 <main+0x6c>)
 80053f4:	f7fb f9ae 	bl	8000754 <accInit>
  magInit(sensorMagInit, sensorMagRead);
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <main+0x70>)
 80053fa:	480d      	ldr	r0, [pc, #52]	; (8005430 <main+0x74>)
 80053fc:	f7ff ff3e 	bl	800527c <magInit>
  attitudeInit();
 8005400:	f7fb fae2 	bl	80009c8 <attitudeInit>

  /* initialization of altitude task */
  baroInit(sensorBaroInit, sensorBaroRead);
 8005404:	490b      	ldr	r1, [pc, #44]	; (8005434 <main+0x78>)
 8005406:	480c      	ldr	r0, [pc, #48]	; (8005438 <main+0x7c>)
 8005408:	f7fb fbec 	bl	8000be4 <baroInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800540c:	f005 ff9c 	bl	800b348 <osKernelInitialize>
  MX_FREERTOS_Init();
 8005410:	f7fc fb56 	bl	8001ac0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005414:	f005 ffcc 	bl	800b3b0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005418:	e7fe      	b.n	8005418 <main+0x5c>
 800541a:	bf00      	nop
 800541c:	08005535 	.word	0x08005535
 8005420:	08005521 	.word	0x08005521
 8005424:	080055a1 	.word	0x080055a1
 8005428:	0800558d 	.word	0x0800558d
 800542c:	08005605 	.word	0x08005605
 8005430:	080055f1 	.word	0x080055f1
 8005434:	08005671 	.word	0x08005671
 8005438:	08005655 	.word	0x08005655

0800543c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b094      	sub	sp, #80	; 0x50
 8005440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005442:	f107 031c 	add.w	r3, r7, #28
 8005446:	2234      	movs	r2, #52	; 0x34
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f009 fc47 	bl	800ecde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	609a      	str	r2, [r3, #8]
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005460:	f003 fba0 	bl	8008ba4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005464:	4b2c      	ldr	r3, [pc, #176]	; (8005518 <SystemClock_Config+0xdc>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <SystemClock_Config+0xdc>)
 800546a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800546e:	6413      	str	r3, [r2, #64]	; 0x40
 8005470:	4b29      	ldr	r3, [pc, #164]	; (8005518 <SystemClock_Config+0xdc>)
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800547c:	4b27      	ldr	r3, [pc, #156]	; (800551c <SystemClock_Config+0xe0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005484:	4a25      	ldr	r2, [pc, #148]	; (800551c <SystemClock_Config+0xe0>)
 8005486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	4b23      	ldr	r3, [pc, #140]	; (800551c <SystemClock_Config+0xe0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005494:	603b      	str	r3, [r7, #0]
 8005496:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005498:	2301      	movs	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800549c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80054a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054a2:	2302      	movs	r3, #2
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80054ac:	2304      	movs	r3, #4
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80054b0:	2360      	movs	r3, #96	; 0x60
 80054b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054b4:	2302      	movs	r3, #2
 80054b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80054b8:	2304      	movs	r3, #4
 80054ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80054bc:	2302      	movs	r3, #2
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054c0:	f107 031c 	add.w	r3, r7, #28
 80054c4:	4618      	mov	r0, r3
 80054c6:	f003 fbcd 	bl	8008c64 <HAL_RCC_OscConfig>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80054d0:	f000 f906 	bl	80056e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80054d4:	f003 fb76 	bl	8008bc4 <HAL_PWREx_EnableOverDrive>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80054de:	f000 f8ff 	bl	80056e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054e2:	230f      	movs	r3, #15
 80054e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054e6:	2302      	movs	r3, #2
 80054e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80054ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80054f8:	f107 0308 	add.w	r3, r7, #8
 80054fc:	2103      	movs	r1, #3
 80054fe:	4618      	mov	r0, r3
 8005500:	f003 fe5e 	bl	80091c0 <HAL_RCC_ClockConfig>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800550a:	f000 f8e9 	bl	80056e0 <Error_Handler>
  }
}
 800550e:	bf00      	nop
 8005510:	3750      	adds	r7, #80	; 0x50
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	40007000 	.word	0x40007000

08005520 <sensorGyroInit>:

/* USER CODE BEGIN 4 */
static void sensorGyroInit(struct gyroDev_s *gyro) { }
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <sensorGyroRead>:

static bool sensorGyroRead(struct gyroDev_s *gyro) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(binSemaphoreGyrHandle, osWaitForever)==osOK){
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <sensorGyroRead+0x50>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f04f 31ff 	mov.w	r1, #4294967295
 8005544:	4618      	mov	r0, r3
 8005546:	f006 f8d9 	bl	800b6fc <osSemaphoreAcquire>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d113      	bne.n	8005578 <sensorGyroRead+0x44>
		gyro->gyroADC[0] = gyroscope.x;
 8005550:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <sensorGyroRead+0x54>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		gyro->gyroADC[1] = gyroscope.y;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <sensorGyroRead+0x54>)
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		gyro->gyroADC[2] = gyroscope.z;
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <sensorGyroRead+0x54>)
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		osSemaphoreRelease(binSemaphoreGyrHandle);
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <sensorGyroRead+0x50>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f006 f928 	bl	800b7c8 <osSemaphoreRelease>
	}
	return true;
 8005578:	2301      	movs	r3, #1
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	200004f0 	.word	0x200004f0
 8005588:	200009cc 	.word	0x200009cc

0800558c <sensorAccInit>:

static void sensorAccInit(struct accDev_s *acc) { }
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <sensorAccRead>:

static bool sensorAccRead(struct accDev_s *acc) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(binSemaphoreAccMeanHandle, 0)==osOK){
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <sensorAccRead+0x48>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2100      	movs	r1, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	f006 f8a4 	bl	800b6fc <osSemaphoreAcquire>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d110      	bne.n	80055dc <sensorAccRead+0x3c>
		acc->accADC[0] = accellerometer_mean.x;
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <sensorAccRead+0x4c>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	611a      	str	r2, [r3, #16]
		acc->accADC[1] = accellerometer_mean.y;
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <sensorAccRead+0x4c>)
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	615a      	str	r2, [r3, #20]
		acc->accADC[2] = accellerometer_mean.z;
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <sensorAccRead+0x4c>)
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	619a      	str	r2, [r3, #24]
		osSemaphoreRelease(binSemaphoreAccMeanHandle);
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <sensorAccRead+0x48>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f006 f8f6 	bl	800b7c8 <osSemaphoreRelease>
	}
	return true;
 80055dc:	2301      	movs	r3, #1
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	200004fc 	.word	0x200004fc
 80055ec:	200004b8 	.word	0x200004b8

080055f0 <sensorMagInit>:

static void sensorMagInit(struct magDev_s *mag) { }
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <sensorMagRead>:

static bool sensorMagRead(struct magDev_s *mag) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(binSemaphoreMagHandle, 0)==osOK){
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <sensorMagRead+0x48>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f006 f872 	bl	800b6fc <osSemaphoreAcquire>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d110      	bne.n	8005640 <sensorMagRead+0x3c>
		mag->magADC[0] = magnetometer.x;
 800561e:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <sensorMagRead+0x4c>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
		mag->magADC[1] = magnetometer.y;
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <sensorMagRead+0x4c>)
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	605a      	str	r2, [r3, #4]
		mag->magADC[2] = magnetometer.z;
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <sensorMagRead+0x4c>)
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	609a      	str	r2, [r3, #8]
		osSemaphoreRelease(binSemaphoreMagHandle);
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <sensorMagRead+0x48>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f006 f8c4 	bl	800b7c8 <osSemaphoreRelease>
	}
	return true;
 8005640:	2301      	movs	r3, #1
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200004ec 	.word	0x200004ec
 8005650:	200009b4 	.word	0x200009b4

08005654 <sensorBaroInit>:

static void sensorBaroInit(struct baroDev_s *baro) {
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	baro->baroADC = 0;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <sensorBaroRead>:

static bool sensorBaroRead(struct baroDev_s *baro) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(binSemaphorePresHandle, 0)==osOK){
 8005678:	4b0e      	ldr	r3, [pc, #56]	; (80056b4 <sensorBaroRead+0x44>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f006 f83c 	bl	800b6fc <osSemaphoreAcquire>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10e      	bne.n	80056a8 <sensorBaroRead+0x38>
		baro->baroADC = pressure;
 800568a:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <sensorBaroRead+0x48>)
 800568c:	edd3 7a00 	vldr	s15, [r3]
 8005690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005694:	ee17 2a90 	vmov	r2, s15
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		osSemaphoreRelease(binSemaphorePresHandle);
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <sensorBaroRead+0x44>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f006 f890 	bl	800b7c8 <osSemaphoreRelease>
	}
	return true;
 80056a8:	2301      	movs	r3, #1
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200004f4 	.word	0x200004f4
 80056b8:	20000980 	.word	0x20000980

080056bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80056ce:	f002 f845 	bl	800775c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000

080056e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056e4:	b672      	cpsid	i
}
 80056e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056e8:	e7fe      	b.n	80056e8 <Error_Handler+0x8>

080056ea <constrain>:
#define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
#define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
#define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)

static inline int constrain(int amt, int low, int high)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	da01      	bge.n	8005702 <constrain+0x18>
        return low;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	e006      	b.n	8005710 <constrain+0x26>
    else if (amt > high)
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	dd01      	ble.n	800570e <constrain+0x24>
        return high;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	e000      	b.n	8005710 <constrain+0x26>
    else
        return amt;
 800570e:	68fb      	ldr	r3, [r7, #12]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	ed87 0a03 	vstr	s0, [r7, #12]
 8005726:	edc7 0a02 	vstr	s1, [r7, #8]
 800572a:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 800572e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005732:	edd7 7a02 	vldr	s15, [r7, #8]
 8005736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	d501      	bpl.n	8005744 <constrainf+0x28>
        return low;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	e00b      	b.n	800575c <constrainf+0x40>
    else if (amt > high)
 8005744:	ed97 7a03 	vldr	s14, [r7, #12]
 8005748:	edd7 7a01 	vldr	s15, [r7, #4]
 800574c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005754:	dd01      	ble.n	800575a <constrainf+0x3e>
        return high;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	e000      	b.n	800575c <constrainf+0x40>
    else
        return amt;
 800575a:	68fb      	ldr	r3, [r7, #12]
}
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eeb0 0a67 	vmov.f32	s0, s15
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <isUsingSticksForArming>:
static float applyActualRates(const int, float, const float);
typedef float (*applyRatesFn)(const int axis, float rcCommandf, const float rcCommandfAbs);
static applyRatesFn applyRates = applyActualRates;

static bool isUsingSticksForArming(void)
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0
    return true;
 8005772:	2301      	movs	r3, #1
}
 8005774:	4618      	mov	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <pidAntiGravityEnabled>:

static bool pidAntiGravityEnabled(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
    return pidRuntime.antiGravityEnabled;
 8005784:	4b03      	ldr	r3, [pc, #12]	; (8005794 <pidAntiGravityEnabled+0x14>)
 8005786:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
}
 800578a:	4618      	mov	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	20000ba0 	.word	0x20000ba0

08005798 <pidSetTargetLooptime>:

static void pidSetTargetLooptime(uint32_t pidLooptime)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    targetPidLooptime = pidLooptime;
 80057a0:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <pidSetTargetLooptime+0x48>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6013      	str	r3, [r2, #0]
    pidRuntime.dT = targetPidLooptime * 1e-6f;
 80057a6:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <pidSetTargetLooptime+0x48>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80057e4 <pidSetTargetLooptime+0x4c>
 80057b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <pidSetTargetLooptime+0x50>)
 80057bc:	edc3 7a00 	vstr	s15, [r3]
    pidRuntime.pidFrequency = 1.0f / pidRuntime.dT;
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <pidSetTargetLooptime+0x50>)
 80057c2:	ed93 7a00 	vldr	s14, [r3]
 80057c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <pidSetTargetLooptime+0x50>)
 80057d0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	20000dec 	.word	0x20000dec
 80057e4:	358637bd 	.word	0x358637bd
 80057e8:	20000ba0 	.word	0x20000ba0

080057ec <pidInitFilters>:

static void pidInitFilters(const pidProfile_t *pidProfile)
{
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b091      	sub	sp, #68	; 0x44
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
    if (targetPidLooptime == 0) {
 80057f4:	4bb0      	ldr	r3, [pc, #704]	; (8005ab8 <pidInitFilters+0x2cc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <pidInitFilters+0x30>
        // no looptime set, so set all the filters to null
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 80057fc:	4baf      	ldr	r3, [pc, #700]	; (8005abc <pidInitFilters+0x2d0>)
 80057fe:	4ab0      	ldr	r2, [pc, #704]	; (8005ac0 <pidInitFilters+0x2d4>)
 8005800:	619a      	str	r2, [r3, #24]
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8005802:	4bae      	ldr	r3, [pc, #696]	; (8005abc <pidInitFilters+0x2d0>)
 8005804:	4aae      	ldr	r2, [pc, #696]	; (8005ac0 <pidInitFilters+0x2d4>)
 8005806:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 800580a:	4bac      	ldr	r3, [pc, #688]	; (8005abc <pidInitFilters+0x2d0>)
 800580c:	4aac      	ldr	r2, [pc, #688]	; (8005ac0 <pidInitFilters+0x2d4>)
 800580e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 8005812:	4baa      	ldr	r3, [pc, #680]	; (8005abc <pidInitFilters+0x2d0>)
 8005814:	4aaa      	ldr	r2, [pc, #680]	; (8005ac0 <pidInitFilters+0x2d4>)
 8005816:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        return;
 800581a:	e267      	b.n	8005cec <pidInitFilters+0x500>
    }

    const uint32_t pidFrequencyNyquist = pidRuntime.pidFrequency / 2; // No rounding needed
 800581c:	4ba7      	ldr	r3, [pc, #668]	; (8005abc <pidInitFilters+0x2d0>)
 800581e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005822:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800582a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800582e:	ee17 3a90 	vmov	r3, s15
 8005832:	617b      	str	r3, [r7, #20]

    uint16_t dTermNotchHz;
    if (pidProfile->dterm_notch_hz <= pidFrequencyNyquist) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	889b      	ldrh	r3, [r3, #4]
 8005838:	461a      	mov	r2, r3
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4293      	cmp	r3, r2
 800583e:	d303      	bcc.n	8005848 <pidInitFilters+0x5c>
        dTermNotchHz = pidProfile->dterm_notch_hz;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	889b      	ldrh	r3, [r3, #4]
 8005844:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005846:	e00a      	b.n	800585e <pidInitFilters+0x72>
    } else {
        if (pidProfile->dterm_notch_cutoff < pidFrequencyNyquist) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	88db      	ldrh	r3, [r3, #6]
 800584c:	461a      	mov	r2, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4293      	cmp	r3, r2
 8005852:	d902      	bls.n	800585a <pidInitFilters+0x6e>
            dTermNotchHz = pidFrequencyNyquist;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005858:	e001      	b.n	800585e <pidInitFilters+0x72>
        } else {
            dTermNotchHz = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }
    }

    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 800585e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005860:	2b00      	cmp	r3, #0
 8005862:	d03d      	beq.n	80058e0 <pidInitFilters+0xf4>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	88db      	ldrh	r3, [r3, #6]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d039      	beq.n	80058e0 <pidInitFilters+0xf4>
        pidRuntime.dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 800586c:	4b93      	ldr	r3, [pc, #588]	; (8005abc <pidInitFilters+0x2d0>)
 800586e:	4a95      	ldr	r2, [pc, #596]	; (8005ac4 <pidInitFilters+0x2d8>)
 8005870:	619a      	str	r2, [r3, #24]
        const float notchQ = filterGetNotchQ(dTermNotchHz, pidProfile->dterm_notch_cutoff);
 8005872:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	88db      	ldrh	r3, [r3, #6]
 8005880:	ee07 3a10 	vmov	s14, r3
 8005884:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005888:	eef0 0a47 	vmov.f32	s1, s14
 800588c:	eeb0 0a67 	vmov.f32	s0, s15
 8005890:	f7fb fa48 	bl	8000d24 <filterGetNotchQ>
 8005894:	ed87 0a04 	vstr	s0, [r7, #16]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005898:	2300      	movs	r3, #0
 800589a:	63bb      	str	r3, [r7, #56]	; 0x38
 800589c:	e01c      	b.n	80058d8 <pidInitFilters+0xec>
            biquadFilterInit(&pidRuntime.dtermNotch[axis], dTermNotchHz, targetPidLooptime, notchQ, FILTER_NOTCH, 1.0f);
 800589e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	3318      	adds	r3, #24
 80058aa:	4a84      	ldr	r2, [pc, #528]	; (8005abc <pidInitFilters+0x2d0>)
 80058ac:	4413      	add	r3, r2
 80058ae:	3304      	adds	r3, #4
 80058b0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80058b2:	ee07 2a90 	vmov	s15, r2
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	4a7f      	ldr	r2, [pc, #508]	; (8005ab8 <pidInitFilters+0x2cc>)
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80058c2:	2201      	movs	r2, #1
 80058c4:	edd7 0a04 	vldr	s1, [r7, #16]
 80058c8:	eeb0 0a67 	vmov.f32	s0, s15
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fb fabb 	bl	8000e48 <biquadFilterInit>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	3301      	adds	r3, #1
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	2b02      	cmp	r3, #2
 80058dc:	dddf      	ble.n	800589e <pidInitFilters+0xb2>
    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 80058de:	e002      	b.n	80058e6 <pidInitFilters+0xfa>
        }
    } else {
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 80058e0:	4b76      	ldr	r3, [pc, #472]	; (8005abc <pidInitFilters+0x2d0>)
 80058e2:	4a77      	ldr	r2, [pc, #476]	; (8005ac0 <pidInitFilters+0x2d4>)
 80058e4:	619a      	str	r2, [r3, #24]
    }

    //1st Dterm Lowpass Filter
    uint16_t dterm_lpf1_init_hz = pidProfile->dterm_lpf1_static_hz;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	81fb      	strh	r3, [r7, #14]

    if (dterm_lpf1_init_hz > 0) {
 80058ec:	89fb      	ldrh	r3, [r7, #14]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80c6 	beq.w	8005a80 <pidInitFilters+0x294>
        switch (pidProfile->dterm_lpf1_type) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	f200 80bb 	bhi.w	8005a76 <pidInitFilters+0x28a>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <pidInitFilters+0x11c>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005919 	.word	0x08005919
 800590c:	0800596f 	.word	0x0800596f
 8005910:	080059cb 	.word	0x080059cb
 8005914:	08005a21 	.word	0x08005a21
        case FILTER_PT1:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8005918:	4b68      	ldr	r3, [pc, #416]	; (8005abc <pidInitFilters+0x2d0>)
 800591a:	4a6b      	ldr	r2, [pc, #428]	; (8005ac8 <pidInitFilters+0x2dc>)
 800591c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005920:	2300      	movs	r3, #0
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
 8005924:	e01f      	b.n	8005966 <pidInitFilters+0x17a>
                pt1FilterInit(&pidRuntime.dtermLowpass[axis].pt1Filter, pt1FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8005926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	3398      	adds	r3, #152	; 0x98
 8005932:	4a62      	ldr	r2, [pc, #392]	; (8005abc <pidInitFilters+0x2d0>)
 8005934:	189c      	adds	r4, r3, r2
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	ee07 3a90 	vmov	s15, r3
 800593c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005940:	4b5e      	ldr	r3, [pc, #376]	; (8005abc <pidInitFilters+0x2d0>)
 8005942:	ed93 7a00 	vldr	s14, [r3]
 8005946:	eef0 0a47 	vmov.f32	s1, s14
 800594a:	eeb0 0a67 	vmov.f32	s0, s15
 800594e:	f7fb fa1b 	bl	8000d88 <pt1FilterGain>
 8005952:	eef0 7a40 	vmov.f32	s15, s0
 8005956:	eeb0 0a67 	vmov.f32	s0, s15
 800595a:	4620      	mov	r0, r4
 800595c:	f7fb fa3c 	bl	8000dd8 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005962:	3301      	adds	r3, #1
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
 8005966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005968:	2b02      	cmp	r3, #2
 800596a:	dddc      	ble.n	8005926 <pidInitFilters+0x13a>
            }
            break;
 800596c:	e08c      	b.n	8005a88 <pidInitFilters+0x29c>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf1_static_hz < pidFrequencyNyquist) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	885b      	ldrh	r3, [r3, #2]
 8005972:	461a      	mov	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4293      	cmp	r3, r2
 8005978:	d922      	bls.n	80059c0 <pidInitFilters+0x1d4>
                pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)biquadFilterApply;
 800597a:	4b50      	ldr	r3, [pc, #320]	; (8005abc <pidInitFilters+0x2d0>)
 800597c:	4a51      	ldr	r2, [pc, #324]	; (8005ac4 <pidInitFilters+0x2d8>)
 800597e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005982:	2300      	movs	r3, #0
 8005984:	633b      	str	r3, [r7, #48]	; 0x30
 8005986:	e017      	b.n	80059b8 <pidInitFilters+0x1cc>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass[axis].biquadFilter, dterm_lpf1_init_hz, targetPidLooptime);
 8005988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	3398      	adds	r3, #152	; 0x98
 8005994:	4a49      	ldr	r2, [pc, #292]	; (8005abc <pidInitFilters+0x2d0>)
 8005996:	4413      	add	r3, r2
 8005998:	89fa      	ldrh	r2, [r7, #14]
 800599a:	ee07 2a90 	vmov	s15, r2
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	4a45      	ldr	r2, [pc, #276]	; (8005ab8 <pidInitFilters+0x2cc>)
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	4611      	mov	r1, r2
 80059a8:	eeb0 0a67 	vmov.f32	s0, s15
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fb fa79 	bl	8000ea4 <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	3301      	adds	r3, #1
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	dde4      	ble.n	8005988 <pidInitFilters+0x19c>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 80059be:	e063      	b.n	8005a88 <pidInitFilters+0x29c>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 80059c0:	4b3e      	ldr	r3, [pc, #248]	; (8005abc <pidInitFilters+0x2d0>)
 80059c2:	4a3f      	ldr	r2, [pc, #252]	; (8005ac0 <pidInitFilters+0x2d4>)
 80059c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 80059c8:	e05e      	b.n	8005a88 <pidInitFilters+0x29c>
        case FILTER_PT2:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt2FilterApply;
 80059ca:	4b3c      	ldr	r3, [pc, #240]	; (8005abc <pidInitFilters+0x2d0>)
 80059cc:	4a3f      	ldr	r2, [pc, #252]	; (8005acc <pidInitFilters+0x2e0>)
 80059ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80059d2:	2300      	movs	r3, #0
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d6:	e01f      	b.n	8005a18 <pidInitFilters+0x22c>
                pt2FilterInit(&pidRuntime.dtermLowpass[axis].pt2Filter, pt2FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 80059d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	3398      	adds	r3, #152	; 0x98
 80059e4:	4a35      	ldr	r2, [pc, #212]	; (8005abc <pidInitFilters+0x2d0>)
 80059e6:	189c      	adds	r4, r3, r2
 80059e8:	89fb      	ldrh	r3, [r7, #14]
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f2:	4b32      	ldr	r3, [pc, #200]	; (8005abc <pidInitFilters+0x2d0>)
 80059f4:	ed93 7a00 	vldr	s14, [r3]
 80059f8:	eef0 0a47 	vmov.f32	s1, s14
 80059fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005a00:	f7fb fba2 	bl	8001148 <pt2FilterGain>
 8005a04:	eef0 7a40 	vmov.f32	s15, s0
 8005a08:	eeb0 0a67 	vmov.f32	s0, s15
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f7fb fbe9 	bl	80011e4 <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	3301      	adds	r3, #1
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	dddc      	ble.n	80059d8 <pidInitFilters+0x1ec>
            }
            break;
 8005a1e:	e033      	b.n	8005a88 <pidInitFilters+0x29c>
        case FILTER_PT3:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8005a20:	4b26      	ldr	r3, [pc, #152]	; (8005abc <pidInitFilters+0x2d0>)
 8005a22:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <pidInitFilters+0x2e4>)
 8005a24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2c:	e01f      	b.n	8005a6e <pidInitFilters+0x282>
                pt3FilterInit(&pidRuntime.dtermLowpass[axis].pt3Filter, pt3FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8005a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	3398      	adds	r3, #152	; 0x98
 8005a3a:	4a20      	ldr	r2, [pc, #128]	; (8005abc <pidInitFilters+0x2d0>)
 8005a3c:	189c      	adds	r4, r3, r2
 8005a3e:	89fb      	ldrh	r3, [r7, #14]
 8005a40:	ee07 3a90 	vmov	s15, r3
 8005a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a48:	4b1c      	ldr	r3, [pc, #112]	; (8005abc <pidInitFilters+0x2d0>)
 8005a4a:	ed93 7a00 	vldr	s14, [r3]
 8005a4e:	eef0 0a47 	vmov.f32	s1, s14
 8005a52:	eeb0 0a67 	vmov.f32	s0, s15
 8005a56:	f7fb fc17 	bl	8001288 <pt3FilterGain>
 8005a5a:	eef0 7a40 	vmov.f32	s15, s0
 8005a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a62:	4620      	mov	r0, r4
 8005a64:	f7fb fc5e 	bl	8001324 <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	dddc      	ble.n	8005a2e <pidInitFilters+0x242>
            }
            break;
 8005a74:	e008      	b.n	8005a88 <pidInitFilters+0x29c>
        default:
            pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <pidInitFilters+0x2d0>)
 8005a78:	4a11      	ldr	r2, [pc, #68]	; (8005ac0 <pidInitFilters+0x2d4>)
 8005a7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8005a7e:	e003      	b.n	8005a88 <pidInitFilters+0x29c>
        }
    } else {
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8005a80:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <pidInitFilters+0x2d0>)
 8005a82:	4a0f      	ldr	r2, [pc, #60]	; (8005ac0 <pidInitFilters+0x2d4>)
 8005a84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    //2nd Dterm Lowpass Filter
    if (pidProfile->dterm_lpf2_static_hz > 0) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80e5 	beq.w	8005c5e <pidInitFilters+0x472>
        switch (pidProfile->dterm_lpf2_type) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	f200 80da 	bhi.w	8005c54 <pidInitFilters+0x468>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <pidInitFilters+0x2bc>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	08005b33 	.word	0x08005b33
 8005ab0:	08005b99 	.word	0x08005b99
 8005ab4:	08005bf7 	.word	0x08005bf7
 8005ab8:	20000dec 	.word	0x20000dec
 8005abc:	20000ba0 	.word	0x20000ba0
 8005ac0:	08000d69 	.word	0x08000d69
 8005ac4:	08000ed5 	.word	0x08000ed5
 8005ac8:	08000dff 	.word	0x08000dff
 8005acc:	08001213 	.word	0x08001213
 8005ad0:	0800135b 	.word	0x0800135b
        case FILTER_PT1:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8005ad4:	4b87      	ldr	r3, [pc, #540]	; (8005cf4 <pidInitFilters+0x508>)
 8005ad6:	4a88      	ldr	r2, [pc, #544]	; (8005cf8 <pidInitFilters+0x50c>)
 8005ad8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005adc:	2300      	movs	r3, #0
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae0:	e023      	b.n	8005b2a <pidInitFilters+0x33e>
                pt1FilterInit(&pidRuntime.dtermLowpass2[axis].pt1Filter, pt1FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8005ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005af0:	4a80      	ldr	r2, [pc, #512]	; (8005cf4 <pidInitFilters+0x508>)
 8005af2:	4413      	add	r3, r2
 8005af4:	1d1c      	adds	r4, r3, #4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b04:	4b7b      	ldr	r3, [pc, #492]	; (8005cf4 <pidInitFilters+0x508>)
 8005b06:	ed93 7a00 	vldr	s14, [r3]
 8005b0a:	eef0 0a47 	vmov.f32	s1, s14
 8005b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b12:	f7fb f939 	bl	8000d88 <pt1FilterGain>
 8005b16:	eef0 7a40 	vmov.f32	s15, s0
 8005b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7fb f95a 	bl	8000dd8 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	3301      	adds	r3, #1
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	ddd8      	ble.n	8005ae2 <pidInitFilters+0x2f6>
            }
            break;
 8005b30:	e099      	b.n	8005c66 <pidInitFilters+0x47a>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf2_static_hz < pidFrequencyNyquist) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005b38:	461a      	mov	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d926      	bls.n	8005b8e <pidInitFilters+0x3a2>
                pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8005b40:	4b6c      	ldr	r3, [pc, #432]	; (8005cf4 <pidInitFilters+0x508>)
 8005b42:	4a6e      	ldr	r2, [pc, #440]	; (8005cfc <pidInitFilters+0x510>)
 8005b44:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005b48:	2300      	movs	r3, #0
 8005b4a:	623b      	str	r3, [r7, #32]
 8005b4c:	e01b      	b.n	8005b86 <pidInitFilters+0x39a>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass2[axis].biquadFilter, pidProfile->dterm_lpf2_static_hz, targetPidLooptime);
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005b5c:	4a65      	ldr	r2, [pc, #404]	; (8005cf4 <pidInitFilters+0x508>)
 8005b5e:	4413      	add	r3, r2
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b70:	4b63      	ldr	r3, [pc, #396]	; (8005d00 <pidInitFilters+0x514>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4619      	mov	r1, r3
 8005b76:	eeb0 0a67 	vmov.f32	s0, s15
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f7fb f992 	bl	8000ea4 <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	3301      	adds	r3, #1
 8005b84:	623b      	str	r3, [r7, #32]
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	dde0      	ble.n	8005b4e <pidInitFilters+0x362>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8005b8c:	e06b      	b.n	8005c66 <pidInitFilters+0x47a>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8005b8e:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <pidInitFilters+0x508>)
 8005b90:	4a5c      	ldr	r2, [pc, #368]	; (8005d04 <pidInitFilters+0x518>)
 8005b92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8005b96:	e066      	b.n	8005c66 <pidInitFilters+0x47a>
        case FILTER_PT2:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8005b98:	4b56      	ldr	r3, [pc, #344]	; (8005cf4 <pidInitFilters+0x508>)
 8005b9a:	4a5b      	ldr	r2, [pc, #364]	; (8005d08 <pidInitFilters+0x51c>)
 8005b9c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	e023      	b.n	8005bee <pidInitFilters+0x402>
                pt2FilterInit(&pidRuntime.dtermLowpass2[axis].pt2Filter, pt2FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005bb4:	4a4f      	ldr	r2, [pc, #316]	; (8005cf4 <pidInitFilters+0x508>)
 8005bb6:	4413      	add	r3, r2
 8005bb8:	1d1c      	adds	r4, r3, #4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc8:	4b4a      	ldr	r3, [pc, #296]	; (8005cf4 <pidInitFilters+0x508>)
 8005bca:	ed93 7a00 	vldr	s14, [r3]
 8005bce:	eef0 0a47 	vmov.f32	s1, s14
 8005bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd6:	f7fb fab7 	bl	8001148 <pt2FilterGain>
 8005bda:	eef0 7a40 	vmov.f32	s15, s0
 8005bde:	eeb0 0a67 	vmov.f32	s0, s15
 8005be2:	4620      	mov	r0, r4
 8005be4:	f7fb fafe 	bl	80011e4 <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	3301      	adds	r3, #1
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	ddd8      	ble.n	8005ba6 <pidInitFilters+0x3ba>
            }
            break;
 8005bf4:	e037      	b.n	8005c66 <pidInitFilters+0x47a>
        case FILTER_PT3:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8005bf6:	4b3f      	ldr	r3, [pc, #252]	; (8005cf4 <pidInitFilters+0x508>)
 8005bf8:	4a44      	ldr	r2, [pc, #272]	; (8005d0c <pidInitFilters+0x520>)
 8005bfa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e023      	b.n	8005c4c <pidInitFilters+0x460>
                pt3FilterInit(&pidRuntime.dtermLowpass2[axis].pt3Filter, pt3FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005c12:	4a38      	ldr	r2, [pc, #224]	; (8005cf4 <pidInitFilters+0x508>)
 8005c14:	4413      	add	r3, r2
 8005c16:	1d1c      	adds	r4, r3, #4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	4b33      	ldr	r3, [pc, #204]	; (8005cf4 <pidInitFilters+0x508>)
 8005c28:	ed93 7a00 	vldr	s14, [r3]
 8005c2c:	eef0 0a47 	vmov.f32	s1, s14
 8005c30:	eeb0 0a67 	vmov.f32	s0, s15
 8005c34:	f7fb fb28 	bl	8001288 <pt3FilterGain>
 8005c38:	eef0 7a40 	vmov.f32	s15, s0
 8005c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c40:	4620      	mov	r0, r4
 8005c42:	f7fb fb6f 	bl	8001324 <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	ddd8      	ble.n	8005c04 <pidInitFilters+0x418>
            }
            break;
 8005c52:	e008      	b.n	8005c66 <pidInitFilters+0x47a>
        default:
            pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8005c54:	4b27      	ldr	r3, [pc, #156]	; (8005cf4 <pidInitFilters+0x508>)
 8005c56:	4a2b      	ldr	r2, [pc, #172]	; (8005d04 <pidInitFilters+0x518>)
 8005c58:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            break;
 8005c5c:	e003      	b.n	8005c66 <pidInitFilters+0x47a>
        }
    } else {
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8005c5e:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <pidInitFilters+0x508>)
 8005c60:	4a28      	ldr	r2, [pc, #160]	; (8005d04 <pidInitFilters+0x518>)
 8005c62:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    }

    if (pidProfile->yaw_lowpass_hz == 0) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <pidInitFilters+0x48c>
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 8005c6e:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <pidInitFilters+0x508>)
 8005c70:	4a24      	ldr	r2, [pc, #144]	; (8005d04 <pidInitFilters+0x518>)
 8005c72:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8005c76:	e019      	b.n	8005cac <pidInitFilters+0x4c0>
    } else {
        pidRuntime.ptermYawLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8005c78:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <pidInitFilters+0x508>)
 8005c7a:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <pidInitFilters+0x50c>)
 8005c7c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        pt1FilterInit(&pidRuntime.ptermYawLowpass, pt1FilterGain(pidProfile->yaw_lowpass_hz, pidRuntime.dT));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8c:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <pidInitFilters+0x508>)
 8005c8e:	ed93 7a00 	vldr	s14, [r3]
 8005c92:	eef0 0a47 	vmov.f32	s1, s14
 8005c96:	eeb0 0a67 	vmov.f32	s0, s15
 8005c9a:	f7fb f875 	bl	8000d88 <pt1FilterGain>
 8005c9e:	eef0 7a40 	vmov.f32	s15, s0
 8005ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ca6:	481a      	ldr	r0, [pc, #104]	; (8005d10 <pidInitFilters+0x524>)
 8005ca8:	f7fb f896 	bl	8000dd8 <pt1FilterInit>
    }

    pt1FilterInit(&pidRuntime.antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, pidRuntime.dT));
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <pidInitFilters+0x508>)
 8005cae:	edd3 7a00 	vldr	s15, [r3]
 8005cb2:	eef0 0a67 	vmov.f32	s1, s15
 8005cb6:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8005cba:	f7fb f865 	bl	8000d88 <pt1FilterGain>
 8005cbe:	eef0 7a40 	vmov.f32	s15, s0
 8005cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc6:	4813      	ldr	r0, [pc, #76]	; (8005d14 <pidInitFilters+0x528>)
 8005cc8:	f7fb f886 	bl	8000dd8 <pt1FilterInit>
    pt1FilterInit(&pidRuntime.antiGravitySmoothLpf, pt1FilterGain(ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF, pidRuntime.dT));
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <pidInitFilters+0x508>)
 8005cce:	edd3 7a00 	vldr	s15, [r3]
 8005cd2:	eef0 0a67 	vmov.f32	s1, s15
 8005cd6:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005cda:	f7fb f855 	bl	8000d88 <pt1FilterGain>
 8005cde:	eef0 7a40 	vmov.f32	s15, s0
 8005ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ce6:	480c      	ldr	r0, [pc, #48]	; (8005d18 <pidInitFilters+0x52c>)
 8005ce8:	f7fb f876 	bl	8000dd8 <pt1FilterInit>
}
 8005cec:	3744      	adds	r7, #68	; 0x44
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd90      	pop	{r4, r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000ba0 	.word	0x20000ba0
 8005cf8:	08000dff 	.word	0x08000dff
 8005cfc:	08000ed5 	.word	0x08000ed5
 8005d00:	20000dec 	.word	0x20000dec
 8005d04:	08000d69 	.word	0x08000d69
 8005d08:	08001213 	.word	0x08001213
 8005d0c:	0800135b 	.word	0x0800135b
 8005d10:	20000d30 	.word	0x20000d30
 8005d14:	20000d3c 	.word	0x20000d3c
 8005d18:	20000d44 	.word	0x20000d44

08005d1c <pidInitConfig>:

static void pidInitConfig(const pidProfile_t *pidProfile)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e069      	b.n	8005dfe <pidInitConfig+0xe2>
        pidRuntime.pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	4413      	add	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	440b      	add	r3, r1
 8005d38:	3308      	adds	r3, #8
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d44:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8006078 <pidInitConfig+0x35c>
 8005d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d4c:	4acb      	ldr	r2, [pc, #812]	; (800607c <pidInitConfig+0x360>)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	331c      	adds	r3, #28
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	4413      	add	r3, r2
 8005d56:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Ki = ITERM_SCALE * pidProfile->pid[axis].I;
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	4413      	add	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	440b      	add	r3, r1
 8005d68:	3309      	adds	r3, #9
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	ee07 3a90 	vmov	s15, r3
 8005d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d74:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8006080 <pidInitConfig+0x364>
 8005d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d7c:	4abf      	ldr	r2, [pc, #764]	; (800607c <pidInitConfig+0x360>)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	331c      	adds	r3, #28
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kd = DTERM_SCALE * pidProfile->pid[axis].D;
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4613      	mov	r3, r2
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	4413      	add	r3, r2
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	440b      	add	r3, r1
 8005d9a:	330a      	adds	r3, #10
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005da6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8006084 <pidInitConfig+0x368>
 8005daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dae:	4ab3      	ldr	r2, [pc, #716]	; (800607c <pidInitConfig+0x360>)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005dba:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kf = FEEDFORWARD_SCALE * (pidProfile->pid[axis].F / 100.0f);
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	440b      	add	r3, r1
 8005dcc:	330c      	adds	r3, #12
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dd8:	eddf 6aab 	vldr	s13, [pc, #684]	; 8006088 <pidInitConfig+0x36c>
 8005ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005de0:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800608c <pidInitConfig+0x370>
 8005de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de8:	4aa4      	ldr	r2, [pc, #656]	; (800607c <pidInitConfig+0x360>)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8005df4:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	dd92      	ble.n	8005d2a <pidInitConfig+0xe>
    }
    {
        pidRuntime.pidCoefficient[FD_YAW].Ki *= 2.5f;
 8005e04:	4b9d      	ldr	r3, [pc, #628]	; (800607c <pidInitConfig+0x360>)
 8005e06:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8005e0a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8005e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e12:	4b9a      	ldr	r3, [pc, #616]	; (800607c <pidInitConfig+0x360>)
 8005e14:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
    }
    pidRuntime.levelGain = pidProfile->pid[PID_LEVEL].P / 10.0f;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	7e9b      	ldrb	r3, [r3, #26]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e24:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e2c:	4b93      	ldr	r3, [pc, #588]	; (800607c <pidInitConfig+0x360>)
 8005e2e:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
    pidRuntime.horizonGain = pidProfile->pid[PID_LEVEL].I / 10.0f;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	7edb      	ldrb	r3, [r3, #27]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e3e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e46:	4b8d      	ldr	r3, [pc, #564]	; (800607c <pidInitConfig+0x360>)
 8005e48:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4
    pidRuntime.horizonTransition = (float)pidProfile->pid[PID_LEVEL].D;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	7f1b      	ldrb	r3, [r3, #28]
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e58:	4b88      	ldr	r3, [pc, #544]	; (800607c <pidInitConfig+0x360>)
 8005e5a:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
    pidRuntime.horizonTiltExpertMode = pidProfile->horizon_tilt_expert_mode;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005e64:	4b85      	ldr	r3, [pc, #532]	; (800607c <pidInitConfig+0x360>)
 8005e66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    pidRuntime.horizonCutoffDegrees = (175 - pidProfile->horizon_tilt_effect) * 1.8f;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005e70:	f1c3 03af 	rsb	r3, r3, #175	; 0xaf
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e7c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006090 <pidInitConfig+0x374>
 8005e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e84:	4b7d      	ldr	r3, [pc, #500]	; (800607c <pidInitConfig+0x360>)
 8005e86:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
    pidRuntime.horizonFactorRatio = (100 - pidProfile->horizon_tilt_effect) * 0.01f;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005e90:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e9c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8006094 <pidInitConfig+0x378>
 8005ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ea4:	4b75      	ldr	r3, [pc, #468]	; (800607c <pidInitConfig+0x360>)
 8005ea6:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
    pidRuntime.maxVelocity[FD_ROLL] = pidRuntime.maxVelocity[FD_PITCH] = pidProfile->rateAccelLimit * 100 * pidRuntime.dT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005eae:	461a      	mov	r2, r3
 8005eb0:	2364      	movs	r3, #100	; 0x64
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ebe:	4b6f      	ldr	r3, [pc, #444]	; (800607c <pidInitConfig+0x360>)
 8005ec0:	edd3 7a00 	vldr	s15, [r3]
 8005ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec8:	4b6c      	ldr	r3, [pc, #432]	; (800607c <pidInitConfig+0x360>)
 8005eca:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
 8005ece:	4b6b      	ldr	r3, [pc, #428]	; (800607c <pidInitConfig+0x360>)
 8005ed0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005ed4:	4a69      	ldr	r2, [pc, #420]	; (800607c <pidInitConfig+0x360>)
 8005ed6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    pidRuntime.maxVelocity[FD_YAW] = pidProfile->yawRateAccelLimit * 100 * pidRuntime.dT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2364      	movs	r3, #100	; 0x64
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eee:	4b63      	ldr	r3, [pc, #396]	; (800607c <pidInitConfig+0x360>)
 8005ef0:	edd3 7a00 	vldr	s15, [r3]
 8005ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef8:	4b60      	ldr	r3, [pc, #384]	; (800607c <pidInitConfig+0x360>)
 8005efa:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
    pidRuntime.itermWindupPointInv = 1.0f;
 8005efe:	4b5f      	ldr	r3, [pc, #380]	; (800607c <pidInitConfig+0x360>)
 8005f00:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (pidProfile->itermWindupPointPercent < 100) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005f0e:	2b63      	cmp	r3, #99	; 0x63
 8005f10:	d819      	bhi.n	8005f46 <pidInitConfig+0x22a>
        const float itermWindupPoint = pidProfile->itermWindupPointPercent / 100.0f;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f20:	eddf 6a59 	vldr	s13, [pc, #356]	; 8006088 <pidInitConfig+0x36c>
 8005f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f28:	edc7 7a02 	vstr	s15, [r7, #8]
        pidRuntime.itermWindupPointInv = 1.0f / (1.0f - itermWindupPoint);
 8005f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f30:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f40:	4b4e      	ldr	r3, [pc, #312]	; (800607c <pidInitConfig+0x360>)
 8005f42:	edc3 7a85 	vstr	s15, [r3, #532]	; 0x214
    }
    pidRuntime.itermAcceleratorGain = pidProfile->itermAcceleratorGain;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005f4a:	4b4c      	ldr	r3, [pc, #304]	; (800607c <pidInitConfig+0x360>)
 8005f4c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
    pidRuntime.crashTimeLimitUs = pidProfile->crash_time * 1000;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f56:	461a      	mov	r2, r3
 8005f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f5c:	fb02 f303 	mul.w	r3, r2, r3
 8005f60:	4a46      	ldr	r2, [pc, #280]	; (800607c <pidInitConfig+0x360>)
 8005f62:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    pidRuntime.crashTimeDelayUs = pidProfile->crash_delay * 1000;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	4a41      	ldr	r2, [pc, #260]	; (800607c <pidInitConfig+0x360>)
 8005f78:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
    pidRuntime.crashRecoveryAngleDeciDegrees = pidProfile->crash_recovery_angle * 10;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f82:	461a      	mov	r2, r3
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4b3b      	ldr	r3, [pc, #236]	; (800607c <pidInitConfig+0x360>)
 8005f90:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    pidRuntime.crashRecoveryRate = pidProfile->crash_recovery_rate;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	4b36      	ldr	r3, [pc, #216]	; (800607c <pidInitConfig+0x360>)
 8005fa4:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
    pidRuntime.crashGyroThreshold = pidProfile->crash_gthreshold;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	4b31      	ldr	r3, [pc, #196]	; (800607c <pidInitConfig+0x360>)
 8005fb6:	edc3 7a8c 	vstr	s15, [r3, #560]	; 0x230
    pidRuntime.crashDtermThreshold = pidProfile->crash_dthreshold;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	4b2d      	ldr	r3, [pc, #180]	; (800607c <pidInitConfig+0x360>)
 8005fc8:	edc3 7a8d 	vstr	s15, [r3, #564]	; 0x234
    pidRuntime.crashSetpointThreshold = pidProfile->crash_setpoint_threshold;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd0:	ee07 3a90 	vmov	s15, r3
 8005fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd8:	4b28      	ldr	r3, [pc, #160]	; (800607c <pidInitConfig+0x360>)
 8005fda:	edc3 7a8e 	vstr	s15, [r3, #568]	; 0x238
    pidRuntime.crashLimitYaw = pidProfile->crash_limit_yaw;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fec:	4b23      	ldr	r3, [pc, #140]	; (800607c <pidInitConfig+0x360>)
 8005fee:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
    pidRuntime.itermLimit = pidProfile->itermLimit;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <pidInitConfig+0x360>)
 8006002:	edc3 7a90 	vstr	s15, [r3, #576]	; 0x240
    pidRuntime.itermRotation = pidProfile->iterm_rotation;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 800600c:	4b1b      	ldr	r3, [pc, #108]	; (800607c <pidInitConfig+0x360>)
 800600e:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
    pidRuntime.antiGravityMode = pidProfile->antiGravityMode;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006018:	4b18      	ldr	r3, [pc, #96]	; (800607c <pidInitConfig+0x360>)
 800601a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
    // Calculate the anti-gravity value that will trigger the OSD display.
    // For classic AG it's either 1.0 for off and > 1.0 for on.
    // For the new AG it's a continuous floating value so we want to trigger the OSD
    // display when it exceeds 25% of its possible range. This gives a useful indication
    // of AG activity without excessive display.
    pidRuntime.antiGravityOsdCutoff = 0.0f;
 800601e:	4b17      	ldr	r3, [pc, #92]	; (800607c <pidInitConfig+0x360>)
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    if (pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <pidInitConfig+0x360>)
 800602a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800602e:	2b00      	cmp	r3, #0
 8006030:	d116      	bne.n	8006060 <pidInitConfig+0x344>
        pidRuntime.antiGravityOsdCutoff += (pidRuntime.itermAcceleratorGain / 1000.0f) * 0.25f;
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <pidInitConfig+0x360>)
 8006034:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <pidInitConfig+0x360>)
 800603a:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006046:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006098 <pidInitConfig+0x37c>
 800604a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800604e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8006052:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800605a:	4b08      	ldr	r3, [pc, #32]	; (800607c <pidInitConfig+0x360>)
 800605c:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
    }

    pidRuntime.levelRaceMode = pidProfile->level_race_mode;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <pidInitConfig+0x360>)
 8006068:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	3d0330d7 	.word	0x3d0330d7
 800607c:	20000ba0 	.word	0x20000ba0
 8006080:	3e7a3f03 	.word	0x3e7a3f03
 8006084:	3a0aac97 	.word	0x3a0aac97
 8006088:	42c80000 	.word	0x42c80000
 800608c:	3c615875 	.word	0x3c615875
 8006090:	3fe66666 	.word	0x3fe66666
 8006094:	3c23d70a 	.word	0x3c23d70a
 8006098:	447a0000 	.word	0x447a0000

0800609c <resetPidProfile>:

static void resetPidProfile(pidProfile_t *pidProfile)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
    RESET_CONFIG(pidProfile_t, pidProfile,
 80060a4:	2294      	movs	r2, #148	; 0x94
 80060a6:	4907      	ldr	r1, [pc, #28]	; (80060c4 <resetPidProfile+0x28>)
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f008 fe0a 	bl	800ecc2 <memcpy>
        .simplified_pitch_pi_gain = SIMPLIFIED_TUNING_DEFAULT,
        .simplified_dterm_filter = true,
        .simplified_dterm_filter_multiplier = SIMPLIFIED_TUNING_DEFAULT,
    );

    pidProfile->pid[PID_ROLL].D = 30;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	221e      	movs	r2, #30
 80060b2:	729a      	strb	r2, [r3, #10]
    pidProfile->pid[PID_PITCH].D = 32;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	741a      	strb	r2, [r3, #16]
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	08011db8 	.word	0x08011db8

080060c8 <pidInit>:

void pidInit(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
	resetPidProfile(currentPidProfile);
 80060ce:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <pidInit+0xb8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff ffe2 	bl	800609c <resetPidProfile>
    pidSetTargetLooptime(gyro.targetLooptime);
 80060d8:	4b2a      	ldr	r3, [pc, #168]	; (8006184 <pidInit+0xbc>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fb5b 	bl	8005798 <pidSetTargetLooptime>
    pidInitFilters(currentPidProfile);
 80060e2:	4b27      	ldr	r3, [pc, #156]	; (8006180 <pidInit+0xb8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fb80 	bl	80057ec <pidInitFilters>
    pidInitConfig(currentPidProfile);
 80060ec:	4b24      	ldr	r3, [pc, #144]	; (8006180 <pidInit+0xb8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fe13 	bl	8005d1c <pidInitConfig>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80060f6:	2300      	movs	r3, #0
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	e038      	b.n	800616e <pidInit+0xa6>
        pidData[axis].P = 0.0f;
 80060fc:	4922      	ldr	r1, [pc, #136]	; (8006188 <pidInit+0xc0>)
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
        pidData[axis].I = 0.0f;
 8006110:	491d      	ldr	r1, [pc, #116]	; (8006188 <pidInit+0xc0>)
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	3304      	adds	r3, #4
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
        pidData[axis].D = 0.0f;
 8006126:	4918      	ldr	r1, [pc, #96]	; (8006188 <pidInit+0xc0>)
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	3308      	adds	r3, #8
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
        pidData[axis].F = 0.0f;
 800613c:	4912      	ldr	r1, [pc, #72]	; (8006188 <pidInit+0xc0>)
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	330c      	adds	r3, #12
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
        pidData[axis].Sum = 0.0f;
 8006152:	490d      	ldr	r1, [pc, #52]	; (8006188 <pidInit+0xc0>)
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3310      	adds	r3, #16
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3301      	adds	r3, #1
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b02      	cmp	r3, #2
 8006172:	ddc3      	ble.n	80060fc <pidInit+0x34>
    }
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	2000003c 	.word	0x2000003c
 8006184:	20000500 	.word	0x20000500
 8006188:	20000dfc 	.word	0x20000dfc

0800618c <rotateItermAndAxisError>:

static void rotateItermAndAxisError()
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	; 0x28
 8006190:	af00      	add	r7, sp, #0
    if (pidRuntime.itermRotation
 8006192:	4b35      	ldr	r3, [pc, #212]	; (8006268 <rotateItermAndAxisError+0xdc>)
 8006194:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8006198:	2b00      	cmp	r3, #0
 800619a:	d060      	beq.n	800625e <rotateItermAndAxisError+0xd2>
        ) {
        const float gyroToAngle = pidRuntime.dT * RAD;
 800619c:	4b32      	ldr	r3, [pc, #200]	; (8006268 <rotateItermAndAxisError+0xdc>)
 800619e:	edd3 7a00 	vldr	s15, [r3]
 80061a2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800626c <rotateItermAndAxisError+0xe0>
 80061a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061aa:	edc7 7a06 	vstr	s15, [r7, #24]
        float rotationRads[XYZ_AXIS_COUNT];
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 80061ae:	2300      	movs	r3, #0
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
 80061b2:	e015      	b.n	80061e0 <rotateItermAndAxisError+0x54>
            rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 80061b4:	4a2e      	ldr	r2, [pc, #184]	; (8006270 <rotateItermAndAxisError+0xe4>)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	3306      	adds	r3, #6
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	3304      	adds	r3, #4
 80061c0:	ed93 7a00 	vldr	s14, [r3]
 80061c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80061c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	3328      	adds	r3, #40	; 0x28
 80061d2:	443b      	add	r3, r7
 80061d4:	3b1c      	subs	r3, #28
 80061d6:	edc3 7a00 	vstr	s15, [r3]
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	3301      	adds	r3, #1
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	dde6      	ble.n	80061b4 <rotateItermAndAxisError+0x28>
        }
        if (pidRuntime.itermRotation) {
 80061e6:	4b20      	ldr	r3, [pc, #128]	; (8006268 <rotateItermAndAxisError+0xdc>)
 80061e8:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d036      	beq.n	800625e <rotateItermAndAxisError+0xd2>
            float v[XYZ_AXIS_COUNT];
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80061f0:	2300      	movs	r3, #0
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	e011      	b.n	800621a <rotateItermAndAxisError+0x8e>
                v[i] = pidData[i].I;
 80061f6:	491f      	ldr	r1, [pc, #124]	; (8006274 <rotateItermAndAxisError+0xe8>)
 80061f8:	6a3a      	ldr	r2, [r7, #32]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	3304      	adds	r3, #4
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	3328      	adds	r3, #40	; 0x28
 800620e:	443b      	add	r3, r7
 8006210:	3b28      	subs	r3, #40	; 0x28
 8006212:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	3301      	adds	r3, #1
 8006218:	623b      	str	r3, [r7, #32]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	2b02      	cmp	r3, #2
 800621e:	ddea      	ble.n	80061f6 <rotateItermAndAxisError+0x6a>
            }
            rotateVector(v, rotationRads);
 8006220:	f107 020c 	add.w	r2, r7, #12
 8006224:	463b      	mov	r3, r7
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f7fb fac5 	bl	80017b8 <rotateVector>
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e011      	b.n	8006258 <rotateItermAndAxisError+0xcc>
                pidData[i].I = v[i];
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	3328      	adds	r3, #40	; 0x28
 800623a:	443b      	add	r3, r7
 800623c:	3b28      	subs	r3, #40	; 0x28
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	480c      	ldr	r0, [pc, #48]	; (8006274 <rotateItermAndAxisError+0xe8>)
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4403      	add	r3, r0
 800624e:	3304      	adds	r3, #4
 8006250:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b02      	cmp	r3, #2
 800625c:	ddea      	ble.n	8006234 <rotateItermAndAxisError+0xa8>
            }
        }
    }
}
 800625e:	bf00      	nop
 8006260:	3728      	adds	r7, #40	; 0x28
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000ba0 	.word	0x20000ba0
 800626c:	3c8efa35 	.word	0x3c8efa35
 8006270:	20000500 	.word	0x20000500
 8006274:	20000dfc 	.word	0x20000dfc

08006278 <getSetpointRate>:

static float getSetpointRate(int axis)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
    return rawSetpoint[axis];
 8006280:	4a06      	ldr	r2, [pc, #24]	; (800629c <getSetpointRate+0x24>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	ee07 3a90 	vmov	s15, r3
}
 800628e:	eeb0 0a67 	vmov.f32	s0, s15
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	20000df0 	.word	0x20000df0

080062a0 <accelerationLimit>:

static float accelerationLimit(int axis, float currentPidSetpoint)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	ed87 0a00 	vstr	s0, [r7]
    static float previousSetpoint[XYZ_AXIS_COUNT];
    const float currentVelocity = currentPidSetpoint - previousSetpoint[axis];
 80062ac:	4a29      	ldr	r2, [pc, #164]	; (8006354 <accelerationLimit+0xb4>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	edd3 7a00 	vldr	s15, [r3]
 80062b8:	ed97 7a00 	vldr	s14, [r7]
 80062bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062c0:	edc7 7a03 	vstr	s15, [r7, #12]

    if (fabsf(currentVelocity) > pidRuntime.maxVelocity[axis]) {
 80062c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80062c8:	eeb0 7ae7 	vabs.f32	s14, s15
 80062cc:	4a22      	ldr	r2, [pc, #136]	; (8006358 <accelerationLimit+0xb8>)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3382      	adds	r3, #130	; 0x82
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	edd3 7a00 	vldr	s15, [r3]
 80062da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e2:	dd27      	ble.n	8006334 <accelerationLimit+0x94>
        currentPidSetpoint = (currentVelocity > 0) ? previousSetpoint[axis] + pidRuntime.maxVelocity[axis] : previousSetpoint[axis] - pidRuntime.maxVelocity[axis];
 80062e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80062e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f0:	dd0f      	ble.n	8006312 <accelerationLimit+0x72>
 80062f2:	4a18      	ldr	r2, [pc, #96]	; (8006354 <accelerationLimit+0xb4>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	ed93 7a00 	vldr	s14, [r3]
 80062fe:	4a16      	ldr	r2, [pc, #88]	; (8006358 <accelerationLimit+0xb8>)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3382      	adds	r3, #130	; 0x82
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	edd3 7a00 	vldr	s15, [r3]
 800630c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006310:	e00e      	b.n	8006330 <accelerationLimit+0x90>
 8006312:	4a10      	ldr	r2, [pc, #64]	; (8006354 <accelerationLimit+0xb4>)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	ed93 7a00 	vldr	s14, [r3]
 800631e:	4a0e      	ldr	r2, [pc, #56]	; (8006358 <accelerationLimit+0xb8>)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3382      	adds	r3, #130	; 0x82
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	edd3 7a00 	vldr	s15, [r3]
 800632c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006330:	edc7 7a00 	vstr	s15, [r7]
    }

    previousSetpoint[axis] = currentPidSetpoint;
 8006334:	4a07      	ldr	r2, [pc, #28]	; (8006354 <accelerationLimit+0xb4>)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	601a      	str	r2, [r3, #0]
    return currentPidSetpoint;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	ee07 3a90 	vmov	s15, r3
}
 8006346:	eeb0 0a67 	vmov.f32	s0, s15
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	20000ee4 	.word	0x20000ee4
 8006358:	20000ba0 	.word	0x20000ba0

0800635c <pidResetIterm>:

static void pidResetIterm(void)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < 3; axis++) {
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
 8006366:	e00d      	b.n	8006384 <pidResetIterm+0x28>
        pidData[axis].I = 0.0f;
 8006368:	490b      	ldr	r1, [pc, #44]	; (8006398 <pidResetIterm+0x3c>)
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	3304      	adds	r3, #4
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < 3; axis++) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3301      	adds	r3, #1
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b02      	cmp	r3, #2
 8006388:	ddee      	ble.n	8006368 <pidResetIterm+0xc>
    }
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	20000dfc 	.word	0x20000dfc

0800639c <pidController>:

void pidController(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b09c      	sub	sp, #112	; 0x70
 80063a0:	af00      	add	r7, sp, #0
    static float previousGyroRateDterm[XYZ_AXIS_COUNT];

    const float tpaFactorKp = pidRuntime.tpaFactor;
 80063a2:	4bbd      	ldr	r3, [pc, #756]	; (8006698 <pidController+0x2fc>)
 80063a4:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80063a8:	65bb      	str	r3, [r7, #88]	; 0x58

    const bool launchControlActive = false;
 80063aa:	2300      	movs	r3, #0
 80063ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Dynamic i component,
    if ((pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) && pidRuntime.antiGravityEnabled) {
 80063b0:	4bb9      	ldr	r3, [pc, #740]	; (8006698 <pidController+0x2fc>)
 80063b2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d140      	bne.n	800643c <pidController+0xa0>
 80063ba:	4bb7      	ldr	r3, [pc, #732]	; (8006698 <pidController+0x2fc>)
 80063bc:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d03b      	beq.n	800643c <pidController+0xa0>
        // traditional itermAccelerator factor for iTerm
        pidRuntime.itermAccelerator = pidRuntime.antiGravityThrottleHpf * 0.01f * pidRuntime.itermAcceleratorGain;
 80063c4:	4bb4      	ldr	r3, [pc, #720]	; (8006698 <pidController+0x2fc>)
 80063c6:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 80063ca:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800669c <pidController+0x300>
 80063ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063d2:	4bb1      	ldr	r3, [pc, #708]	; (8006698 <pidController+0x2fc>)
 80063d4:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 80063d8:	ee07 3a90 	vmov	s15, r3
 80063dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e4:	4bac      	ldr	r3, [pc, #688]	; (8006698 <pidController+0x2fc>)
 80063e6:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // users AG Gain changes P boost
        pidRuntime.antiGravityPBoost *= pidRuntime.itermAcceleratorGain;
 80063ea:	4bab      	ldr	r3, [pc, #684]	; (8006698 <pidController+0x2fc>)
 80063ec:	ed93 7a6d 	vldr	s14, [r3, #436]	; 0x1b4
 80063f0:	4ba9      	ldr	r3, [pc, #676]	; (8006698 <pidController+0x2fc>)
 80063f2:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006402:	4ba5      	ldr	r3, [pc, #660]	; (8006698 <pidController+0x2fc>)
 8006404:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
        // add some percentage of that slower, longer acting P boost factor to prolong AG effect on iTerm
        pidRuntime.itermAccelerator += pidRuntime.antiGravityPBoost * 0.05f;
 8006408:	4ba3      	ldr	r3, [pc, #652]	; (8006698 <pidController+0x2fc>)
 800640a:	ed93 7a6e 	vldr	s14, [r3, #440]	; 0x1b8
 800640e:	4ba2      	ldr	r3, [pc, #648]	; (8006698 <pidController+0x2fc>)
 8006410:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8006414:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80066a0 <pidController+0x304>
 8006418:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800641c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006420:	4b9d      	ldr	r3, [pc, #628]	; (8006698 <pidController+0x2fc>)
 8006422:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // set the final P boost amount
        pidRuntime.antiGravityPBoost *= 0.02f;
 8006426:	4b9c      	ldr	r3, [pc, #624]	; (8006698 <pidController+0x2fc>)
 8006428:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 800642c:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80066a4 <pidController+0x308>
 8006430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006434:	4b98      	ldr	r3, [pc, #608]	; (8006698 <pidController+0x2fc>)
 8006436:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
 800643a:	e004      	b.n	8006446 <pidController+0xaa>
    } else {
        pidRuntime.antiGravityPBoost = 0.0f;
 800643c:	4b96      	ldr	r3, [pc, #600]	; (8006698 <pidController+0x2fc>)
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }

    float agGain = pidRuntime.dT * pidRuntime.itermAccelerator * AG_KI;
 8006446:	4b94      	ldr	r3, [pc, #592]	; (8006698 <pidController+0x2fc>)
 8006448:	ed93 7a00 	vldr	s14, [r3]
 800644c:	4b92      	ldr	r3, [pc, #584]	; (8006698 <pidController+0x2fc>)
 800644e:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8006452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006456:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80066a8 <pidController+0x30c>
 800645a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800645e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    // gradually scale back integration when above windup point
    float dynCi = pidRuntime.dT;
 8006462:	4b8d      	ldr	r3, [pc, #564]	; (8006698 <pidController+0x2fc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (pidRuntime.itermWindupPointInv > 1.0f) {
 8006468:	4b8b      	ldr	r3, [pc, #556]	; (8006698 <pidController+0x2fc>)
 800646a:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 800646e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647a:	dd1b      	ble.n	80064b4 <pidController+0x118>
        dynCi *= constrainf((1.0f - motorMixRange) * pidRuntime.itermWindupPointInv, 0.0f, 1.0f);
 800647c:	4b8b      	ldr	r3, [pc, #556]	; (80066ac <pidController+0x310>)
 800647e:	edd3 7a00 	vldr	s15, [r3]
 8006482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006486:	ee37 7a67 	vsub.f32	s14, s14, s15
 800648a:	4b83      	ldr	r3, [pc, #524]	; (8006698 <pidController+0x2fc>)
 800648c:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8006490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006494:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006498:	eddf 0a85 	vldr	s1, [pc, #532]	; 80066b0 <pidController+0x314>
 800649c:	eeb0 0a67 	vmov.f32	s0, s15
 80064a0:	f7ff f93c 	bl	800571c <constrainf>
 80064a4:	eeb0 7a40 	vmov.f32	s14, s0
 80064a8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80064ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064b0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Precalculate gyro data for D-term here, this allows loop unrolling
    float gyroRateDterm[XYZ_AXIS_COUNT];
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 80064b4:	2300      	movs	r3, #0
 80064b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064b8:	e06e      	b.n	8006598 <pidController+0x1fc>
        gyroRateDterm[axis] = gyro.gyroADCf[axis];
 80064ba:	4a7e      	ldr	r2, [pc, #504]	; (80066b4 <pidController+0x318>)
 80064bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064be:	3306      	adds	r3, #6
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	3370      	adds	r3, #112	; 0x70
 80064ce:	443b      	add	r3, r7
 80064d0:	3b6c      	subs	r3, #108	; 0x6c
 80064d2:	601a      	str	r2, [r3, #0]

        gyroRateDterm[axis] = pidRuntime.dtermNotchApplyFn((filter_t *) &pidRuntime.dtermNotch[axis], gyroRateDterm[axis]);
 80064d4:	4b70      	ldr	r3, [pc, #448]	; (8006698 <pidController+0x2fc>)
 80064d6:	6999      	ldr	r1, [r3, #24]
 80064d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	3318      	adds	r3, #24
 80064e4:	4a6c      	ldr	r2, [pc, #432]	; (8006698 <pidController+0x2fc>)
 80064e6:	4413      	add	r3, r2
 80064e8:	1d1a      	adds	r2, r3, #4
 80064ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	3370      	adds	r3, #112	; 0x70
 80064f0:	443b      	add	r3, r7
 80064f2:	3b6c      	subs	r3, #108	; 0x6c
 80064f4:	edd3 7a00 	vldr	s15, [r3]
 80064f8:	eeb0 0a67 	vmov.f32	s0, s15
 80064fc:	4610      	mov	r0, r2
 80064fe:	4788      	blx	r1
 8006500:	eef0 7a40 	vmov.f32	s15, s0
 8006504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	3370      	adds	r3, #112	; 0x70
 800650a:	443b      	add	r3, r7
 800650c:	3b6c      	subs	r3, #108	; 0x6c
 800650e:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpassApplyFn((filter_t *) &pidRuntime.dtermLowpass[axis], gyroRateDterm[axis]);
 8006512:	4b61      	ldr	r3, [pc, #388]	; (8006698 <pidController+0x2fc>)
 8006514:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006518:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	3398      	adds	r3, #152	; 0x98
 8006524:	4a5c      	ldr	r2, [pc, #368]	; (8006698 <pidController+0x2fc>)
 8006526:	441a      	add	r2, r3
 8006528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	3370      	adds	r3, #112	; 0x70
 800652e:	443b      	add	r3, r7
 8006530:	3b6c      	subs	r3, #108	; 0x6c
 8006532:	edd3 7a00 	vldr	s15, [r3]
 8006536:	eeb0 0a67 	vmov.f32	s0, s15
 800653a:	4610      	mov	r0, r2
 800653c:	4788      	blx	r1
 800653e:	eef0 7a40 	vmov.f32	s15, s0
 8006542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	3370      	adds	r3, #112	; 0x70
 8006548:	443b      	add	r3, r7
 800654a:	3b6c      	subs	r3, #108	; 0x6c
 800654c:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpass2ApplyFn((filter_t *) &pidRuntime.dtermLowpass2[axis], gyroRateDterm[axis]);
 8006550:	4b51      	ldr	r3, [pc, #324]	; (8006698 <pidController+0x2fc>)
 8006552:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8006556:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006564:	4a4c      	ldr	r2, [pc, #304]	; (8006698 <pidController+0x2fc>)
 8006566:	4413      	add	r3, r2
 8006568:	1d1a      	adds	r2, r3, #4
 800656a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	3370      	adds	r3, #112	; 0x70
 8006570:	443b      	add	r3, r7
 8006572:	3b6c      	subs	r3, #108	; 0x6c
 8006574:	edd3 7a00 	vldr	s15, [r3]
 8006578:	eeb0 0a67 	vmov.f32	s0, s15
 800657c:	4610      	mov	r0, r2
 800657e:	4788      	blx	r1
 8006580:	eef0 7a40 	vmov.f32	s15, s0
 8006584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	3370      	adds	r3, #112	; 0x70
 800658a:	443b      	add	r3, r7
 800658c:	3b6c      	subs	r3, #108	; 0x6c
 800658e:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8006592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006594:	3301      	adds	r3, #1
 8006596:	66bb      	str	r3, [r7, #104]	; 0x68
 8006598:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800659a:	2b02      	cmp	r3, #2
 800659c:	dd8d      	ble.n	80064ba <pidController+0x11e>
    }

    rotateItermAndAxisError();
 800659e:	f7ff fdf5 	bl	800618c <rotateItermAndAxisError>

    // ----------PID controller----------
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 80065a2:	2300      	movs	r3, #0
 80065a4:	667b      	str	r3, [r7, #100]	; 0x64
 80065a6:	e1e4      	b.n	8006972 <pidController+0x5d6>

        float currentPidSetpoint = getSetpointRate(axis);
 80065a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80065aa:	f7ff fe65 	bl	8006278 <getSetpointRate>
 80065ae:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        if (pidRuntime.maxVelocity[axis]) {
 80065b2:	4a39      	ldr	r2, [pc, #228]	; (8006698 <pidController+0x2fc>)
 80065b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065b6:	3382      	adds	r3, #130	; 0x82
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	edd3 7a00 	vldr	s15, [r3]
 80065c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c8:	d006      	beq.n	80065d8 <pidController+0x23c>
            currentPidSetpoint = accelerationLimit(axis, currentPidSetpoint);
 80065ca:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 80065ce:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80065d0:	f7ff fe66 	bl	80062a0 <accelerationLimit>
 80065d4:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        // Yaw control is GYRO based, direct sticks control is applied to rate PID
        // When Race Mode is active PITCH control is also GYRO based in level or horizon mode


        // -----calculate error rate
        const float gyroRate = gyro.gyroADCf[axis]; // Process variable from gyro output in deg/sec
 80065d8:	4a36      	ldr	r2, [pc, #216]	; (80066b4 <pidController+0x318>)
 80065da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065dc:	3306      	adds	r3, #6
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	3304      	adds	r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	64fb      	str	r3, [r7, #76]	; 0x4c
        float errorRate = currentPidSetpoint - gyroRate; // r - y
 80065e8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80065ec:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80065f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        const float previousIterm = pidData[axis].I;
 80065f8:	492f      	ldr	r1, [pc, #188]	; (80066b8 <pidController+0x31c>)
 80065fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	3304      	adds	r3, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	647b      	str	r3, [r7, #68]	; 0x44
        float itermErrorRate = errorRate;
 800660c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660e:	643b      	str	r3, [r7, #64]	; 0x40
        // --------low-level gyro-based PID based on 2DOF PID controller. ----------
        // 2-DOF PID controller with optional filter on derivative term.
        // b = 1 and only c (feedforward weight) can be tuned (amount derivative on measurement or error).

        // -----calculate P component
        pidData[axis].P = pidRuntime.pidCoefficient[axis].Kp * errorRate * tpaFactorKp;
 8006610:	4a21      	ldr	r2, [pc, #132]	; (8006698 <pidController+0x2fc>)
 8006612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006614:	331c      	adds	r3, #28
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	4413      	add	r3, r2
 800661a:	ed93 7a00 	vldr	s14, [r3]
 800661e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006626:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800662a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662e:	4922      	ldr	r1, [pc, #136]	; (80066b8 <pidController+0x31c>)
 8006630:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	440b      	add	r3, r1
 800663c:	edc3 7a00 	vstr	s15, [r3]
        if (axis == FD_YAW) {
 8006640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006642:	2b02      	cmp	r3, #2
 8006644:	d11a      	bne.n	800667c <pidController+0x2e0>
            pidData[axis].P = pidRuntime.ptermYawLowpassApplyFn((filter_t *) &pidRuntime.ptermYawLowpass, pidData[axis].P);
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <pidController+0x2fc>)
 8006648:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 800664c:	481a      	ldr	r0, [pc, #104]	; (80066b8 <pidController+0x31c>)
 800664e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4403      	add	r3, r0
 800665a:	edd3 7a00 	vldr	s15, [r3]
 800665e:	eeb0 0a67 	vmov.f32	s0, s15
 8006662:	4816      	ldr	r0, [pc, #88]	; (80066bc <pidController+0x320>)
 8006664:	4788      	blx	r1
 8006666:	eef0 7a40 	vmov.f32	s15, s0
 800666a:	4913      	ldr	r1, [pc, #76]	; (80066b8 <pidController+0x31c>)
 800666c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate I component
        float Ki;
        float axisDynCi;
        {
            Ki = pidRuntime.pidCoefficient[axis].Ki;
 800667c:	4a06      	ldr	r2, [pc, #24]	; (8006698 <pidController+0x2fc>)
 800667e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006680:	331c      	adds	r3, #28
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	4413      	add	r3, r2
 8006686:	3304      	adds	r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
            axisDynCi = (axis == FD_YAW) ? dynCi : pidRuntime.dT; // only apply windup protection to yaw
 800668c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668e:	2b02      	cmp	r3, #2
 8006690:	d016      	beq.n	80066c0 <pidController+0x324>
 8006692:	4b01      	ldr	r3, [pc, #4]	; (8006698 <pidController+0x2fc>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	e014      	b.n	80066c2 <pidController+0x326>
 8006698:	20000ba0 	.word	0x20000ba0
 800669c:	3c23d70a 	.word	0x3c23d70a
 80066a0:	3d4ccccd 	.word	0x3d4ccccd
 80066a4:	3ca3d70a 	.word	0x3ca3d70a
 80066a8:	41acb227 	.word	0x41acb227
 80066ac:	20000e38 	.word	0x20000e38
 80066b0:	00000000 	.word	0x00000000
 80066b4:	20000500 	.word	0x20000500
 80066b8:	20000dfc 	.word	0x20000dfc
 80066bc:	20000d30 	.word	0x20000d30
 80066c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        pidData[axis].I = constrainf(previousIterm + (Ki * axisDynCi + agGain) * itermErrorRate, -pidRuntime.itermLimit, pidRuntime.itermLimit);
 80066c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80066c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80066cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066d0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80066d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80066dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80066e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066e8:	4baa      	ldr	r3, [pc, #680]	; (8006994 <pidController+0x5f8>)
 80066ea:	edd3 7a90 	vldr	s15, [r3, #576]	; 0x240
 80066ee:	eef1 7a67 	vneg.f32	s15, s15
 80066f2:	4ba8      	ldr	r3, [pc, #672]	; (8006994 <pidController+0x5f8>)
 80066f4:	edd3 6a90 	vldr	s13, [r3, #576]	; 0x240
 80066f8:	eeb0 1a66 	vmov.f32	s2, s13
 80066fc:	eef0 0a67 	vmov.f32	s1, s15
 8006700:	eeb0 0a47 	vmov.f32	s0, s14
 8006704:	f7ff f80a 	bl	800571c <constrainf>
 8006708:	eef0 7a40 	vmov.f32	s15, s0
 800670c:	49a2      	ldr	r1, [pc, #648]	; (8006998 <pidController+0x5fc>)
 800670e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	440b      	add	r3, r1
 800671a:	3304      	adds	r3, #4
 800671c:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate pidSetpointDelta
        float pidSetpointDelta = 0;
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
        pidRuntime.previousPidSetpoint[axis] = currentPidSetpoint;
 8006726:	4a9b      	ldr	r2, [pc, #620]	; (8006994 <pidController+0x5f8>)
 8006728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672a:	3302      	adds	r3, #2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	3304      	adds	r3, #4
 8006732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006734:	601a      	str	r2, [r3, #0]

        // -----calculate D component
        // disable D if launch control is active
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 8006736:	4a97      	ldr	r2, [pc, #604]	; (8006994 <pidController+0x5f8>)
 8006738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	4413      	add	r3, r2
 800673e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006742:	edd3 7a00 	vldr	s15, [r3]
 8006746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800674a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674e:	dd43      	ble.n	80067d8 <pidController+0x43c>
 8006750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006754:	2b00      	cmp	r3, #0
 8006756:	d13f      	bne.n	80067d8 <pidController+0x43c>
            // dT is fixed and calculated from the target PID loop time
            // This is done to avoid DTerm spikes that occur with dynamically
            // calculated deltaT whenever another task causes the PID
            // loop execution to be delayed.
            const float delta =
                - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidRuntime.pidFrequency;
 8006758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	3370      	adds	r3, #112	; 0x70
 800675e:	443b      	add	r3, r7
 8006760:	3b6c      	subs	r3, #108	; 0x6c
 8006762:	ed93 7a00 	vldr	s14, [r3]
 8006766:	4a8d      	ldr	r2, [pc, #564]	; (800699c <pidController+0x600>)
 8006768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	edd3 7a00 	vldr	s15, [r3]
 8006772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006776:	eeb1 7a67 	vneg.f32	s14, s15
 800677a:	4b86      	ldr	r3, [pc, #536]	; (8006994 <pidController+0x5f8>)
 800677c:	edd3 7a01 	vldr	s15, [r3, #4]
            const float delta =
 8006780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006784:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            float preTpaD = pidRuntime.pidCoefficient[axis].Kd * delta;
 8006788:	4a82      	ldr	r2, [pc, #520]	; (8006994 <pidController+0x5f8>)
 800678a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	4413      	add	r3, r2
 8006790:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006794:	edd3 7a00 	vldr	s15, [r3]
 8006798:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800679c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            pidData[axis].D = preTpaD * pidRuntime.tpaFactor;
 80067a4:	4b7b      	ldr	r3, [pc, #492]	; (8006994 <pidController+0x5f8>)
 80067a6:	ed93 7a92 	vldr	s14, [r3, #584]	; 0x248
 80067aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80067ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b2:	4979      	ldr	r1, [pc, #484]	; (8006998 <pidController+0x5fc>)
 80067b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	3308      	adds	r3, #8
 80067c2:	edc3 7a00 	vstr	s15, [r3]

            // Log the value of D pre application of TPA
            preTpaD *= D_LPF_FILT_SCALE;
 80067c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80067ca:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80067ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 80067d6:	e00a      	b.n	80067ee <pidController+0x452>

        } else {
            pidData[axis].D = 0;
 80067d8:	496f      	ldr	r1, [pc, #444]	; (8006998 <pidController+0x5fc>)
 80067da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	3308      	adds	r3, #8
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]

        }

        previousGyroRateDterm[axis] = gyroRateDterm[axis];
 80067ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	3370      	adds	r3, #112	; 0x70
 80067f4:	443b      	add	r3, r7
 80067f6:	3b6c      	subs	r3, #108	; 0x6c
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4968      	ldr	r1, [pc, #416]	; (800699c <pidController+0x600>)
 80067fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	601a      	str	r2, [r3, #0]

        // -----calculate feedforward component

        // no feedforward in launch control
        float feedforwardGain = launchControlActive ? 0.0f : pidRuntime.pidCoefficient[axis].Kf;
 8006804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006808:	2b00      	cmp	r3, #0
 800680a:	d107      	bne.n	800681c <pidController+0x480>
 800680c:	4a61      	ldr	r2, [pc, #388]	; (8006994 <pidController+0x5f8>)
 800680e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	4413      	add	r3, r2
 8006814:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	e001      	b.n	8006820 <pidController+0x484>
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
        if (feedforwardGain > 0) {
 8006822:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800682a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682e:	dd17      	ble.n	8006860 <pidController+0x4c4>
            // halve feedforward in Level mode since stick sensitivity is weaker by about half
            feedforwardGain *= 1.0f;
            // transition now calculated in feedforward.c when new RC data arrives
            float feedForward = feedforwardGain * pidSetpointDelta * pidRuntime.pidFrequency;
 8006830:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006834:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800683c:	4b55      	ldr	r3, [pc, #340]	; (8006994 <pidController+0x5f8>)
 800683e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            pidData[axis].F = feedForward;
 800684a:	4953      	ldr	r1, [pc, #332]	; (8006998 <pidController+0x5fc>)
 800684c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	440b      	add	r3, r1
 8006858:	330c      	adds	r3, #12
 800685a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e00a      	b.n	8006876 <pidController+0x4da>
       } else {
            pidData[axis].F = 0;
 8006860:	494d      	ldr	r1, [pc, #308]	; (8006998 <pidController+0x5fc>)
 8006862:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	330c      	adds	r3, #12
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
        }

        // P boost at the end of throttle chop
        // attenuate effect if turning more than 50 deg/s, half at 100 deg/s
        float agBoostAttenuator = fabsf(currentPidSetpoint) / 50.0f;
 8006876:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800687a:	eeb0 7ae7 	vabs.f32	s14, s15
 800687e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80069a0 <pidController+0x604>
 8006882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006886:	edc7 7a08 	vstr	s15, [r7, #32]
        agBoostAttenuator = MAX(agBoostAttenuator, 1.0f);
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	ed97 7a07 	vldr	s14, [r7, #28]
 8006898:	edd7 7a06 	vldr	s15, [r7, #24]
 800689c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a4:	dd01      	ble.n	80068aa <pidController+0x50e>
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	e000      	b.n	80068ac <pidController+0x510>
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	623b      	str	r3, [r7, #32]
        const float agBoost = 1.0f + (pidRuntime.antiGravityPBoost / agBoostAttenuator);
 80068ae:	4b39      	ldr	r3, [pc, #228]	; (8006994 <pidController+0x5f8>)
 80068b0:	edd3 6a6d 	vldr	s13, [r3, #436]	; 0x1b4
 80068b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80068b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068c4:	edc7 7a05 	vstr	s15, [r7, #20]
        if (axis != FD_YAW) {
 80068c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d015      	beq.n	80068fa <pidController+0x55e>
            pidData[axis].P *= agBoost;
 80068ce:	4932      	ldr	r1, [pc, #200]	; (8006998 <pidController+0x5fc>)
 80068d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	ed93 7a00 	vldr	s14, [r3]
 80068e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80068e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e8:	492b      	ldr	r1, [pc, #172]	; (8006998 <pidController+0x5fc>)
 80068ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	edc3 7a00 	vstr	s15, [r3]
        }

        const float pidSum = pidData[axis].P + pidData[axis].I + pidData[axis].D + pidData[axis].F;
 80068fa:	4927      	ldr	r1, [pc, #156]	; (8006998 <pidController+0x5fc>)
 80068fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	ed93 7a00 	vldr	s14, [r3]
 800690c:	4922      	ldr	r1, [pc, #136]	; (8006998 <pidController+0x5fc>)
 800690e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	3304      	adds	r3, #4
 800691c:	edd3 7a00 	vldr	s15, [r3]
 8006920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006924:	491c      	ldr	r1, [pc, #112]	; (8006998 <pidController+0x5fc>)
 8006926:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	3308      	adds	r3, #8
 8006934:	edd3 7a00 	vldr	s15, [r3]
 8006938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800693c:	4916      	ldr	r1, [pc, #88]	; (8006998 <pidController+0x5fc>)
 800693e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	330c      	adds	r3, #12
 800694c:	edd3 7a00 	vldr	s15, [r3]
 8006950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006954:	edc7 7a04 	vstr	s15, [r7, #16]
        {
            pidData[axis].Sum = pidSum;
 8006958:	490f      	ldr	r1, [pc, #60]	; (8006998 <pidController+0x5fc>)
 800695a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	3310      	adds	r3, #16
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	601a      	str	r2, [r3, #0]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 800696c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696e:	3301      	adds	r3, #1
 8006970:	667b      	str	r3, [r7, #100]	; 0x64
 8006972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006974:	2b02      	cmp	r3, #2
 8006976:	f77f ae17 	ble.w	80065a8 <pidController+0x20c>
        }
    }

    // Disable PID control if at zero throttle or if gyro overflow detected
    // This may look very innefficient, but it is done on purpose to always show real CPU usage as in flight
    if (!pidRuntime.pidStabilisationEnabled || gyroOverflowDetected()) {
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <pidController+0x5f8>)
 800697c:	7a1b      	ldrb	r3, [r3, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <pidController+0x5f0>
 8006982:	f7fc f96f 	bl	8002c64 <gyroOverflowDetected>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d048      	beq.n	8006a1e <pidController+0x682>
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 800698c:	2300      	movs	r3, #0
 800698e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006990:	e041      	b.n	8006a16 <pidController+0x67a>
 8006992:	bf00      	nop
 8006994:	20000ba0 	.word	0x20000ba0
 8006998:	20000dfc 	.word	0x20000dfc
 800699c:	20000ef0 	.word	0x20000ef0
 80069a0:	42480000 	.word	0x42480000
            pidData[axis].P = 0;
 80069a4:	4924      	ldr	r1, [pc, #144]	; (8006a38 <pidController+0x69c>)
 80069a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
            pidData[axis].I = 0;
 80069b8:	491f      	ldr	r1, [pc, #124]	; (8006a38 <pidController+0x69c>)
 80069ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	440b      	add	r3, r1
 80069c6:	3304      	adds	r3, #4
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
            pidData[axis].D = 0;
 80069ce:	491a      	ldr	r1, [pc, #104]	; (8006a38 <pidController+0x69c>)
 80069d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	3308      	adds	r3, #8
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
            pidData[axis].F = 0;
 80069e4:	4914      	ldr	r1, [pc, #80]	; (8006a38 <pidController+0x69c>)
 80069e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069e8:	4613      	mov	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	330c      	adds	r3, #12
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]

            pidData[axis].Sum = 0;
 80069fa:	490f      	ldr	r1, [pc, #60]	; (8006a38 <pidController+0x69c>)
 80069fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	3310      	adds	r3, #16
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8006a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a12:	3301      	adds	r3, #1
 8006a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	ddc3      	ble.n	80069a4 <pidController+0x608>
 8006a1c:	e007      	b.n	8006a2e <pidController+0x692>
        }
    } else if (pidRuntime.zeroThrottleItermReset) {
 8006a1e:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <pidController+0x6a0>)
 8006a20:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <pidController+0x692>
        pidResetIterm();
 8006a28:	f7ff fc98 	bl	800635c <pidResetIterm>
    }
}
 8006a2c:	e7ff      	b.n	8006a2e <pidController+0x692>
 8006a2e:	bf00      	nop
 8006a30:	3770      	adds	r7, #112	; 0x70
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000dfc 	.word	0x20000dfc
 8006a3c:	20000ba0 	.word	0x20000ba0

08006a40 <pidSetItermAccelerator>:


static void pidSetItermAccelerator(float newItermAccelerator)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	ed87 0a01 	vstr	s0, [r7, #4]
    pidRuntime.itermAccelerator = newItermAccelerator;
 8006a4a:	4a05      	ldr	r2, [pc, #20]	; (8006a60 <pidSetItermAccelerator+0x20>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20000ba0 	.word	0x20000ba0

08006a64 <checkForThrottleErrorResetState>:

static void checkForThrottleErrorResetState(uint16_t rxRefreshRate)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	80fb      	strh	r3, [r7, #6]
    static int index;
    static int16_t rcCommandThrottlePrevious[THROTTLE_BUFFER_MAX];

    const int rxRefreshRateMs = rxRefreshRate / 1000;
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	4a35      	ldr	r2, [pc, #212]	; (8006b48 <checkForThrottleErrorResetState+0xe4>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	617b      	str	r3, [r7, #20]
    const int indexMax = constrain(THROTTLE_DELTA_MS / rxRefreshRateMs, 1, THROTTLE_BUFFER_MAX);
 8006a7c:	2264      	movs	r2, #100	; 0x64
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	fb92 f3f3 	sdiv	r3, r2, r3
 8006a84:	2214      	movs	r2, #20
 8006a86:	2101      	movs	r1, #1
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe fe2e 	bl	80056ea <constrain>
 8006a8e:	6138      	str	r0, [r7, #16]
    const int16_t throttleVelocityThreshold =  currentPidProfile->itermThrottleThreshold / 2;
 8006a90:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <checkForThrottleErrorResetState+0xe8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	81fb      	strh	r3, [r7, #14]

    rcCommandThrottlePrevious[index++] = rcCommand[THROTTLE];
 8006a9c:	4b2c      	ldr	r3, [pc, #176]	; (8006b50 <checkForThrottleErrorResetState+0xec>)
 8006a9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aa2:	4b2c      	ldr	r3, [pc, #176]	; (8006b54 <checkForThrottleErrorResetState+0xf0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	492a      	ldr	r1, [pc, #168]	; (8006b54 <checkForThrottleErrorResetState+0xf0>)
 8006aaa:	600a      	str	r2, [r1, #0]
 8006aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ab0:	ee17 2a90 	vmov	r2, s15
 8006ab4:	b211      	sxth	r1, r2
 8006ab6:	4a28      	ldr	r2, [pc, #160]	; (8006b58 <checkForThrottleErrorResetState+0xf4>)
 8006ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    if (index >= indexMax) {
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <checkForThrottleErrorResetState+0xf0>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	dc02      	bgt.n	8006acc <checkForThrottleErrorResetState+0x68>
        index = 0;
 8006ac6:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <checkForThrottleErrorResetState+0xf0>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
    }

    const int16_t rcCommandSpeed = rcCommand[THROTTLE] - rcCommandThrottlePrevious[index];
 8006acc:	4b20      	ldr	r3, [pc, #128]	; (8006b50 <checkForThrottleErrorResetState+0xec>)
 8006ace:	ed93 7a03 	vldr	s14, [r3, #12]
 8006ad2:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <checkForThrottleErrorResetState+0xf0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <checkForThrottleErrorResetState+0xf4>)
 8006ad8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8006adc:	ee07 3a90 	vmov	s15, r3
 8006ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aec:	ee17 3a90 	vmov	r3, s15
 8006af0:	81bb      	strh	r3, [r7, #12]

    if (currentPidProfile->antiGravityMode == ANTI_GRAVITY_STEP) {
 8006af2:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <checkForThrottleErrorResetState+0xe8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d120      	bne.n	8006b40 <checkForThrottleErrorResetState+0xdc>
        if (ABS(rcCommandSpeed) > throttleVelocityThreshold) {
 8006afe:	89bb      	ldrh	r3, [r7, #12]
 8006b00:	817b      	strh	r3, [r7, #10]
 8006b02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bfb8      	it	lt
 8006b0a:	425b      	neglt	r3, r3
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	dd0f      	ble.n	8006b38 <checkForThrottleErrorResetState+0xd4>
            pidSetItermAccelerator(CONVERT_PARAMETER_TO_FLOAT(currentPidProfile->itermAcceleratorGain));
 8006b18:	4b0c      	ldr	r3, [pc, #48]	; (8006b4c <checkForThrottleErrorResetState+0xe8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b26:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006b5c <checkForThrottleErrorResetState+0xf8>
 8006b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8006b32:	f7ff ff85 	bl	8006a40 <pidSetItermAccelerator>
        } else {
            pidSetItermAccelerator(0.0f);
        }
    }
}
 8006b36:	e003      	b.n	8006b40 <checkForThrottleErrorResetState+0xdc>
            pidSetItermAccelerator(0.0f);
 8006b38:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8006b60 <checkForThrottleErrorResetState+0xfc>
 8006b3c:	f7ff ff80 	bl	8006a40 <pidSetItermAccelerator>
}
 8006b40:	bf00      	nop
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	10624dd3 	.word	0x10624dd3
 8006b4c:	2000003c 	.word	0x2000003c
 8006b50:	20000e3c 	.word	0x20000e3c
 8006b54:	20000efc 	.word	0x20000efc
 8006b58:	20000f00 	.word	0x20000f00
 8006b5c:	3a83126f 	.word	0x3a83126f
 8006b60:	00000000 	.word	0x00000000

08006b64 <applyActualRates>:

static float applyActualRates(const int axis, float rcCommandf, const float rcCommandfAbs)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006b70:	edc7 0a01 	vstr	s1, [r7, #4]
    float expof = currentControlRateProfile->rcExpo[axis] / 100.0f;
 8006b74:	4b40      	ldr	r3, [pc, #256]	; (8006c78 <applyActualRates+0x114>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3306      	adds	r3, #6
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b88:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006c7c <applyActualRates+0x118>
 8006b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    expof = rcCommandfAbs * (powf(rcCommandf, 5) * expof + rcCommandf * (1 - expof));
 8006b94:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8006b98:	ed97 0a02 	vldr	s0, [r7, #8]
 8006b9c:	f00a fd48 	bl	8011630 <powf>
 8006ba0:	eeb0 7a40 	vmov.f32	s14, s0
 8006ba4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006bb4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8006bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bcc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    const float centerSensitivity = currentControlRateProfile->rcRates[axis] * 10.0f;
 8006bd0:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <applyActualRates+0x114>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3303      	adds	r3, #3
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006be4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bec:	edc7 7a08 	vstr	s15, [r7, #32]
    const float stickMovement = MAX(0, currentControlRateProfile->rates[axis] * 10.0f - centerSensitivity);
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <applyActualRates+0x114>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3309      	adds	r3, #9
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c10:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c18:	edc7 7a06 	vstr	s15, [r7, #24]
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c26:	ed97 7a06 	vldr	s14, [r7, #24]
 8006c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c32:	d505      	bpl.n	8006c40 <applyActualRates+0xdc>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c3e:	e001      	b.n	8006c44 <applyActualRates+0xe0>
 8006c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c44:	edc7 7a05 	vstr	s15, [r7, #20]
    const float angleRate = rcCommandf * centerSensitivity + stickMovement * expof;
 8006c48:	ed97 7a02 	vldr	s14, [r7, #8]
 8006c4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c54:	edd7 6a05 	vldr	s13, [r7, #20]
 8006c58:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c64:	edc7 7a04 	vstr	s15, [r7, #16]

    return angleRate;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	ee07 3a90 	vmov	s15, r3
}
 8006c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c72:	3728      	adds	r7, #40	; 0x28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	2000004c 	.word	0x2000004c
 8006c7c:	42c80000 	.word	0x42c80000

08006c80 <scaleRawSetpointToFpvCamAngle>:

static void scaleRawSetpointToFpvCamAngle(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
    //recalculate sin/cos only when rxConfig()->fpvCamAngleDegrees changed
    static float cosFactor = 1.0;
    static float sinFactor = 0.0;

    float roll = rawSetpoint[ROLL];
 8006c86:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <scaleRawSetpointToFpvCamAngle+0x90>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	607b      	str	r3, [r7, #4]
    float yaw = rawSetpoint[YAW];
 8006c8c:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <scaleRawSetpointToFpvCamAngle+0x90>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	603b      	str	r3, [r7, #0]
    rawSetpoint[ROLL] = constrainf(roll * cosFactor -  yaw * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8006c92:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <scaleRawSetpointToFpvCamAngle+0x94>)
 8006c94:	ed93 7a00 	vldr	s14, [r3]
 8006c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ca0:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <scaleRawSetpointToFpvCamAngle+0x98>)
 8006ca2:	edd3 6a00 	vldr	s13, [r3]
 8006ca6:	edd7 7a00 	vldr	s15, [r7]
 8006caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cb2:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8006d1c <scaleRawSetpointToFpvCamAngle+0x9c>
 8006cb6:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8006d20 <scaleRawSetpointToFpvCamAngle+0xa0>
 8006cba:	eeb0 0a67 	vmov.f32	s0, s15
 8006cbe:	f7fe fd2d 	bl	800571c <constrainf>
 8006cc2:	eef0 7a40 	vmov.f32	s15, s0
 8006cc6:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <scaleRawSetpointToFpvCamAngle+0x90>)
 8006cc8:	edc3 7a00 	vstr	s15, [r3]
    rawSetpoint[YAW]  = constrainf(yaw  * cosFactor + roll * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <scaleRawSetpointToFpvCamAngle+0x94>)
 8006cce:	ed93 7a00 	vldr	s14, [r3]
 8006cd2:	edd7 7a00 	vldr	s15, [r7]
 8006cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cda:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <scaleRawSetpointToFpvCamAngle+0x98>)
 8006cdc:	edd3 6a00 	vldr	s13, [r3]
 8006ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cec:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8006d1c <scaleRawSetpointToFpvCamAngle+0x9c>
 8006cf0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8006d20 <scaleRawSetpointToFpvCamAngle+0xa0>
 8006cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf8:	f7fe fd10 	bl	800571c <constrainf>
 8006cfc:	eef0 7a40 	vmov.f32	s15, s0
 8006d00:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <scaleRawSetpointToFpvCamAngle+0x90>)
 8006d02:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000df0 	.word	0x20000df0
 8006d14:	20000054 	.word	0x20000054
 8006d18:	20000f28 	.word	0x20000f28
 8006d1c:	44f9c000 	.word	0x44f9c000
 8006d20:	c4f9c000 	.word	0xc4f9c000

08006d24 <resetYawAxis>:

static void resetYawAxis(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
    rcCommand[YAW] = 0;
 8006d28:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <resetYawAxis+0x20>)
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	609a      	str	r2, [r3, #8]
    setpointRate[YAW] = 0;
 8006d30:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <resetYawAxis+0x24>)
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	609a      	str	r2, [r3, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000e3c 	.word	0x20000e3c
 8006d48:	20000e94 	.word	0x20000e94

08006d4c <pidIncUpdateCounter>:

void pidIncUpdateCounter(void) {
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
	if (pidUpdateCounter % activePidLoopDenom == 0) {
 8006d50:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <pidIncUpdateCounter+0x38>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	4a0c      	ldr	r2, [pc, #48]	; (8006d88 <pidIncUpdateCounter+0x3c>)
 8006d56:	7812      	ldrb	r2, [r2, #0]
 8006d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d5c:	fb01 f202 	mul.w	r2, r1, r2
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <pidIncUpdateCounter+0x22>
		pidUpdateCounter = 0;
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <pidIncUpdateCounter+0x38>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	701a      	strb	r2, [r3, #0]
	}
	pidUpdateCounter++;
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <pidIncUpdateCounter+0x38>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	4b03      	ldr	r3, [pc, #12]	; (8006d84 <pidIncUpdateCounter+0x38>)
 8006d78:	701a      	strb	r2, [r3, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	20000b0a 	.word	0x20000b0a
 8006d88:	20000000 	.word	0x20000000

08006d8c <processRcCommand>:


void processRcCommand(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
    // If we're armed, at minimum throttle, and we do arming via the
    // sticks, do not process yaw input from the rx.  We do this so the
    // motors do not spin up while we are trying to arm or disarm.
    // Allow yaw control for tricopters if the user wants the servo to move even when unarmed.
    if (isUsingSticksForArming() && rcData[THROTTLE] <= 1050) {
 8006d92:	f7fe fcec 	bl	800576e <isUsingSticksForArming>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <processRcCommand+0x28>
 8006d9c:	4b4c      	ldr	r3, [pc, #304]	; (8006ed0 <processRcCommand+0x144>)
 8006d9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006da2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8006ed4 <processRcCommand+0x148>
 8006da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dae:	d801      	bhi.n	8006db4 <processRcCommand+0x28>
        resetYawAxis();
 8006db0:	f7ff ffb8 	bl	8006d24 <resetYawAxis>
    }

    if (isRxDataNew) {
 8006db4:	4b48      	ldr	r3, [pc, #288]	; (8006ed8 <processRcCommand+0x14c>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <processRcCommand+0x36>
        newRxDataForFF = true;
 8006dbc:	4b47      	ldr	r3, [pc, #284]	; (8006edc <processRcCommand+0x150>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	701a      	strb	r2, [r3, #0]
    }

    if (isRxDataNew && pidAntiGravityEnabled()) {
 8006dc2:	4b45      	ldr	r3, [pc, #276]	; (8006ed8 <processRcCommand+0x14c>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <processRcCommand+0x52>
 8006dca:	f7fe fcd9 	bl	8005780 <pidAntiGravityEnabled>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <processRcCommand+0x52>
        checkForThrottleErrorResetState(currentRxRefreshRate);
 8006dd4:	4b42      	ldr	r3, [pc, #264]	; (8006ee0 <processRcCommand+0x154>)
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fe43 	bl	8006a64 <checkForThrottleErrorResetState>
    }

    if (isRxDataNew) {
 8006dde:	4b3e      	ldr	r3, [pc, #248]	; (8006ed8 <processRcCommand+0x14c>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d06c      	beq.n	8006ec0 <processRcCommand+0x134>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e064      	b.n	8006eb6 <processRcCommand+0x12a>
            float angleRate;

            {
                // scale rcCommandf to range [-1.0, 1.0]
                float rcCommandf;
                if (axis == FD_YAW) {
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d10d      	bne.n	8006e0e <processRcCommand+0x82>
                    rcCommandf = rcCommand[axis] / rcCommandYawDivider;
 8006df2:	4a3c      	ldr	r2, [pc, #240]	; (8006ee4 <processRcCommand+0x158>)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	edd3 6a00 	vldr	s13, [r3]
 8006dfe:	4b3a      	ldr	r3, [pc, #232]	; (8006ee8 <processRcCommand+0x15c>)
 8006e00:	ed93 7a00 	vldr	s14, [r3]
 8006e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e08:	edc7 7a02 	vstr	s15, [r7, #8]
 8006e0c:	e00c      	b.n	8006e28 <processRcCommand+0x9c>
                } else {
                    rcCommandf = rcCommand[axis] / rcCommandDivider;
 8006e0e:	4a35      	ldr	r2, [pc, #212]	; (8006ee4 <processRcCommand+0x158>)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	edd3 6a00 	vldr	s13, [r3]
 8006e1a:	4b34      	ldr	r3, [pc, #208]	; (8006eec <processRcCommand+0x160>)
 8006e1c:	ed93 7a00 	vldr	s14, [r3]
 8006e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e24:	edc7 7a02 	vstr	s15, [r7, #8]
                }

                rcDeflection[axis] = rcCommandf;
 8006e28:	4a31      	ldr	r2, [pc, #196]	; (8006ef0 <processRcCommand+0x164>)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	601a      	str	r2, [r3, #0]
                const float rcCommandfAbs = fabsf(rcCommandf);
 8006e34:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e38:	eef0 7ae7 	vabs.f32	s15, s15
 8006e3c:	edc7 7a01 	vstr	s15, [r7, #4]
                rcDeflectionAbs[axis] = rcCommandfAbs;
 8006e40:	4a2c      	ldr	r2, [pc, #176]	; (8006ef4 <processRcCommand+0x168>)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]

                angleRate = applyRates(axis, rcCommandf, rcCommandfAbs);
 8006e4c:	4b2a      	ldr	r3, [pc, #168]	; (8006ef8 <processRcCommand+0x16c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	edd7 0a01 	vldr	s1, [r7, #4]
 8006e54:	ed97 0a02 	vldr	s0, [r7, #8]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	4798      	blx	r3
 8006e5c:	ed87 0a00 	vstr	s0, [r7]

            }
            rawSetpoint[axis] = constrainf(angleRate, -1.0f * currentControlRateProfile->rate_limit[axis], 1.0f * currentControlRateProfile->rate_limit[axis]);
 8006e60:	4b26      	ldr	r3, [pc, #152]	; (8006efc <processRcCommand+0x170>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3308      	adds	r3, #8
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	4413      	add	r3, r2
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e76:	eef1 7a67 	vneg.f32	s15, s15
 8006e7a:	4b20      	ldr	r3, [pc, #128]	; (8006efc <processRcCommand+0x170>)
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3308      	adds	r3, #8
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	4413      	add	r3, r2
 8006e86:	885b      	ldrh	r3, [r3, #2]
 8006e88:	ee07 3a10 	vmov	s14, r3
 8006e8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006e90:	eeb0 1a47 	vmov.f32	s2, s14
 8006e94:	eef0 0a67 	vmov.f32	s1, s15
 8006e98:	ed97 0a00 	vldr	s0, [r7]
 8006e9c:	f7fe fc3e 	bl	800571c <constrainf>
 8006ea0:	eef0 7a40 	vmov.f32	s15, s0
 8006ea4:	4a16      	ldr	r2, [pc, #88]	; (8006f00 <processRcCommand+0x174>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	dd97      	ble.n	8006dec <processRcCommand+0x60>
        }
        scaleRawSetpointToFpvCamAngle();
 8006ebc:	f7ff fee0 	bl	8006c80 <scaleRawSetpointToFpvCamAngle>
    }

    isRxDataNew = false;
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <processRcCommand+0x14c>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	701a      	strb	r2, [r3, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000e4c 	.word	0x20000e4c
 8006ed4:	44834000 	.word	0x44834000
 8006ed8:	20000eb8 	.word	0x20000eb8
 8006edc:	20000eb9 	.word	0x20000eb9
 8006ee0:	20000048 	.word	0x20000048
 8006ee4:	20000e3c 	.word	0x20000e3c
 8006ee8:	20000044 	.word	0x20000044
 8006eec:	20000040 	.word	0x20000040
 8006ef0:	20000ea0 	.word	0x20000ea0
 8006ef4:	20000eac 	.word	0x20000eac
 8006ef8:	20000050 	.word	0x20000050
 8006efc:	2000004c 	.word	0x2000004c
 8006f00:	20000df0 	.word	0x20000df0

08006f04 <buildRotationMatrixFromAlignment>:

#include <string.h>
#include "sensor_align.h"

void buildRotationMatrixFromAlignment(const sensorAlignment_t* sensorAlignment, fp_rotationMatrix_t* rm)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
    fp_angles_t rotationAngles;
    rotationAngles.angles.roll  = DECIDEGREES_TO_RADIANS(sensorAlignment->roll);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f1c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f24:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006f88 <buildRotationMatrixFromAlignment+0x84>
 8006f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f2c:	edc7 7a03 	vstr	s15, [r7, #12]
    rotationAngles.angles.pitch = DECIDEGREES_TO_RADIANS(sensorAlignment->pitch);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f3e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006f42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f46:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006f88 <buildRotationMatrixFromAlignment+0x84>
 8006f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f4e:	edc7 7a04 	vstr	s15, [r7, #16]
    rotationAngles.angles.yaw   = DECIDEGREES_TO_RADIANS(sensorAlignment->yaw);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f60:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f68:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006f88 <buildRotationMatrixFromAlignment+0x84>
 8006f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f70:	edc7 7a05 	vstr	s15, [r7, #20]

    buildRotationMatrix(&rotationAngles, rm);
 8006f74:	f107 030c 	add.w	r3, r7, #12
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fa fc86 	bl	800188c <buildRotationMatrix>
}
 8006f80:	bf00      	nop
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	3c8efa35 	.word	0x3c8efa35

08006f8c <buildAlignmentFromStandardAlignment>:

void buildAlignmentFromStandardAlignment(sensorAlignment_t* sensorAlignment, sensor_align_e alignment)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
    if (alignment == ALIGN_CUSTOM || alignment == ALIGN_DEFAULT) {
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	d03f      	beq.n	800701e <buildAlignmentFromStandardAlignment+0x92>
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d03c      	beq.n	800701e <buildAlignmentFromStandardAlignment+0x92>
        return;
    }

    uint8_t alignmentBits = ALIGNMENT_TO_BITMASK(alignment);
 8006fa4:	78fb      	ldrb	r3, [r7, #3]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	b25b      	sxtb	r3, r3
 8006fac:	f003 0303 	and.w	r3, r3, #3
 8006fb0:	b25a      	sxtb	r2, r3
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	72fb      	strb	r3, [r7, #11]

    memset(sensorAlignment, 0x00, sizeof(sensorAlignment_t));
 8006fc6:	2206      	movs	r2, #6
 8006fc8:	2100      	movs	r1, #0
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f007 fe87 	bl	800ecde <memset>

    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e01f      	b.n	8007016 <buildAlignmentFromStandardAlignment+0x8a>
        sensorAlignment->raw[axis] = DEGREES_TO_DECIDEGREES(90) * ALIGNMENT_AXIS_ROTATIONS(alignmentBits, axis);
 8006fd6:	7afa      	ldrb	r2, [r7, #11]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f1c3 0302 	rsb	r3, r3, #2
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	2103      	movs	r1, #3
 8006fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe6:	401a      	ands	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f1c3 0302 	rsb	r3, r3, #2
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	fa42 f303 	asr.w	r3, r2, r3
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	0112      	lsls	r2, r2, #4
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	0112      	lsls	r2, r2, #4
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	b29b      	uxth	r3, r3
 8007006:	b219      	sxth	r1, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b02      	cmp	r3, #2
 800701a:	dddc      	ble.n	8006fd6 <buildAlignmentFromStandardAlignment+0x4a>
 800701c:	e000      	b.n	8007020 <buildAlignmentFromStandardAlignment+0x94>
        return;
 800701e:	bf00      	nop
    }
}
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <alignSensorViaRotation>:

void alignSensorViaRotation(float *dest, uint8_t rotation)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
    const float x = dest[X];
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	617b      	str	r3, [r7, #20]
    const float y = dest[Y];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	613b      	str	r3, [r7, #16]
    const float z = dest[Z];
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	60fb      	str	r3, [r7, #12]

    switch (rotation) {
 8007046:	78fb      	ldrb	r3, [r7, #3]
 8007048:	3b02      	subs	r3, #2
 800704a:	2b06      	cmp	r3, #6
 800704c:	d810      	bhi.n	8007070 <alignSensorViaRotation+0x48>
 800704e:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <alignSensorViaRotation+0x2c>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	08007089 	.word	0x08007089
 8007058:	080070a9 	.word	0x080070a9
 800705c:	080070d1 	.word	0x080070d1
 8007060:	080070f1 	.word	0x080070f1
 8007064:	08007119 	.word	0x08007119
 8007068:	08007139 	.word	0x08007139
 800706c:	08007161 	.word	0x08007161
    default:
    case CW0_DEG:
        dest[X] = x;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	601a      	str	r2, [r3, #0]
        dest[Y] = y;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3304      	adds	r3, #4
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3308      	adds	r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	601a      	str	r2, [r3, #0]
        break;
 8007086:	e083      	b.n	8007190 <alignSensorViaRotation+0x168>
    case CW90_DEG:
        dest[X] = y;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	601a      	str	r2, [r3, #0]
        dest[Y] = -x;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3304      	adds	r3, #4
 8007092:	edd7 7a05 	vldr	s15, [r7, #20]
 8007096:	eef1 7a67 	vneg.f32	s15, s15
 800709a:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	3308      	adds	r3, #8
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]
        break;
 80070a6:	e073      	b.n	8007190 <alignSensorViaRotation+0x168>
    case CW180_DEG:
        dest[X] = -x;
 80070a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80070ac:	eef1 7a67 	vneg.f32	s15, s15
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -y;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3304      	adds	r3, #4
 80070ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80070be:	eef1 7a67 	vneg.f32	s15, s15
 80070c2:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3308      	adds	r3, #8
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	601a      	str	r2, [r3, #0]
        break;
 80070ce:	e05f      	b.n	8007190 <alignSensorViaRotation+0x168>
    case CW270_DEG:
        dest[X] = -y;
 80070d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80070d4:	eef1 7a67 	vneg.f32	s15, s15
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = x;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3308      	adds	r3, #8
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]
        break;
 80070ee:	e04f      	b.n	8007190 <alignSensorViaRotation+0x168>
    case CW0_DEG_FLIP:
        dest[X] = -x;
 80070f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80070f4:	eef1 7a67 	vneg.f32	s15, s15
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = y;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3304      	adds	r3, #4
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3308      	adds	r3, #8
 800710a:	edd7 7a03 	vldr	s15, [r7, #12]
 800710e:	eef1 7a67 	vneg.f32	s15, s15
 8007112:	edc3 7a00 	vstr	s15, [r3]
        break;
 8007116:	e03b      	b.n	8007190 <alignSensorViaRotation+0x168>
    case CW90_DEG_FLIP:
        dest[X] = y;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	601a      	str	r2, [r3, #0]
        dest[Y] = x;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3304      	adds	r3, #4
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3308      	adds	r3, #8
 800712a:	edd7 7a03 	vldr	s15, [r7, #12]
 800712e:	eef1 7a67 	vneg.f32	s15, s15
 8007132:	edc3 7a00 	vstr	s15, [r3]
        break;
 8007136:	e02b      	b.n	8007190 <alignSensorViaRotation+0x168>
    case CW180_DEG_FLIP:
        dest[X] = x;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	601a      	str	r2, [r3, #0]
        dest[Y] = -y;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3304      	adds	r3, #4
 8007142:	edd7 7a04 	vldr	s15, [r7, #16]
 8007146:	eef1 7a67 	vneg.f32	s15, s15
 800714a:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3308      	adds	r3, #8
 8007152:	edd7 7a03 	vldr	s15, [r7, #12]
 8007156:	eef1 7a67 	vneg.f32	s15, s15
 800715a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800715e:	e017      	b.n	8007190 <alignSensorViaRotation+0x168>
    case CW270_DEG_FLIP:
        dest[X] = -y;
 8007160:	edd7 7a04 	vldr	s15, [r7, #16]
 8007164:	eef1 7a67 	vneg.f32	s15, s15
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -x;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3304      	adds	r3, #4
 8007172:	edd7 7a05 	vldr	s15, [r7, #20]
 8007176:	eef1 7a67 	vneg.f32	s15, s15
 800717a:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3308      	adds	r3, #8
 8007182:	edd7 7a03 	vldr	s15, [r7, #12]
 8007186:	eef1 7a67 	vneg.f32	s15, s15
 800718a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800718e:	bf00      	nop
    }
}
 8007190:	bf00      	nop
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80071a2:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <HAL_MspInit+0x4c>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <HAL_MspInit+0x4c>)
 80071a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ac:	6413      	str	r3, [r2, #64]	; 0x40
 80071ae:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <HAL_MspInit+0x4c>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <HAL_MspInit+0x4c>)
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	4a0a      	ldr	r2, [pc, #40]	; (80071e8 <HAL_MspInit+0x4c>)
 80071c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071c4:	6453      	str	r3, [r2, #68]	; 0x44
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <HAL_MspInit+0x4c>)
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80071d2:	2200      	movs	r2, #0
 80071d4:	210f      	movs	r1, #15
 80071d6:	f06f 0001 	mvn.w	r0, #1
 80071da:	f000 fbbb 	bl	8007954 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	40023800 	.word	0x40023800

080071ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08c      	sub	sp, #48	; 0x30
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80071fc:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <HAL_InitTick+0xcc>)
 80071fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007200:	4a2d      	ldr	r2, [pc, #180]	; (80072b8 <HAL_InitTick+0xcc>)
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	6453      	str	r3, [r2, #68]	; 0x44
 8007208:	4b2b      	ldr	r3, [pc, #172]	; (80072b8 <HAL_InitTick+0xcc>)
 800720a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007214:	f107 020c 	add.w	r2, r7, #12
 8007218:	f107 0310 	add.w	r3, r7, #16
 800721c:	4611      	mov	r1, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f002 f9f4 	bl	800960c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007224:	f002 f9de 	bl	80095e4 <HAL_RCC_GetPCLK2Freq>
 8007228:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	4a23      	ldr	r2, [pc, #140]	; (80072bc <HAL_InitTick+0xd0>)
 800722e:	fba2 2303 	umull	r2, r3, r2, r3
 8007232:	0c9b      	lsrs	r3, r3, #18
 8007234:	3b01      	subs	r3, #1
 8007236:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007238:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <HAL_InitTick+0xd4>)
 800723a:	4a22      	ldr	r2, [pc, #136]	; (80072c4 <HAL_InitTick+0xd8>)
 800723c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800723e:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <HAL_InitTick+0xd4>)
 8007240:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007244:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007246:	4a1e      	ldr	r2, [pc, #120]	; (80072c0 <HAL_InitTick+0xd4>)
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800724c:	4b1c      	ldr	r3, [pc, #112]	; (80072c0 <HAL_InitTick+0xd4>)
 800724e:	2200      	movs	r2, #0
 8007250:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007252:	4b1b      	ldr	r3, [pc, #108]	; (80072c0 <HAL_InitTick+0xd4>)
 8007254:	2200      	movs	r2, #0
 8007256:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007258:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <HAL_InitTick+0xd4>)
 800725a:	2200      	movs	r2, #0
 800725c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800725e:	4818      	ldr	r0, [pc, #96]	; (80072c0 <HAL_InitTick+0xd4>)
 8007260:	f002 fe2e 	bl	8009ec0 <HAL_TIM_Base_Init>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800726a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800726e:	2b00      	cmp	r3, #0
 8007270:	d11b      	bne.n	80072aa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007272:	4813      	ldr	r0, [pc, #76]	; (80072c0 <HAL_InitTick+0xd4>)
 8007274:	f002 fe86 	bl	8009f84 <HAL_TIM_Base_Start_IT>
 8007278:	4603      	mov	r3, r0
 800727a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800727e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007282:	2b00      	cmp	r3, #0
 8007284:	d111      	bne.n	80072aa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007286:	2019      	movs	r0, #25
 8007288:	f000 fb80 	bl	800798c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b0f      	cmp	r3, #15
 8007290:	d808      	bhi.n	80072a4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8007292:	2200      	movs	r2, #0
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	2019      	movs	r0, #25
 8007298:	f000 fb5c 	bl	8007954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800729c:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <HAL_InitTick+0xdc>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	e002      	b.n	80072aa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80072aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3730      	adds	r7, #48	; 0x30
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800
 80072bc:	431bde83 	.word	0x431bde83
 80072c0:	20000f2c 	.word	0x20000f2c
 80072c4:	40010000 	.word	0x40010000
 80072c8:	2000005c 	.word	0x2000005c

080072cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80072d0:	e7fe      	b.n	80072d0 <NMI_Handler+0x4>

080072d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072d2:	b480      	push	{r7}
 80072d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072d6:	e7fe      	b.n	80072d6 <HardFault_Handler+0x4>

080072d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072dc:	e7fe      	b.n	80072dc <MemManage_Handler+0x4>

080072de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072de:	b480      	push	{r7}
 80072e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072e2:	e7fe      	b.n	80072e2 <BusFault_Handler+0x4>

080072e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80072e8:	e7fe      	b.n	80072e8 <UsageFault_Handler+0x4>

080072ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072ea:	b480      	push	{r7}
 80072ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072ee:	bf00      	nop
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80072fc:	4802      	ldr	r0, [pc, #8]	; (8007308 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80072fe:	f002 feb9 	bl	800a074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007302:	bf00      	nop
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000f2c 	.word	0x20000f2c

0800730c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
	return 1;
 8007310:	2301      	movs	r3, #1
}
 8007312:	4618      	mov	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <_kill>:

int _kill(int pid, int sig)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007326:	f007 fba9 	bl	800ea7c <__errno>
 800732a:	4603      	mov	r3, r0
 800732c:	2216      	movs	r2, #22
 800732e:	601a      	str	r2, [r3, #0]
	return -1;
 8007330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <_exit>:

void _exit (int status)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007344:	f04f 31ff 	mov.w	r1, #4294967295
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ffe7 	bl	800731c <_kill>
	while (1) {}		/* Make sure we hang here */
 800734e:	e7fe      	b.n	800734e <_exit+0x12>

08007350 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	e00a      	b.n	8007378 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007362:	f3af 8000 	nop.w
 8007366:	4601      	mov	r1, r0
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	60ba      	str	r2, [r7, #8]
 800736e:	b2ca      	uxtb	r2, r1
 8007370:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	3301      	adds	r3, #1
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	dbf0      	blt.n	8007362 <_read+0x12>
	}

return len;
 8007380:	687b      	ldr	r3, [r7, #4]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <_close>:
	}
	return len;
}

int _close(int file)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
	return -1;
 8007392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007396:	4618      	mov	r0, r3
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073b2:	605a      	str	r2, [r3, #4]
	return 0;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <_isatty>:

int _isatty(int file)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
	return 1;
 80073ca:	2301      	movs	r3, #1
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
	return 0;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
	...

080073f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073fc:	4a14      	ldr	r2, [pc, #80]	; (8007450 <_sbrk+0x5c>)
 80073fe:	4b15      	ldr	r3, [pc, #84]	; (8007454 <_sbrk+0x60>)
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007408:	4b13      	ldr	r3, [pc, #76]	; (8007458 <_sbrk+0x64>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d102      	bne.n	8007416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007410:	4b11      	ldr	r3, [pc, #68]	; (8007458 <_sbrk+0x64>)
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <_sbrk+0x68>)
 8007414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007416:	4b10      	ldr	r3, [pc, #64]	; (8007458 <_sbrk+0x64>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d207      	bcs.n	8007434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007424:	f007 fb2a 	bl	800ea7c <__errno>
 8007428:	4603      	mov	r3, r0
 800742a:	220c      	movs	r2, #12
 800742c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800742e:	f04f 33ff 	mov.w	r3, #4294967295
 8007432:	e009      	b.n	8007448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007434:	4b08      	ldr	r3, [pc, #32]	; (8007458 <_sbrk+0x64>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <_sbrk+0x64>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	4a05      	ldr	r2, [pc, #20]	; (8007458 <_sbrk+0x64>)
 8007444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007446:	68fb      	ldr	r3, [r7, #12]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20080000 	.word	0x20080000
 8007454:	00000400 	.word	0x00000400
 8007458:	20000f78 	.word	0x20000f78
 800745c:	20005f28 	.word	0x20005f28

08007460 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <SystemInit+0x20>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746a:	4a05      	ldr	r2, [pc, #20]	; (8007480 <SystemInit+0x20>)
 800746c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007474:	bf00      	nop
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	e000ed00 	.word	0xe000ed00

08007484 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007488:	4b14      	ldr	r3, [pc, #80]	; (80074dc <MX_USART2_UART_Init+0x58>)
 800748a:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <MX_USART2_UART_Init+0x5c>)
 800748c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <MX_USART2_UART_Init+0x58>)
 8007490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007496:	4b11      	ldr	r3, [pc, #68]	; (80074dc <MX_USART2_UART_Init+0x58>)
 8007498:	2200      	movs	r2, #0
 800749a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800749c:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <MX_USART2_UART_Init+0x58>)
 800749e:	2200      	movs	r2, #0
 80074a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80074a2:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <MX_USART2_UART_Init+0x58>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <MX_USART2_UART_Init+0x58>)
 80074aa:	220c      	movs	r2, #12
 80074ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074ae:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <MX_USART2_UART_Init+0x58>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80074b4:	4b09      	ldr	r3, [pc, #36]	; (80074dc <MX_USART2_UART_Init+0x58>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80074ba:	4b08      	ldr	r3, [pc, #32]	; (80074dc <MX_USART2_UART_Init+0x58>)
 80074bc:	2200      	movs	r2, #0
 80074be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <MX_USART2_UART_Init+0x58>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80074c6:	4805      	ldr	r0, [pc, #20]	; (80074dc <MX_USART2_UART_Init+0x58>)
 80074c8:	f002 ffda 	bl	800a480 <HAL_UART_Init>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80074d2:	f7fe f905 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80074d6:	bf00      	nop
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000f7c 	.word	0x20000f7c
 80074e0:	40004400 	.word	0x40004400

080074e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b0ae      	sub	sp, #184	; 0xb8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	605a      	str	r2, [r3, #4]
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80074fc:	f107 0314 	add.w	r3, r7, #20
 8007500:	2290      	movs	r2, #144	; 0x90
 8007502:	2100      	movs	r1, #0
 8007504:	4618      	mov	r0, r3
 8007506:	f007 fbea 	bl	800ecde <memset>
  if(uartHandle->Instance==USART2)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a21      	ldr	r2, [pc, #132]	; (8007594 <HAL_UART_MspInit+0xb0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d13a      	bne.n	800758a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007518:	2300      	movs	r3, #0
 800751a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	4618      	mov	r0, r3
 8007522:	f002 f8a5 	bl	8009670 <HAL_RCCEx_PeriphCLKConfig>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800752c:	f7fe f8d8 	bl	80056e0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007530:	4b19      	ldr	r3, [pc, #100]	; (8007598 <HAL_UART_MspInit+0xb4>)
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	4a18      	ldr	r2, [pc, #96]	; (8007598 <HAL_UART_MspInit+0xb4>)
 8007536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800753a:	6413      	str	r3, [r2, #64]	; 0x40
 800753c:	4b16      	ldr	r3, [pc, #88]	; (8007598 <HAL_UART_MspInit+0xb4>)
 800753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007544:	613b      	str	r3, [r7, #16]
 8007546:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007548:	4b13      	ldr	r3, [pc, #76]	; (8007598 <HAL_UART_MspInit+0xb4>)
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	4a12      	ldr	r2, [pc, #72]	; (8007598 <HAL_UART_MspInit+0xb4>)
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	6313      	str	r3, [r2, #48]	; 0x30
 8007554:	4b10      	ldr	r3, [pc, #64]	; (8007598 <HAL_UART_MspInit+0xb4>)
 8007556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007560:	230c      	movs	r3, #12
 8007562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007566:	2302      	movs	r3, #2
 8007568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756c:	2300      	movs	r3, #0
 800756e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007572:	2303      	movs	r3, #3
 8007574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007578:	2307      	movs	r3, #7
 800757a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800757e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007582:	4619      	mov	r1, r3
 8007584:	4805      	ldr	r0, [pc, #20]	; (800759c <HAL_UART_MspInit+0xb8>)
 8007586:	f000 fa0f 	bl	80079a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800758a:	bf00      	nop
 800758c:	37b8      	adds	r7, #184	; 0xb8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40004400 	.word	0x40004400
 8007598:	40023800 	.word	0x40023800
 800759c:	40020000 	.word	0x40020000

080075a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075a4:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80075ac:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075ae:	2206      	movs	r2, #6
 80075b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075b2:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075b4:	2202      	movs	r2, #2
 80075b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075b8:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075be:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075c0:	2202      	movs	r2, #2
 80075c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80075c4:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80075d6:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075d8:	2201      	movs	r2, #1
 80075da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075de:	2200      	movs	r2, #0
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075e2:	4805      	ldr	r0, [pc, #20]	; (80075f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80075e4:	f001 f995 	bl	8008912 <HAL_PCD_Init>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80075ee:	f7fe f877 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80075f2:	bf00      	nop
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20001004 	.word	0x20001004

080075fc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b0ae      	sub	sp, #184	; 0xb8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007604:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007614:	f107 0314 	add.w	r3, r7, #20
 8007618:	2290      	movs	r2, #144	; 0x90
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f007 fb5e 	bl	800ecde <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800762a:	d159      	bne.n	80076e0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800762c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007630:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8007632:	2300      	movs	r3, #0
 8007634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007638:	f107 0314 	add.w	r3, r7, #20
 800763c:	4618      	mov	r0, r3
 800763e:	f002 f817 	bl	8009670 <HAL_RCCEx_PeriphCLKConfig>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8007648:	f7fe f84a 	bl	80056e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800764c:	4b26      	ldr	r3, [pc, #152]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	4a25      	ldr	r2, [pc, #148]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	6313      	str	r3, [r2, #48]	; 0x30
 8007658:	4b23      	ldr	r3, [pc, #140]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007664:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800766c:	2302      	movs	r3, #2
 800766e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007672:	2300      	movs	r3, #0
 8007674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007678:	2303      	movs	r3, #3
 800767a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800767e:	230a      	movs	r3, #10
 8007680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007684:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007688:	4619      	mov	r1, r3
 800768a:	4818      	ldr	r0, [pc, #96]	; (80076ec <HAL_PCD_MspInit+0xf0>)
 800768c:	f000 f98c 	bl	80079a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007694:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80076a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80076a8:	4619      	mov	r1, r3
 80076aa:	4810      	ldr	r0, [pc, #64]	; (80076ec <HAL_PCD_MspInit+0xf0>)
 80076ac:	f000 f97c 	bl	80079a8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076b0:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 80076b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b4:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 80076b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ba:	6353      	str	r3, [r2, #52]	; 0x34
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 80076be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 80076ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076cc:	4a06      	ldr	r2, [pc, #24]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 80076ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076d2:	6453      	str	r3, [r2, #68]	; 0x44
 80076d4:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <HAL_PCD_MspInit+0xec>)
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076dc:	60bb      	str	r3, [r7, #8]
 80076de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076e0:	bf00      	nop
 80076e2:	37b8      	adds	r7, #184	; 0xb8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40023800 	.word	0x40023800
 80076ec:	40020000 	.word	0x40020000

080076f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80076f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80076f4:	480d      	ldr	r0, [pc, #52]	; (800772c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80076f6:	490e      	ldr	r1, [pc, #56]	; (8007730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80076f8:	4a0e      	ldr	r2, [pc, #56]	; (8007734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80076fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076fc:	e002      	b.n	8007704 <LoopCopyDataInit>

080076fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007702:	3304      	adds	r3, #4

08007704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007708:	d3f9      	bcc.n	80076fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800770a:	4a0b      	ldr	r2, [pc, #44]	; (8007738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800770c:	4c0b      	ldr	r4, [pc, #44]	; (800773c <LoopFillZerobss+0x26>)
  movs r3, #0
 800770e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007710:	e001      	b.n	8007716 <LoopFillZerobss>

08007712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007714:	3204      	adds	r2, #4

08007716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007718:	d3fb      	bcc.n	8007712 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800771a:	f7ff fea1 	bl	8007460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800771e:	f007 faa9 	bl	800ec74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007722:	f7fd fe4b 	bl	80053bc <main>
  bx  lr    
 8007726:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007728:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800772c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007730:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8007734:	080124c8 	.word	0x080124c8
  ldr r2, =_sbss
 8007738:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 800773c:	20005f28 	.word	0x20005f28

08007740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007740:	e7fe      	b.n	8007740 <ADC_IRQHandler>

08007742 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007746:	2003      	movs	r0, #3
 8007748:	f000 f8f9 	bl	800793e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800774c:	200f      	movs	r0, #15
 800774e:	f7ff fd4d 	bl	80071ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007752:	f7ff fd23 	bl	800719c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_IncTick+0x20>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_IncTick+0x24>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4413      	add	r3, r2
 800776c:	4a04      	ldr	r2, [pc, #16]	; (8007780 <HAL_IncTick+0x24>)
 800776e:	6013      	str	r3, [r2, #0]
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20000060 	.word	0x20000060
 8007780:	2000150c 	.word	0x2000150c

08007784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
  return uwTick;
 8007788:	4b03      	ldr	r3, [pc, #12]	; (8007798 <HAL_GetTick+0x14>)
 800778a:	681b      	ldr	r3, [r3, #0]
}
 800778c:	4618      	mov	r0, r3
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	2000150c 	.word	0x2000150c

0800779c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077a4:	f7ff ffee 	bl	8007784 <HAL_GetTick>
 80077a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d005      	beq.n	80077c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <HAL_Delay+0x44>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80077c2:	bf00      	nop
 80077c4:	f7ff ffde 	bl	8007784 <HAL_GetTick>
 80077c8:	4602      	mov	r2, r0
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d8f7      	bhi.n	80077c4 <HAL_Delay+0x28>
  {
  }
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000060 	.word	0x20000060

080077e4 <__NVIC_SetPriorityGrouping>:
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <__NVIC_SetPriorityGrouping+0x40>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007800:	4013      	ands	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <__NVIC_SetPriorityGrouping+0x44>)
 800780e:	4313      	orrs	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007812:	4a04      	ldr	r2, [pc, #16]	; (8007824 <__NVIC_SetPriorityGrouping+0x40>)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	60d3      	str	r3, [r2, #12]
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	e000ed00 	.word	0xe000ed00
 8007828:	05fa0000 	.word	0x05fa0000

0800782c <__NVIC_GetPriorityGrouping>:
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <__NVIC_GetPriorityGrouping+0x18>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	0a1b      	lsrs	r3, r3, #8
 8007836:	f003 0307 	and.w	r3, r3, #7
}
 800783a:	4618      	mov	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	e000ed00 	.word	0xe000ed00

08007848 <__NVIC_EnableIRQ>:
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007856:	2b00      	cmp	r3, #0
 8007858:	db0b      	blt.n	8007872 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	f003 021f 	and.w	r2, r3, #31
 8007860:	4907      	ldr	r1, [pc, #28]	; (8007880 <__NVIC_EnableIRQ+0x38>)
 8007862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	2001      	movs	r0, #1
 800786a:	fa00 f202 	lsl.w	r2, r0, r2
 800786e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	e000e100 	.word	0xe000e100

08007884 <__NVIC_SetPriority>:
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007894:	2b00      	cmp	r3, #0
 8007896:	db0a      	blt.n	80078ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	b2da      	uxtb	r2, r3
 800789c:	490c      	ldr	r1, [pc, #48]	; (80078d0 <__NVIC_SetPriority+0x4c>)
 800789e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a2:	0112      	lsls	r2, r2, #4
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	440b      	add	r3, r1
 80078a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078ac:	e00a      	b.n	80078c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	4908      	ldr	r1, [pc, #32]	; (80078d4 <__NVIC_SetPriority+0x50>)
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	3b04      	subs	r3, #4
 80078bc:	0112      	lsls	r2, r2, #4
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	440b      	add	r3, r1
 80078c2:	761a      	strb	r2, [r3, #24]
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	e000e100 	.word	0xe000e100
 80078d4:	e000ed00 	.word	0xe000ed00

080078d8 <NVIC_EncodePriority>:
{
 80078d8:	b480      	push	{r7}
 80078da:	b089      	sub	sp, #36	; 0x24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f1c3 0307 	rsb	r3, r3, #7
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	bf28      	it	cs
 80078f6:	2304      	movcs	r3, #4
 80078f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	3304      	adds	r3, #4
 80078fe:	2b06      	cmp	r3, #6
 8007900:	d902      	bls.n	8007908 <NVIC_EncodePriority+0x30>
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3b03      	subs	r3, #3
 8007906:	e000      	b.n	800790a <NVIC_EncodePriority+0x32>
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800790c:	f04f 32ff 	mov.w	r2, #4294967295
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	fa02 f303 	lsl.w	r3, r2, r3
 8007916:	43da      	mvns	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	401a      	ands	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007920:	f04f 31ff 	mov.w	r1, #4294967295
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	fa01 f303 	lsl.w	r3, r1, r3
 800792a:	43d9      	mvns	r1, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007930:	4313      	orrs	r3, r2
}
 8007932:	4618      	mov	r0, r3
 8007934:	3724      	adds	r7, #36	; 0x24
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff ff4c 	bl	80077e4 <__NVIC_SetPriorityGrouping>
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007966:	f7ff ff61 	bl	800782c <__NVIC_GetPriorityGrouping>
 800796a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	6978      	ldr	r0, [r7, #20]
 8007972:	f7ff ffb1 	bl	80078d8 <NVIC_EncodePriority>
 8007976:	4602      	mov	r2, r0
 8007978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff ff80 	bl	8007884 <__NVIC_SetPriority>
}
 8007984:	bf00      	nop
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff ff54 	bl	8007848 <__NVIC_EnableIRQ>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80079b2:	2300      	movs	r3, #0
 80079b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80079ba:	2300      	movs	r3, #0
 80079bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80079be:	2300      	movs	r3, #0
 80079c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80079c2:	2300      	movs	r3, #0
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	e175      	b.n	8007cb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80079c8:	2201      	movs	r2, #1
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4013      	ands	r3, r2
 80079da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	f040 8164 	bne.w	8007cae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d005      	beq.n	80079fe <HAL_GPIO_Init+0x56>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d130      	bne.n	8007a60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	2203      	movs	r2, #3
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4013      	ands	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a34:	2201      	movs	r2, #1
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4013      	ands	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	f003 0201 	and.w	r2, r3, #1
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d017      	beq.n	8007a9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	2203      	movs	r2, #3
 8007a78:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	4013      	ands	r3, r2
 8007a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d123      	bne.n	8007af0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	08da      	lsrs	r2, r3, #3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3208      	adds	r2, #8
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	220f      	movs	r2, #15
 8007ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	08da      	lsrs	r2, r3, #3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3208      	adds	r2, #8
 8007aea:	69b9      	ldr	r1, [r7, #24]
 8007aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	2203      	movs	r2, #3
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	43db      	mvns	r3, r3
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	4013      	ands	r3, r2
 8007b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 0203 	and.w	r2, r3, #3
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80be 	beq.w	8007cae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b32:	4b66      	ldr	r3, [pc, #408]	; (8007ccc <HAL_GPIO_Init+0x324>)
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	4a65      	ldr	r2, [pc, #404]	; (8007ccc <HAL_GPIO_Init+0x324>)
 8007b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b3e:	4b63      	ldr	r3, [pc, #396]	; (8007ccc <HAL_GPIO_Init+0x324>)
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007b4a:	4a61      	ldr	r2, [pc, #388]	; (8007cd0 <HAL_GPIO_Init+0x328>)
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	089b      	lsrs	r3, r3, #2
 8007b50:	3302      	adds	r3, #2
 8007b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	220f      	movs	r2, #15
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	43db      	mvns	r3, r3
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a58      	ldr	r2, [pc, #352]	; (8007cd4 <HAL_GPIO_Init+0x32c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d037      	beq.n	8007be6 <HAL_GPIO_Init+0x23e>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a57      	ldr	r2, [pc, #348]	; (8007cd8 <HAL_GPIO_Init+0x330>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d031      	beq.n	8007be2 <HAL_GPIO_Init+0x23a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a56      	ldr	r2, [pc, #344]	; (8007cdc <HAL_GPIO_Init+0x334>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d02b      	beq.n	8007bde <HAL_GPIO_Init+0x236>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a55      	ldr	r2, [pc, #340]	; (8007ce0 <HAL_GPIO_Init+0x338>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d025      	beq.n	8007bda <HAL_GPIO_Init+0x232>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a54      	ldr	r2, [pc, #336]	; (8007ce4 <HAL_GPIO_Init+0x33c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01f      	beq.n	8007bd6 <HAL_GPIO_Init+0x22e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a53      	ldr	r2, [pc, #332]	; (8007ce8 <HAL_GPIO_Init+0x340>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d019      	beq.n	8007bd2 <HAL_GPIO_Init+0x22a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a52      	ldr	r2, [pc, #328]	; (8007cec <HAL_GPIO_Init+0x344>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <HAL_GPIO_Init+0x226>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a51      	ldr	r2, [pc, #324]	; (8007cf0 <HAL_GPIO_Init+0x348>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00d      	beq.n	8007bca <HAL_GPIO_Init+0x222>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a50      	ldr	r2, [pc, #320]	; (8007cf4 <HAL_GPIO_Init+0x34c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d007      	beq.n	8007bc6 <HAL_GPIO_Init+0x21e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a4f      	ldr	r2, [pc, #316]	; (8007cf8 <HAL_GPIO_Init+0x350>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d101      	bne.n	8007bc2 <HAL_GPIO_Init+0x21a>
 8007bbe:	2309      	movs	r3, #9
 8007bc0:	e012      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bc2:	230a      	movs	r3, #10
 8007bc4:	e010      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bc6:	2308      	movs	r3, #8
 8007bc8:	e00e      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bca:	2307      	movs	r3, #7
 8007bcc:	e00c      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bce:	2306      	movs	r3, #6
 8007bd0:	e00a      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bd2:	2305      	movs	r3, #5
 8007bd4:	e008      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bd6:	2304      	movs	r3, #4
 8007bd8:	e006      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e004      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e002      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <HAL_GPIO_Init+0x240>
 8007be6:	2300      	movs	r3, #0
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	f002 0203 	and.w	r2, r2, #3
 8007bee:	0092      	lsls	r2, r2, #2
 8007bf0:	4093      	lsls	r3, r2
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007bf8:	4935      	ldr	r1, [pc, #212]	; (8007cd0 <HAL_GPIO_Init+0x328>)
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	089b      	lsrs	r3, r3, #2
 8007bfe:	3302      	adds	r3, #2
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c06:	4b3d      	ldr	r3, [pc, #244]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	43db      	mvns	r3, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4013      	ands	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007c2a:	4a34      	ldr	r2, [pc, #208]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c30:	4b32      	ldr	r3, [pc, #200]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c54:	4a29      	ldr	r2, [pc, #164]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007c5a:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	43db      	mvns	r3, r3
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4013      	ands	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c7e:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c84:	4b1d      	ldr	r3, [pc, #116]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ca8:	4a14      	ldr	r2, [pc, #80]	; (8007cfc <HAL_GPIO_Init+0x354>)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b0f      	cmp	r3, #15
 8007cb8:	f67f ae86 	bls.w	80079c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	3724      	adds	r7, #36	; 0x24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	40013800 	.word	0x40013800
 8007cd4:	40020000 	.word	0x40020000
 8007cd8:	40020400 	.word	0x40020400
 8007cdc:	40020800 	.word	0x40020800
 8007ce0:	40020c00 	.word	0x40020c00
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	40021400 	.word	0x40021400
 8007cec:	40021800 	.word	0x40021800
 8007cf0:	40021c00 	.word	0x40021c00
 8007cf4:	40022000 	.word	0x40022000
 8007cf8:	40022400 	.word	0x40022400
 8007cfc:	40013c00 	.word	0x40013c00

08007d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	807b      	strh	r3, [r7, #2]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d10:	787b      	ldrb	r3, [r7, #1]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d16:	887a      	ldrh	r2, [r7, #2]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007d1c:	e003      	b.n	8007d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	041a      	lsls	r2, r3, #16
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	619a      	str	r2, [r3, #24]
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e07f      	b.n	8007e46 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fa ffca 	bl	8002cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2224      	movs	r2, #36	; 0x24
 8007d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d107      	bne.n	8007dae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007daa:	609a      	str	r2, [r3, #8]
 8007dac:	e006      	b.n	8007dbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689a      	ldr	r2, [r3, #8]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007dba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d104      	bne.n	8007dce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6859      	ldr	r1, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <HAL_I2C_Init+0x11c>)
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	69d9      	ldr	r1, [r3, #28]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1a      	ldr	r2, [r3, #32]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	02008000 	.word	0x02008000

08007e54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	4611      	mov	r1, r2
 8007e60:	461a      	mov	r2, r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	817b      	strh	r3, [r7, #10]
 8007e66:	460b      	mov	r3, r1
 8007e68:	813b      	strh	r3, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b20      	cmp	r3, #32
 8007e78:	f040 80f9 	bne.w	800806e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <HAL_I2C_Mem_Write+0x34>
 8007e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d105      	bne.n	8007e94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0ed      	b.n	8008070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_I2C_Mem_Write+0x4e>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e0e6      	b.n	8008070 <HAL_I2C_Mem_Write+0x21c>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007eaa:	f7ff fc6b 	bl	8007784 <HAL_GetTick>
 8007eae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	2319      	movs	r3, #25
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fac3 	bl	8008448 <I2C_WaitOnFlagUntilTimeout>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e0d1      	b.n	8008070 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2221      	movs	r2, #33	; 0x21
 8007ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2240      	movs	r2, #64	; 0x40
 8007ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a3a      	ldr	r2, [r7, #32]
 8007ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ef4:	88f8      	ldrh	r0, [r7, #6]
 8007ef6:	893a      	ldrh	r2, [r7, #8]
 8007ef8:	8979      	ldrh	r1, [r7, #10]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	4603      	mov	r3, r0
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 f9d3 	bl	80082b0 <I2C_RequestMemoryWrite>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e0a9      	b.n	8008070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2bff      	cmp	r3, #255	; 0xff
 8007f24:	d90e      	bls.n	8007f44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	22ff      	movs	r2, #255	; 0xff
 8007f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	8979      	ldrh	r1, [r7, #10]
 8007f34:	2300      	movs	r3, #0
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 fc1f 	bl	8008780 <I2C_TransferConfig>
 8007f42:	e00f      	b.n	8007f64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	8979      	ldrh	r1, [r7, #10]
 8007f56:	2300      	movs	r3, #0
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fc0e 	bl	8008780 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 faad 	bl	80084c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e07b      	b.n	8008070 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	781a      	ldrb	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d034      	beq.n	800801c <HAL_I2C_Mem_Write+0x1c8>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d130      	bne.n	800801c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2180      	movs	r1, #128	; 0x80
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 fa3f 	bl	8008448 <I2C_WaitOnFlagUntilTimeout>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e04d      	b.n	8008070 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2bff      	cmp	r3, #255	; 0xff
 8007fdc:	d90e      	bls.n	8007ffc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	22ff      	movs	r2, #255	; 0xff
 8007fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	8979      	ldrh	r1, [r7, #10]
 8007fec:	2300      	movs	r3, #0
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fbc3 	bl	8008780 <I2C_TransferConfig>
 8007ffa:	e00f      	b.n	800801c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800a:	b2da      	uxtb	r2, r3
 800800c:	8979      	ldrh	r1, [r7, #10]
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 fbb2 	bl	8008780 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d19e      	bne.n	8007f64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 fa8c 	bl	8008548 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e01a      	b.n	8008070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2220      	movs	r2, #32
 8008040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6859      	ldr	r1, [r3, #4]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <HAL_I2C_Mem_Write+0x224>)
 800804e:	400b      	ands	r3, r1
 8008050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e000      	b.n	8008070 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800806e:	2302      	movs	r3, #2
  }
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	fe00e800 	.word	0xfe00e800

0800807c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af02      	add	r7, sp, #8
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	4608      	mov	r0, r1
 8008086:	4611      	mov	r1, r2
 8008088:	461a      	mov	r2, r3
 800808a:	4603      	mov	r3, r0
 800808c:	817b      	strh	r3, [r7, #10]
 800808e:	460b      	mov	r3, r1
 8008090:	813b      	strh	r3, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b20      	cmp	r3, #32
 80080a0:	f040 80fd 	bne.w	800829e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <HAL_I2C_Mem_Read+0x34>
 80080aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d105      	bne.n	80080bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e0f1      	b.n	80082a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_I2C_Mem_Read+0x4e>
 80080c6:	2302      	movs	r3, #2
 80080c8:	e0ea      	b.n	80082a0 <HAL_I2C_Mem_Read+0x224>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080d2:	f7ff fb57 	bl	8007784 <HAL_GetTick>
 80080d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2319      	movs	r3, #25
 80080de:	2201      	movs	r2, #1
 80080e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f9af 	bl	8008448 <I2C_WaitOnFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e0d5      	b.n	80082a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2222      	movs	r2, #34	; 0x22
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2240      	movs	r2, #64	; 0x40
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a3a      	ldr	r2, [r7, #32]
 800810e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800811c:	88f8      	ldrh	r0, [r7, #6]
 800811e:	893a      	ldrh	r2, [r7, #8]
 8008120:	8979      	ldrh	r1, [r7, #10]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	4603      	mov	r3, r0
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f913 	bl	8008358 <I2C_RequestMemoryRead>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d005      	beq.n	8008144 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e0ad      	b.n	80082a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008148:	b29b      	uxth	r3, r3
 800814a:	2bff      	cmp	r3, #255	; 0xff
 800814c:	d90e      	bls.n	800816c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	22ff      	movs	r2, #255	; 0xff
 8008152:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008158:	b2da      	uxtb	r2, r3
 800815a:	8979      	ldrh	r1, [r7, #10]
 800815c:	4b52      	ldr	r3, [pc, #328]	; (80082a8 <HAL_I2C_Mem_Read+0x22c>)
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fb0b 	bl	8008780 <I2C_TransferConfig>
 800816a:	e00f      	b.n	800818c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008170:	b29a      	uxth	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817a:	b2da      	uxtb	r2, r3
 800817c:	8979      	ldrh	r1, [r7, #10]
 800817e:	4b4a      	ldr	r3, [pc, #296]	; (80082a8 <HAL_I2C_Mem_Read+0x22c>)
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fafa 	bl	8008780 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	2200      	movs	r2, #0
 8008194:	2104      	movs	r1, #4
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f956 	bl	8008448 <I2C_WaitOnFlagUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e07c      	b.n	80082a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	b2d2      	uxtb	r2, r2
 80081b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c2:	3b01      	subs	r3, #1
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d034      	beq.n	800824c <HAL_I2C_Mem_Read+0x1d0>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d130      	bne.n	800824c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	2200      	movs	r2, #0
 80081f2:	2180      	movs	r1, #128	; 0x80
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f927 	bl	8008448 <I2C_WaitOnFlagUntilTimeout>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e04d      	b.n	80082a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008208:	b29b      	uxth	r3, r3
 800820a:	2bff      	cmp	r3, #255	; 0xff
 800820c:	d90e      	bls.n	800822c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	22ff      	movs	r2, #255	; 0xff
 8008212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008218:	b2da      	uxtb	r2, r3
 800821a:	8979      	ldrh	r1, [r7, #10]
 800821c:	2300      	movs	r3, #0
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 faab 	bl	8008780 <I2C_TransferConfig>
 800822a:	e00f      	b.n	800824c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008230:	b29a      	uxth	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823a:	b2da      	uxtb	r2, r3
 800823c:	8979      	ldrh	r1, [r7, #10]
 800823e:	2300      	movs	r3, #0
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fa9a 	bl	8008780 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d19a      	bne.n	800818c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f974 	bl	8008548 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e01a      	b.n	80082a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2220      	movs	r2, #32
 8008270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6859      	ldr	r1, [r3, #4]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <HAL_I2C_Mem_Read+0x230>)
 800827e:	400b      	ands	r3, r1
 8008280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	e000      	b.n	80082a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800829e:	2302      	movs	r3, #2
  }
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	80002400 	.word	0x80002400
 80082ac:	fe00e800 	.word	0xfe00e800

080082b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	4608      	mov	r0, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	4603      	mov	r3, r0
 80082c0:	817b      	strh	r3, [r7, #10]
 80082c2:	460b      	mov	r3, r1
 80082c4:	813b      	strh	r3, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	8979      	ldrh	r1, [r7, #10]
 80082d0:	4b20      	ldr	r3, [pc, #128]	; (8008354 <I2C_RequestMemoryWrite+0xa4>)
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 fa51 	bl	8008780 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	69b9      	ldr	r1, [r7, #24]
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 f8f0 	bl	80084c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e02c      	b.n	800834c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d105      	bne.n	8008304 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082f8:	893b      	ldrh	r3, [r7, #8]
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	629a      	str	r2, [r3, #40]	; 0x28
 8008302:	e015      	b.n	8008330 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008304:	893b      	ldrh	r3, [r7, #8]
 8008306:	0a1b      	lsrs	r3, r3, #8
 8008308:	b29b      	uxth	r3, r3
 800830a:	b2da      	uxtb	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	69b9      	ldr	r1, [r7, #24]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f8d6 	bl	80084c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e012      	b.n	800834c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008326:	893b      	ldrh	r3, [r7, #8]
 8008328:	b2da      	uxtb	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	2200      	movs	r2, #0
 8008338:	2180      	movs	r1, #128	; 0x80
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 f884 	bl	8008448 <I2C_WaitOnFlagUntilTimeout>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	80002000 	.word	0x80002000

08008358 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af02      	add	r7, sp, #8
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	4608      	mov	r0, r1
 8008362:	4611      	mov	r1, r2
 8008364:	461a      	mov	r2, r3
 8008366:	4603      	mov	r3, r0
 8008368:	817b      	strh	r3, [r7, #10]
 800836a:	460b      	mov	r3, r1
 800836c:	813b      	strh	r3, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	b2da      	uxtb	r2, r3
 8008376:	8979      	ldrh	r1, [r7, #10]
 8008378:	4b20      	ldr	r3, [pc, #128]	; (80083fc <I2C_RequestMemoryRead+0xa4>)
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	2300      	movs	r3, #0
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f9fe 	bl	8008780 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	69b9      	ldr	r1, [r7, #24]
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f89d 	bl	80084c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e02c      	b.n	80083f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d105      	bne.n	80083aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800839e:	893b      	ldrh	r3, [r7, #8]
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	629a      	str	r2, [r3, #40]	; 0x28
 80083a8:	e015      	b.n	80083d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083aa:	893b      	ldrh	r3, [r7, #8]
 80083ac:	0a1b      	lsrs	r3, r3, #8
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083b8:	69fa      	ldr	r2, [r7, #28]
 80083ba:	69b9      	ldr	r1, [r7, #24]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f883 	bl	80084c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e012      	b.n	80083f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083cc:	893b      	ldrh	r3, [r7, #8]
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2200      	movs	r2, #0
 80083de:	2140      	movs	r1, #64	; 0x40
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 f831 	bl	8008448 <I2C_WaitOnFlagUntilTimeout>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	80002000 	.word	0x80002000

08008400 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b02      	cmp	r3, #2
 8008414:	d103      	bne.n	800841e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b01      	cmp	r3, #1
 800842a:	d007      	beq.n	800843c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	619a      	str	r2, [r3, #24]
  }
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	4613      	mov	r3, r2
 8008456:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008458:	e022      	b.n	80084a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008460:	d01e      	beq.n	80084a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008462:	f7ff f98f 	bl	8007784 <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d302      	bcc.n	8008478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847c:	f043 0220 	orr.w	r2, r3, #32
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e00f      	b.n	80084c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699a      	ldr	r2, [r3, #24]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4013      	ands	r3, r2
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	bf0c      	ite	eq
 80084b0:	2301      	moveq	r3, #1
 80084b2:	2300      	movne	r3, #0
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	461a      	mov	r2, r3
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d0cd      	beq.n	800845a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084d4:	e02c      	b.n	8008530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f870 	bl	80085c0 <I2C_IsErrorOccurred>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e02a      	b.n	8008540 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d01e      	beq.n	8008530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f2:	f7ff f947 	bl	8007784 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d302      	bcc.n	8008508 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d113      	bne.n	8008530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850c:	f043 0220 	orr.w	r2, r3, #32
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e007      	b.n	8008540 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b02      	cmp	r3, #2
 800853c:	d1cb      	bne.n	80084d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008554:	e028      	b.n	80085a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f830 	bl	80085c0 <I2C_IsErrorOccurred>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e026      	b.n	80085b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800856a:	f7ff f90b 	bl	8007784 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	429a      	cmp	r2, r3
 8008578:	d302      	bcc.n	8008580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d113      	bne.n	80085a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2220      	movs	r2, #32
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e007      	b.n	80085b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b20      	cmp	r3, #32
 80085b4:	d1cf      	bne.n	8008556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08a      	sub	sp, #40	; 0x28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d068      	beq.n	80086be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2210      	movs	r2, #16
 80085f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085f4:	e049      	b.n	800868a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fc:	d045      	beq.n	800868a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80085fe:	f7ff f8c1 	bl	8007784 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	429a      	cmp	r2, r3
 800860c:	d302      	bcc.n	8008614 <I2C_IsErrorOccurred+0x54>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d13a      	bne.n	800868a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008626:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008636:	d121      	bne.n	800867c <I2C_IsErrorOccurred+0xbc>
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800863e:	d01d      	beq.n	800867c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008640:	7cfb      	ldrb	r3, [r7, #19]
 8008642:	2b20      	cmp	r3, #32
 8008644:	d01a      	beq.n	800867c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008654:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008656:	f7ff f895 	bl	8007784 <HAL_GetTick>
 800865a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800865c:	e00e      	b.n	800867c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800865e:	f7ff f891 	bl	8007784 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b19      	cmp	r3, #25
 800866a:	d907      	bls.n	800867c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	f043 0320 	orr.w	r3, r3, #32
 8008672:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800867a:	e006      	b.n	800868a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f003 0320 	and.w	r3, r3, #32
 8008686:	2b20      	cmp	r3, #32
 8008688:	d1e9      	bne.n	800865e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	f003 0320 	and.w	r3, r3, #32
 8008694:	2b20      	cmp	r3, #32
 8008696:	d003      	beq.n	80086a0 <I2C_IsErrorOccurred+0xe0>
 8008698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0aa      	beq.n	80085f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80086a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d103      	bne.n	80086b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2220      	movs	r2, #32
 80086ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	f043 0304 	orr.w	r3, r3, #4
 80086b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00b      	beq.n	800870a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	f043 0308 	orr.w	r3, r3, #8
 80086f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008702:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	f043 0302 	orr.w	r3, r3, #2
 800871a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008724:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800872c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008730:	2b00      	cmp	r3, #0
 8008732:	d01c      	beq.n	800876e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7ff fe63 	bl	8008400 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6859      	ldr	r1, [r3, #4]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	4b0d      	ldr	r3, [pc, #52]	; (800877c <I2C_IsErrorOccurred+0x1bc>)
 8008746:	400b      	ands	r3, r1
 8008748:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	431a      	orrs	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800876e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008772:	4618      	mov	r0, r3
 8008774:	3728      	adds	r7, #40	; 0x28
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	fe00e800 	.word	0xfe00e800

08008780 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	607b      	str	r3, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	817b      	strh	r3, [r7, #10]
 800878e:	4613      	mov	r3, r2
 8008790:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008792:	897b      	ldrh	r3, [r7, #10]
 8008794:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008798:	7a7b      	ldrb	r3, [r7, #9]
 800879a:	041b      	lsls	r3, r3, #16
 800879c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	0d5b      	lsrs	r3, r3, #21
 80087ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80087be:	4b08      	ldr	r3, [pc, #32]	; (80087e0 <I2C_TransferConfig+0x60>)
 80087c0:	430b      	orrs	r3, r1
 80087c2:	43db      	mvns	r3, r3
 80087c4:	ea02 0103 	and.w	r1, r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	03ff63ff 	.word	0x03ff63ff

080087e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	d138      	bne.n	800886c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008804:	2302      	movs	r3, #2
 8008806:	e032      	b.n	800886e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2224      	movs	r2, #36	; 0x24
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0201 	bic.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6819      	ldr	r1, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2220      	movs	r2, #32
 800885c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	e000      	b.n	800886e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800886c:	2302      	movs	r3, #2
  }
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b20      	cmp	r3, #32
 800888e:	d139      	bne.n	8008904 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800889a:	2302      	movs	r3, #2
 800889c:	e033      	b.n	8008906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2224      	movs	r2, #36	; 0x24
 80088aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0201 	bic.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80088cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 0201 	orr.w	r2, r2, #1
 80088ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	e000      	b.n	8008906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008904:	2302      	movs	r3, #2
  }
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008914:	b08f      	sub	sp, #60	; 0x3c
 8008916:	af0a      	add	r7, sp, #40	; 0x28
 8008918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e116      	b.n	8008b52 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7fe fe5c 	bl	80075fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2203      	movs	r2, #3
 8008948:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008954:	2b00      	cmp	r3, #0
 8008956:	d102      	bne.n	800895e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f002 fa4c 	bl	800ae00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	603b      	str	r3, [r7, #0]
 800896e:	687e      	ldr	r6, [r7, #4]
 8008970:	466d      	mov	r5, sp
 8008972:	f106 0410 	add.w	r4, r6, #16
 8008976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800897a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800897c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800897e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008982:	e885 0003 	stmia.w	r5, {r0, r1}
 8008986:	1d33      	adds	r3, r6, #4
 8008988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800898a:	6838      	ldr	r0, [r7, #0]
 800898c:	f002 f9e0 	bl	800ad50 <USB_CoreInit>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e0d7      	b.n	8008b52 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2100      	movs	r1, #0
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fa3a 	bl	800ae22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
 80089b2:	e04a      	b.n	8008a4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80089b4:	7bfa      	ldrb	r2, [r7, #15]
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	4613      	mov	r3, r2
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	4413      	add	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	333d      	adds	r3, #61	; 0x3d
 80089c4:	2201      	movs	r2, #1
 80089c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80089c8:	7bfa      	ldrb	r2, [r7, #15]
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	4613      	mov	r3, r2
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	440b      	add	r3, r1
 80089d6:	333c      	adds	r3, #60	; 0x3c
 80089d8:	7bfa      	ldrb	r2, [r7, #15]
 80089da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80089dc:	7bfa      	ldrb	r2, [r7, #15]
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	b298      	uxth	r0, r3
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	3344      	adds	r3, #68	; 0x44
 80089f0:	4602      	mov	r2, r0
 80089f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80089f4:	7bfa      	ldrb	r2, [r7, #15]
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	3340      	adds	r3, #64	; 0x40
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008a08:	7bfa      	ldrb	r2, [r7, #15]
 8008a0a:	6879      	ldr	r1, [r7, #4]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	4413      	add	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	440b      	add	r3, r1
 8008a16:	3348      	adds	r3, #72	; 0x48
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008a1c:	7bfa      	ldrb	r2, [r7, #15]
 8008a1e:	6879      	ldr	r1, [r7, #4]
 8008a20:	4613      	mov	r3, r2
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	334c      	adds	r3, #76	; 0x4c
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008a30:	7bfa      	ldrb	r2, [r7, #15]
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	4613      	mov	r3, r2
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	4413      	add	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	440b      	add	r3, r1
 8008a3e:	3354      	adds	r3, #84	; 0x54
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	3301      	adds	r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]
 8008a4a:	7bfa      	ldrb	r2, [r7, #15]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d3af      	bcc.n	80089b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
 8008a58:	e044      	b.n	8008ae4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008a5a:	7bfa      	ldrb	r2, [r7, #15]
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008a70:	7bfa      	ldrb	r2, [r7, #15]
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	4613      	mov	r3, r2
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008a82:	7bfa      	ldrb	r2, [r7, #15]
 8008a84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008a86:	7bfa      	ldrb	r2, [r7, #15]
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a98:	2200      	movs	r2, #0
 8008a9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008a9c:	7bfa      	ldrb	r2, [r7, #15]
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008ab2:	7bfa      	ldrb	r2, [r7, #15]
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	440b      	add	r3, r1
 8008ac0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ac8:	7bfa      	ldrb	r2, [r7, #15]
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	4613      	mov	r3, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]
 8008ae4:	7bfa      	ldrb	r2, [r7, #15]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d3b5      	bcc.n	8008a5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	687e      	ldr	r6, [r7, #4]
 8008af6:	466d      	mov	r5, sp
 8008af8:	f106 0410 	add.w	r4, r6, #16
 8008afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b08:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b0c:	1d33      	adds	r3, r6, #4
 8008b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b10:	6838      	ldr	r0, [r7, #0]
 8008b12:	f002 f9d3 	bl	800aebc <USB_DevInit>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e014      	b.n	8008b52 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d102      	bne.n	8008b46 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f80b 	bl	8008b5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 fb91 	bl	800b272 <USB_DevDisconnect>

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008b5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b8a:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <HAL_PCDEx_ActivateLPM+0x44>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	10000003 	.word	0x10000003

08008ba4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a04      	ldr	r2, [pc, #16]	; (8008bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bb2:	6013      	str	r3, [r2, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	40007000 	.word	0x40007000

08008bc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008bce:	4b23      	ldr	r3, [pc, #140]	; (8008c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	4a22      	ldr	r2, [pc, #136]	; (8008c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8008bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8008bda:	4b20      	ldr	r3, [pc, #128]	; (8008c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008be6:	4b1e      	ldr	r3, [pc, #120]	; (8008c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a1d      	ldr	r2, [pc, #116]	; (8008c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008bf2:	f7fe fdc7 	bl	8007784 <HAL_GetTick>
 8008bf6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008bf8:	e009      	b.n	8008c0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008bfa:	f7fe fdc3 	bl	8007784 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c08:	d901      	bls.n	8008c0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e022      	b.n	8008c54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008c0e:	4b14      	ldr	r3, [pc, #80]	; (8008c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c1a:	d1ee      	bne.n	8008bfa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008c1c:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a0f      	ldr	r2, [pc, #60]	; (8008c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c28:	f7fe fdac 	bl	8007784 <HAL_GetTick>
 8008c2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008c2e:	e009      	b.n	8008c44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008c30:	f7fe fda8 	bl	8007784 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c3e:	d901      	bls.n	8008c44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e007      	b.n	8008c54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008c44:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c50:	d1ee      	bne.n	8008c30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40023800 	.word	0x40023800
 8008c60:	40007000 	.word	0x40007000

08008c64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e29b      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 8087 	beq.w	8008d96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c88:	4b96      	ldr	r3, [pc, #600]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f003 030c 	and.w	r3, r3, #12
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d00c      	beq.n	8008cae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c94:	4b93      	ldr	r3, [pc, #588]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 030c 	and.w	r3, r3, #12
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d112      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x62>
 8008ca0:	4b90      	ldr	r3, [pc, #576]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cac:	d10b      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cae:	4b8d      	ldr	r3, [pc, #564]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d06c      	beq.n	8008d94 <HAL_RCC_OscConfig+0x130>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d168      	bne.n	8008d94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e275      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cce:	d106      	bne.n	8008cde <HAL_RCC_OscConfig+0x7a>
 8008cd0:	4b84      	ldr	r3, [pc, #528]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a83      	ldr	r2, [pc, #524]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	e02e      	b.n	8008d3c <HAL_RCC_OscConfig+0xd8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10c      	bne.n	8008d00 <HAL_RCC_OscConfig+0x9c>
 8008ce6:	4b7f      	ldr	r3, [pc, #508]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a7e      	ldr	r2, [pc, #504]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	4b7c      	ldr	r3, [pc, #496]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a7b      	ldr	r2, [pc, #492]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	e01d      	b.n	8008d3c <HAL_RCC_OscConfig+0xd8>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d08:	d10c      	bne.n	8008d24 <HAL_RCC_OscConfig+0xc0>
 8008d0a:	4b76      	ldr	r3, [pc, #472]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a75      	ldr	r2, [pc, #468]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	4b73      	ldr	r3, [pc, #460]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a72      	ldr	r2, [pc, #456]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	e00b      	b.n	8008d3c <HAL_RCC_OscConfig+0xd8>
 8008d24:	4b6f      	ldr	r3, [pc, #444]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a6e      	ldr	r2, [pc, #440]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	4b6c      	ldr	r3, [pc, #432]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a6b      	ldr	r2, [pc, #428]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d013      	beq.n	8008d6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d44:	f7fe fd1e 	bl	8007784 <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d4c:	f7fe fd1a 	bl	8007784 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b64      	cmp	r3, #100	; 0x64
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e229      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d5e:	4b61      	ldr	r3, [pc, #388]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0f0      	beq.n	8008d4c <HAL_RCC_OscConfig+0xe8>
 8008d6a:	e014      	b.n	8008d96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6c:	f7fe fd0a 	bl	8007784 <HAL_GetTick>
 8008d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d72:	e008      	b.n	8008d86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d74:	f7fe fd06 	bl	8007784 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b64      	cmp	r3, #100	; 0x64
 8008d80:	d901      	bls.n	8008d86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e215      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d86:	4b57      	ldr	r3, [pc, #348]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f0      	bne.n	8008d74 <HAL_RCC_OscConfig+0x110>
 8008d92:	e000      	b.n	8008d96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d069      	beq.n	8008e76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008da2:	4b50      	ldr	r3, [pc, #320]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 030c 	and.w	r3, r3, #12
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00b      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dae:	4b4d      	ldr	r3, [pc, #308]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f003 030c 	and.w	r3, r3, #12
 8008db6:	2b08      	cmp	r3, #8
 8008db8:	d11c      	bne.n	8008df4 <HAL_RCC_OscConfig+0x190>
 8008dba:	4b4a      	ldr	r3, [pc, #296]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d116      	bne.n	8008df4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dc6:	4b47      	ldr	r3, [pc, #284]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d005      	beq.n	8008dde <HAL_RCC_OscConfig+0x17a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d001      	beq.n	8008dde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e1e9      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dde:	4b41      	ldr	r3, [pc, #260]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	493d      	ldr	r1, [pc, #244]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008df2:	e040      	b.n	8008e76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d023      	beq.n	8008e44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008dfc:	4b39      	ldr	r3, [pc, #228]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a38      	ldr	r2, [pc, #224]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e08:	f7fe fcbc 	bl	8007784 <HAL_GetTick>
 8008e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e0e:	e008      	b.n	8008e22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e10:	f7fe fcb8 	bl	8007784 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e1c7      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e22:	4b30      	ldr	r3, [pc, #192]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0302 	and.w	r3, r3, #2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0f0      	beq.n	8008e10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e2e:	4b2d      	ldr	r3, [pc, #180]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	4929      	ldr	r1, [pc, #164]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	600b      	str	r3, [r1, #0]
 8008e42:	e018      	b.n	8008e76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e44:	4b27      	ldr	r3, [pc, #156]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a26      	ldr	r2, [pc, #152]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e4a:	f023 0301 	bic.w	r3, r3, #1
 8008e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e50:	f7fe fc98 	bl	8007784 <HAL_GetTick>
 8008e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e56:	e008      	b.n	8008e6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e58:	f7fe fc94 	bl	8007784 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d901      	bls.n	8008e6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e1a3      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e6a:	4b1e      	ldr	r3, [pc, #120]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1f0      	bne.n	8008e58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d038      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d019      	beq.n	8008ebe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e8a:	4b16      	ldr	r3, [pc, #88]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e8e:	4a15      	ldr	r2, [pc, #84]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008e90:	f043 0301 	orr.w	r3, r3, #1
 8008e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e96:	f7fe fc75 	bl	8007784 <HAL_GetTick>
 8008e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e9e:	f7fe fc71 	bl	8007784 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e180      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eb0:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f0      	beq.n	8008e9e <HAL_RCC_OscConfig+0x23a>
 8008ebc:	e01a      	b.n	8008ef4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ebe:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ec2:	4a08      	ldr	r2, [pc, #32]	; (8008ee4 <HAL_RCC_OscConfig+0x280>)
 8008ec4:	f023 0301 	bic.w	r3, r3, #1
 8008ec8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eca:	f7fe fc5b 	bl	8007784 <HAL_GetTick>
 8008ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ed0:	e00a      	b.n	8008ee8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ed2:	f7fe fc57 	bl	8007784 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d903      	bls.n	8008ee8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e166      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
 8008ee4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ee8:	4b92      	ldr	r3, [pc, #584]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1ee      	bne.n	8008ed2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 80a4 	beq.w	800904a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f02:	4b8c      	ldr	r3, [pc, #560]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10d      	bne.n	8008f2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f0e:	4b89      	ldr	r3, [pc, #548]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	4a88      	ldr	r2, [pc, #544]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f18:	6413      	str	r3, [r2, #64]	; 0x40
 8008f1a:	4b86      	ldr	r3, [pc, #536]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f22:	60bb      	str	r3, [r7, #8]
 8008f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f26:	2301      	movs	r3, #1
 8008f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f2a:	4b83      	ldr	r3, [pc, #524]	; (8009138 <HAL_RCC_OscConfig+0x4d4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d118      	bne.n	8008f68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008f36:	4b80      	ldr	r3, [pc, #512]	; (8009138 <HAL_RCC_OscConfig+0x4d4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a7f      	ldr	r2, [pc, #508]	; (8009138 <HAL_RCC_OscConfig+0x4d4>)
 8008f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f42:	f7fe fc1f 	bl	8007784 <HAL_GetTick>
 8008f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f48:	e008      	b.n	8008f5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f4a:	f7fe fc1b 	bl	8007784 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	2b64      	cmp	r3, #100	; 0x64
 8008f56:	d901      	bls.n	8008f5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e12a      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f5c:	4b76      	ldr	r3, [pc, #472]	; (8009138 <HAL_RCC_OscConfig+0x4d4>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f0      	beq.n	8008f4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d106      	bne.n	8008f7e <HAL_RCC_OscConfig+0x31a>
 8008f70:	4b70      	ldr	r3, [pc, #448]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f74:	4a6f      	ldr	r2, [pc, #444]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f7c:	e02d      	b.n	8008fda <HAL_RCC_OscConfig+0x376>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10c      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x33c>
 8008f86:	4b6b      	ldr	r3, [pc, #428]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8a:	4a6a      	ldr	r2, [pc, #424]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f8c:	f023 0301 	bic.w	r3, r3, #1
 8008f90:	6713      	str	r3, [r2, #112]	; 0x70
 8008f92:	4b68      	ldr	r3, [pc, #416]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f96:	4a67      	ldr	r2, [pc, #412]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008f98:	f023 0304 	bic.w	r3, r3, #4
 8008f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f9e:	e01c      	b.n	8008fda <HAL_RCC_OscConfig+0x376>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2b05      	cmp	r3, #5
 8008fa6:	d10c      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x35e>
 8008fa8:	4b62      	ldr	r3, [pc, #392]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fac:	4a61      	ldr	r2, [pc, #388]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8008fb4:	4b5f      	ldr	r3, [pc, #380]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb8:	4a5e      	ldr	r2, [pc, #376]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8008fc0:	e00b      	b.n	8008fda <HAL_RCC_OscConfig+0x376>
 8008fc2:	4b5c      	ldr	r3, [pc, #368]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc6:	4a5b      	ldr	r2, [pc, #364]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008fc8:	f023 0301 	bic.w	r3, r3, #1
 8008fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8008fce:	4b59      	ldr	r3, [pc, #356]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd2:	4a58      	ldr	r2, [pc, #352]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8008fd4:	f023 0304 	bic.w	r3, r3, #4
 8008fd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d015      	beq.n	800900e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe2:	f7fe fbcf 	bl	8007784 <HAL_GetTick>
 8008fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fe8:	e00a      	b.n	8009000 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fea:	f7fe fbcb 	bl	8007784 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d901      	bls.n	8009000 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e0d8      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009000:	4b4c      	ldr	r3, [pc, #304]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8009002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0ee      	beq.n	8008fea <HAL_RCC_OscConfig+0x386>
 800900c:	e014      	b.n	8009038 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800900e:	f7fe fbb9 	bl	8007784 <HAL_GetTick>
 8009012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009014:	e00a      	b.n	800902c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009016:	f7fe fbb5 	bl	8007784 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	f241 3288 	movw	r2, #5000	; 0x1388
 8009024:	4293      	cmp	r3, r2
 8009026:	d901      	bls.n	800902c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e0c2      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800902c:	4b41      	ldr	r3, [pc, #260]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 800902e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1ee      	bne.n	8009016 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d105      	bne.n	800904a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800903e:	4b3d      	ldr	r3, [pc, #244]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	4a3c      	ldr	r2, [pc, #240]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8009044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009048:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 80ae 	beq.w	80091b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009054:	4b37      	ldr	r3, [pc, #220]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f003 030c 	and.w	r3, r3, #12
 800905c:	2b08      	cmp	r3, #8
 800905e:	d06d      	beq.n	800913c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d14b      	bne.n	8009100 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009068:	4b32      	ldr	r3, [pc, #200]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a31      	ldr	r2, [pc, #196]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 800906e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009074:	f7fe fb86 	bl	8007784 <HAL_GetTick>
 8009078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800907c:	f7fe fb82 	bl	8007784 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e091      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800908e:	4b29      	ldr	r3, [pc, #164]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1f0      	bne.n	800907c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69da      	ldr	r2, [r3, #28]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	019b      	lsls	r3, r3, #6
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b0:	085b      	lsrs	r3, r3, #1
 80090b2:	3b01      	subs	r3, #1
 80090b4:	041b      	lsls	r3, r3, #16
 80090b6:	431a      	orrs	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	061b      	lsls	r3, r3, #24
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c4:	071b      	lsls	r3, r3, #28
 80090c6:	491b      	ldr	r1, [pc, #108]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090cc:	4b19      	ldr	r3, [pc, #100]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a18      	ldr	r2, [pc, #96]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 80090d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7fe fb54 	bl	8007784 <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090e0:	f7fe fb50 	bl	8007784 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e05f      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090f2:	4b10      	ldr	r3, [pc, #64]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f0      	beq.n	80090e0 <HAL_RCC_OscConfig+0x47c>
 80090fe:	e057      	b.n	80091b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009100:	4b0c      	ldr	r3, [pc, #48]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a0b      	ldr	r2, [pc, #44]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8009106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800910a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910c:	f7fe fb3a 	bl	8007784 <HAL_GetTick>
 8009110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009112:	e008      	b.n	8009126 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009114:	f7fe fb36 	bl	8007784 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e045      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009126:	4b03      	ldr	r3, [pc, #12]	; (8009134 <HAL_RCC_OscConfig+0x4d0>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1f0      	bne.n	8009114 <HAL_RCC_OscConfig+0x4b0>
 8009132:	e03d      	b.n	80091b0 <HAL_RCC_OscConfig+0x54c>
 8009134:	40023800 	.word	0x40023800
 8009138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800913c:	4b1f      	ldr	r3, [pc, #124]	; (80091bc <HAL_RCC_OscConfig+0x558>)
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	2b01      	cmp	r3, #1
 8009148:	d030      	beq.n	80091ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009154:	429a      	cmp	r2, r3
 8009156:	d129      	bne.n	80091ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009162:	429a      	cmp	r2, r3
 8009164:	d122      	bne.n	80091ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800916c:	4013      	ands	r3, r2
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009172:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009174:	4293      	cmp	r3, r2
 8009176:	d119      	bne.n	80091ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009182:	085b      	lsrs	r3, r3, #1
 8009184:	3b01      	subs	r3, #1
 8009186:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009188:	429a      	cmp	r2, r3
 800918a:	d10f      	bne.n	80091ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009196:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009198:	429a      	cmp	r2, r3
 800919a:	d107      	bne.n	80091ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d001      	beq.n	80091b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e000      	b.n	80091b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40023800 	.word	0x40023800

080091c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e0d0      	b.n	800937a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091d8:	4b6a      	ldr	r3, [pc, #424]	; (8009384 <HAL_RCC_ClockConfig+0x1c4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d910      	bls.n	8009208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091e6:	4b67      	ldr	r3, [pc, #412]	; (8009384 <HAL_RCC_ClockConfig+0x1c4>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f023 020f 	bic.w	r2, r3, #15
 80091ee:	4965      	ldr	r1, [pc, #404]	; (8009384 <HAL_RCC_ClockConfig+0x1c4>)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091f6:	4b63      	ldr	r3, [pc, #396]	; (8009384 <HAL_RCC_ClockConfig+0x1c4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 030f 	and.w	r3, r3, #15
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d001      	beq.n	8009208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e0b8      	b.n	800937a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d020      	beq.n	8009256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009220:	4b59      	ldr	r3, [pc, #356]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	4a58      	ldr	r2, [pc, #352]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 8009226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800922a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009238:	4b53      	ldr	r3, [pc, #332]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	4a52      	ldr	r2, [pc, #328]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 800923e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009244:	4b50      	ldr	r3, [pc, #320]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	494d      	ldr	r1, [pc, #308]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 8009252:	4313      	orrs	r3, r2
 8009254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d040      	beq.n	80092e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d107      	bne.n	800927a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800926a:	4b47      	ldr	r3, [pc, #284]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d115      	bne.n	80092a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e07f      	b.n	800937a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2b02      	cmp	r3, #2
 8009280:	d107      	bne.n	8009292 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009282:	4b41      	ldr	r3, [pc, #260]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d109      	bne.n	80092a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e073      	b.n	800937a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009292:	4b3d      	ldr	r3, [pc, #244]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e06b      	b.n	800937a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092a2:	4b39      	ldr	r3, [pc, #228]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f023 0203 	bic.w	r2, r3, #3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	4936      	ldr	r1, [pc, #216]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 80092b0:	4313      	orrs	r3, r2
 80092b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b4:	f7fe fa66 	bl	8007784 <HAL_GetTick>
 80092b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ba:	e00a      	b.n	80092d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092bc:	f7fe fa62 	bl	8007784 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e053      	b.n	800937a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092d2:	4b2d      	ldr	r3, [pc, #180]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 020c 	and.w	r2, r3, #12
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d1eb      	bne.n	80092bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092e4:	4b27      	ldr	r3, [pc, #156]	; (8009384 <HAL_RCC_ClockConfig+0x1c4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 030f 	and.w	r3, r3, #15
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d210      	bcs.n	8009314 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092f2:	4b24      	ldr	r3, [pc, #144]	; (8009384 <HAL_RCC_ClockConfig+0x1c4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f023 020f 	bic.w	r2, r3, #15
 80092fa:	4922      	ldr	r1, [pc, #136]	; (8009384 <HAL_RCC_ClockConfig+0x1c4>)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	4313      	orrs	r3, r2
 8009300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009302:	4b20      	ldr	r3, [pc, #128]	; (8009384 <HAL_RCC_ClockConfig+0x1c4>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d001      	beq.n	8009314 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e032      	b.n	800937a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009320:	4b19      	ldr	r3, [pc, #100]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	4916      	ldr	r1, [pc, #88]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 800932e:	4313      	orrs	r3, r2
 8009330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0308 	and.w	r3, r3, #8
 800933a:	2b00      	cmp	r3, #0
 800933c:	d009      	beq.n	8009352 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	490e      	ldr	r1, [pc, #56]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 800934e:	4313      	orrs	r3, r2
 8009350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009352:	f000 f821 	bl	8009398 <HAL_RCC_GetSysClockFreq>
 8009356:	4602      	mov	r2, r0
 8009358:	4b0b      	ldr	r3, [pc, #44]	; (8009388 <HAL_RCC_ClockConfig+0x1c8>)
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	091b      	lsrs	r3, r3, #4
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	490a      	ldr	r1, [pc, #40]	; (800938c <HAL_RCC_ClockConfig+0x1cc>)
 8009364:	5ccb      	ldrb	r3, [r1, r3]
 8009366:	fa22 f303 	lsr.w	r3, r2, r3
 800936a:	4a09      	ldr	r2, [pc, #36]	; (8009390 <HAL_RCC_ClockConfig+0x1d0>)
 800936c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800936e:	4b09      	ldr	r3, [pc, #36]	; (8009394 <HAL_RCC_ClockConfig+0x1d4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4618      	mov	r0, r3
 8009374:	f7fd ff3a 	bl	80071ec <HAL_InitTick>

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	40023c00 	.word	0x40023c00
 8009388:	40023800 	.word	0x40023800
 800938c:	08011e4c 	.word	0x08011e4c
 8009390:	20000058 	.word	0x20000058
 8009394:	2000005c 	.word	0x2000005c

08009398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800939c:	b094      	sub	sp, #80	; 0x50
 800939e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	647b      	str	r3, [r7, #68]	; 0x44
 80093a4:	2300      	movs	r3, #0
 80093a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093a8:	2300      	movs	r3, #0
 80093aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093b0:	4b79      	ldr	r3, [pc, #484]	; (8009598 <HAL_RCC_GetSysClockFreq+0x200>)
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f003 030c 	and.w	r3, r3, #12
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d00d      	beq.n	80093d8 <HAL_RCC_GetSysClockFreq+0x40>
 80093bc:	2b08      	cmp	r3, #8
 80093be:	f200 80e1 	bhi.w	8009584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <HAL_RCC_GetSysClockFreq+0x34>
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d003      	beq.n	80093d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80093ca:	e0db      	b.n	8009584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80093cc:	4b73      	ldr	r3, [pc, #460]	; (800959c <HAL_RCC_GetSysClockFreq+0x204>)
 80093ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80093d0:	e0db      	b.n	800958a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80093d2:	4b73      	ldr	r3, [pc, #460]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80093d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80093d6:	e0d8      	b.n	800958a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093d8:	4b6f      	ldr	r3, [pc, #444]	; (8009598 <HAL_RCC_GetSysClockFreq+0x200>)
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80093e2:	4b6d      	ldr	r3, [pc, #436]	; (8009598 <HAL_RCC_GetSysClockFreq+0x200>)
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d063      	beq.n	80094b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093ee:	4b6a      	ldr	r3, [pc, #424]	; (8009598 <HAL_RCC_GetSysClockFreq+0x200>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	099b      	lsrs	r3, r3, #6
 80093f4:	2200      	movs	r2, #0
 80093f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80093f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009400:	633b      	str	r3, [r7, #48]	; 0x30
 8009402:	2300      	movs	r3, #0
 8009404:	637b      	str	r3, [r7, #52]	; 0x34
 8009406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800940a:	4622      	mov	r2, r4
 800940c:	462b      	mov	r3, r5
 800940e:	f04f 0000 	mov.w	r0, #0
 8009412:	f04f 0100 	mov.w	r1, #0
 8009416:	0159      	lsls	r1, r3, #5
 8009418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800941c:	0150      	lsls	r0, r2, #5
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4621      	mov	r1, r4
 8009424:	1a51      	subs	r1, r2, r1
 8009426:	6139      	str	r1, [r7, #16]
 8009428:	4629      	mov	r1, r5
 800942a:	eb63 0301 	sbc.w	r3, r3, r1
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	f04f 0300 	mov.w	r3, #0
 8009438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800943c:	4659      	mov	r1, fp
 800943e:	018b      	lsls	r3, r1, #6
 8009440:	4651      	mov	r1, sl
 8009442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009446:	4651      	mov	r1, sl
 8009448:	018a      	lsls	r2, r1, #6
 800944a:	4651      	mov	r1, sl
 800944c:	ebb2 0801 	subs.w	r8, r2, r1
 8009450:	4659      	mov	r1, fp
 8009452:	eb63 0901 	sbc.w	r9, r3, r1
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800946a:	4690      	mov	r8, r2
 800946c:	4699      	mov	r9, r3
 800946e:	4623      	mov	r3, r4
 8009470:	eb18 0303 	adds.w	r3, r8, r3
 8009474:	60bb      	str	r3, [r7, #8]
 8009476:	462b      	mov	r3, r5
 8009478:	eb49 0303 	adc.w	r3, r9, r3
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	f04f 0200 	mov.w	r2, #0
 8009482:	f04f 0300 	mov.w	r3, #0
 8009486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800948a:	4629      	mov	r1, r5
 800948c:	024b      	lsls	r3, r1, #9
 800948e:	4621      	mov	r1, r4
 8009490:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009494:	4621      	mov	r1, r4
 8009496:	024a      	lsls	r2, r1, #9
 8009498:	4610      	mov	r0, r2
 800949a:	4619      	mov	r1, r3
 800949c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949e:	2200      	movs	r2, #0
 80094a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80094a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094a8:	f7f6 ff22 	bl	80002f0 <__aeabi_uldivmod>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4613      	mov	r3, r2
 80094b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094b4:	e058      	b.n	8009568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094b6:	4b38      	ldr	r3, [pc, #224]	; (8009598 <HAL_RCC_GetSysClockFreq+0x200>)
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	099b      	lsrs	r3, r3, #6
 80094bc:	2200      	movs	r2, #0
 80094be:	4618      	mov	r0, r3
 80094c0:	4611      	mov	r1, r2
 80094c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80094c6:	623b      	str	r3, [r7, #32]
 80094c8:	2300      	movs	r3, #0
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
 80094cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80094d0:	4642      	mov	r2, r8
 80094d2:	464b      	mov	r3, r9
 80094d4:	f04f 0000 	mov.w	r0, #0
 80094d8:	f04f 0100 	mov.w	r1, #0
 80094dc:	0159      	lsls	r1, r3, #5
 80094de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80094e2:	0150      	lsls	r0, r2, #5
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4641      	mov	r1, r8
 80094ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80094ee:	4649      	mov	r1, r9
 80094f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80094f4:	f04f 0200 	mov.w	r2, #0
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009508:	ebb2 040a 	subs.w	r4, r2, sl
 800950c:	eb63 050b 	sbc.w	r5, r3, fp
 8009510:	f04f 0200 	mov.w	r2, #0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	00eb      	lsls	r3, r5, #3
 800951a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800951e:	00e2      	lsls	r2, r4, #3
 8009520:	4614      	mov	r4, r2
 8009522:	461d      	mov	r5, r3
 8009524:	4643      	mov	r3, r8
 8009526:	18e3      	adds	r3, r4, r3
 8009528:	603b      	str	r3, [r7, #0]
 800952a:	464b      	mov	r3, r9
 800952c:	eb45 0303 	adc.w	r3, r5, r3
 8009530:	607b      	str	r3, [r7, #4]
 8009532:	f04f 0200 	mov.w	r2, #0
 8009536:	f04f 0300 	mov.w	r3, #0
 800953a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800953e:	4629      	mov	r1, r5
 8009540:	028b      	lsls	r3, r1, #10
 8009542:	4621      	mov	r1, r4
 8009544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009548:	4621      	mov	r1, r4
 800954a:	028a      	lsls	r2, r1, #10
 800954c:	4610      	mov	r0, r2
 800954e:	4619      	mov	r1, r3
 8009550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009552:	2200      	movs	r2, #0
 8009554:	61bb      	str	r3, [r7, #24]
 8009556:	61fa      	str	r2, [r7, #28]
 8009558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800955c:	f7f6 fec8 	bl	80002f0 <__aeabi_uldivmod>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4613      	mov	r3, r2
 8009566:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009568:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <HAL_RCC_GetSysClockFreq+0x200>)
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	f003 0303 	and.w	r3, r3, #3
 8009572:	3301      	adds	r3, #1
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8009578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800957a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009582:	e002      	b.n	800958a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009584:	4b05      	ldr	r3, [pc, #20]	; (800959c <HAL_RCC_GetSysClockFreq+0x204>)
 8009586:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800958a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800958c:	4618      	mov	r0, r3
 800958e:	3750      	adds	r7, #80	; 0x50
 8009590:	46bd      	mov	sp, r7
 8009592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009596:	bf00      	nop
 8009598:	40023800 	.word	0x40023800
 800959c:	00f42400 	.word	0x00f42400
 80095a0:	007a1200 	.word	0x007a1200

080095a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095a8:	4b03      	ldr	r3, [pc, #12]	; (80095b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80095aa:	681b      	ldr	r3, [r3, #0]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20000058 	.word	0x20000058

080095bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80095c0:	f7ff fff0 	bl	80095a4 <HAL_RCC_GetHCLKFreq>
 80095c4:	4602      	mov	r2, r0
 80095c6:	4b05      	ldr	r3, [pc, #20]	; (80095dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	0a9b      	lsrs	r3, r3, #10
 80095cc:	f003 0307 	and.w	r3, r3, #7
 80095d0:	4903      	ldr	r1, [pc, #12]	; (80095e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095d2:	5ccb      	ldrb	r3, [r1, r3]
 80095d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095d8:	4618      	mov	r0, r3
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	40023800 	.word	0x40023800
 80095e0:	08011e5c 	.word	0x08011e5c

080095e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80095e8:	f7ff ffdc 	bl	80095a4 <HAL_RCC_GetHCLKFreq>
 80095ec:	4602      	mov	r2, r0
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	0b5b      	lsrs	r3, r3, #13
 80095f4:	f003 0307 	and.w	r3, r3, #7
 80095f8:	4903      	ldr	r1, [pc, #12]	; (8009608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095fa:	5ccb      	ldrb	r3, [r1, r3]
 80095fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009600:	4618      	mov	r0, r3
 8009602:	bd80      	pop	{r7, pc}
 8009604:	40023800 	.word	0x40023800
 8009608:	08011e5c 	.word	0x08011e5c

0800960c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	220f      	movs	r2, #15
 800961a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800961c:	4b12      	ldr	r3, [pc, #72]	; (8009668 <HAL_RCC_GetClockConfig+0x5c>)
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f003 0203 	and.w	r2, r3, #3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009628:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <HAL_RCC_GetClockConfig+0x5c>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <HAL_RCC_GetClockConfig+0x5c>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009640:	4b09      	ldr	r3, [pc, #36]	; (8009668 <HAL_RCC_GetClockConfig+0x5c>)
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	08db      	lsrs	r3, r3, #3
 8009646:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <HAL_RCC_GetClockConfig+0x60>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 020f 	and.w	r2, r3, #15
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	601a      	str	r2, [r3, #0]
}
 800965a:	bf00      	nop
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	40023800 	.word	0x40023800
 800966c:	40023c00 	.word	0x40023c00

08009670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d012      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009698:	4b69      	ldr	r3, [pc, #420]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	4a68      	ldr	r2, [pc, #416]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800969e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80096a2:	6093      	str	r3, [r2, #8]
 80096a4:	4b66      	ldr	r3, [pc, #408]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ac:	4964      	ldr	r1, [pc, #400]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80096ba:	2301      	movs	r3, #1
 80096bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d017      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096ca:	4b5d      	ldr	r3, [pc, #372]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d8:	4959      	ldr	r1, [pc, #356]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096e8:	d101      	bne.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80096ea:	2301      	movs	r3, #1
 80096ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80096f6:	2301      	movs	r3, #1
 80096f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d017      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009706:	4b4e      	ldr	r3, [pc, #312]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	494a      	ldr	r1, [pc, #296]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009716:	4313      	orrs	r3, r2
 8009718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009724:	d101      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009726:	2301      	movs	r3, #1
 8009728:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009732:	2301      	movs	r3, #1
 8009734:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009742:	2301      	movs	r3, #1
 8009744:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 808b 	beq.w	800986a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009754:	4b3a      	ldr	r3, [pc, #232]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	4a39      	ldr	r2, [pc, #228]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800975a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800975e:	6413      	str	r3, [r2, #64]	; 0x40
 8009760:	4b37      	ldr	r3, [pc, #220]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009768:	60bb      	str	r3, [r7, #8]
 800976a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800976c:	4b35      	ldr	r3, [pc, #212]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a34      	ldr	r2, [pc, #208]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009778:	f7fe f804 	bl	8007784 <HAL_GetTick>
 800977c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800977e:	e008      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009780:	f7fe f800 	bl	8007784 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b64      	cmp	r3, #100	; 0x64
 800978c:	d901      	bls.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e38f      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009792:	4b2c      	ldr	r3, [pc, #176]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0f0      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800979e:	4b28      	ldr	r3, [pc, #160]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d035      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d02e      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097bc:	4b20      	ldr	r3, [pc, #128]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80097c6:	4b1e      	ldr	r3, [pc, #120]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ca:	4a1d      	ldr	r2, [pc, #116]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097d2:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d6:	4a1a      	ldr	r2, [pc, #104]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80097de:	4a18      	ldr	r2, [pc, #96]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80097e4:	4b16      	ldr	r3, [pc, #88]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d114      	bne.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f0:	f7fd ffc8 	bl	8007784 <HAL_GetTick>
 80097f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097f6:	e00a      	b.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097f8:	f7fd ffc4 	bl	8007784 <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	f241 3288 	movw	r2, #5000	; 0x1388
 8009806:	4293      	cmp	r3, r2
 8009808:	d901      	bls.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e351      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800980e:	4b0c      	ldr	r3, [pc, #48]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0ee      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009826:	d111      	bne.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009828:	4b05      	ldr	r3, [pc, #20]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009834:	4b04      	ldr	r3, [pc, #16]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009836:	400b      	ands	r3, r1
 8009838:	4901      	ldr	r1, [pc, #4]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800983a:	4313      	orrs	r3, r2
 800983c:	608b      	str	r3, [r1, #8]
 800983e:	e00b      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009840:	40023800 	.word	0x40023800
 8009844:	40007000 	.word	0x40007000
 8009848:	0ffffcff 	.word	0x0ffffcff
 800984c:	4bac      	ldr	r3, [pc, #688]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	4aab      	ldr	r2, [pc, #684]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009852:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009856:	6093      	str	r3, [r2, #8]
 8009858:	4ba9      	ldr	r3, [pc, #676]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800985a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009864:	49a6      	ldr	r1, [pc, #664]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009866:	4313      	orrs	r3, r2
 8009868:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	2b00      	cmp	r3, #0
 8009874:	d010      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009876:	4ba2      	ldr	r3, [pc, #648]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800987c:	4aa0      	ldr	r2, [pc, #640]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800987e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009882:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009886:	4b9e      	ldr	r3, [pc, #632]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009888:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009890:	499b      	ldr	r1, [pc, #620]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009892:	4313      	orrs	r3, r2
 8009894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00a      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098a4:	4b96      	ldr	r3, [pc, #600]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80098a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098b2:	4993      	ldr	r1, [pc, #588]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098c6:	4b8e      	ldr	r3, [pc, #568]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80098c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d4:	498a      	ldr	r1, [pc, #552]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d00a      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80098e8:	4b85      	ldr	r3, [pc, #532]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80098ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098f6:	4982      	ldr	r1, [pc, #520]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800990a:	4b7d      	ldr	r3, [pc, #500]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800990c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009918:	4979      	ldr	r1, [pc, #484]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800991a:	4313      	orrs	r3, r2
 800991c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00a      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800992c:	4b74      	ldr	r3, [pc, #464]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800992e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009932:	f023 0203 	bic.w	r2, r3, #3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800993a:	4971      	ldr	r1, [pc, #452]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800993c:	4313      	orrs	r3, r2
 800993e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00a      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800994e:	4b6c      	ldr	r3, [pc, #432]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009954:	f023 020c 	bic.w	r2, r3, #12
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800995c:	4968      	ldr	r1, [pc, #416]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800995e:	4313      	orrs	r3, r2
 8009960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00a      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009970:	4b63      	ldr	r3, [pc, #396]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009976:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800997e:	4960      	ldr	r1, [pc, #384]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009980:	4313      	orrs	r3, r2
 8009982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00a      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009992:	4b5b      	ldr	r3, [pc, #364]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009998:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a0:	4957      	ldr	r1, [pc, #348]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00a      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80099b4:	4b52      	ldr	r3, [pc, #328]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c2:	494f      	ldr	r1, [pc, #316]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80099d6:	4b4a      	ldr	r3, [pc, #296]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e4:	4946      	ldr	r1, [pc, #280]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00a      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80099f8:	4b41      	ldr	r3, [pc, #260]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a06:	493e      	ldr	r1, [pc, #248]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009a1a:	4b39      	ldr	r3, [pc, #228]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a28:	4935      	ldr	r1, [pc, #212]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a3c:	4b30      	ldr	r3, [pc, #192]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a4a:	492d      	ldr	r1, [pc, #180]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d011      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009a5e:	4b28      	ldr	r3, [pc, #160]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a6c:	4924      	ldr	r1, [pc, #144]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a7c:	d101      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0308 	and.w	r3, r3, #8
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00a      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a9e:	4b18      	ldr	r3, [pc, #96]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aac:	4914      	ldr	r1, [pc, #80]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ac0:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ad0:	490b      	ldr	r1, [pc, #44]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00f      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009af4:	4902      	ldr	r1, [pc, #8]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009afc:	e002      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8009afe:	bf00      	nop
 8009b00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b10:	4b8a      	ldr	r3, [pc, #552]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b20:	4986      	ldr	r1, [pc, #536]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00b      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009b34:	4b81      	ldr	r3, [pc, #516]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b44:	497d      	ldr	r1, [pc, #500]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d006      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 80d6 	beq.w	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009b60:	4b76      	ldr	r3, [pc, #472]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a75      	ldr	r2, [pc, #468]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b6c:	f7fd fe0a 	bl	8007784 <HAL_GetTick>
 8009b70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b72:	e008      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b74:	f7fd fe06 	bl	8007784 <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	2b64      	cmp	r3, #100	; 0x64
 8009b80:	d901      	bls.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e195      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009b86:	4b6d      	ldr	r3, [pc, #436]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1f0      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d021      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d11d      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009ba6:	4b65      	ldr	r3, [pc, #404]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bac:	0c1b      	lsrs	r3, r3, #16
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009bb4:	4b61      	ldr	r3, [pc, #388]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bba:	0e1b      	lsrs	r3, r3, #24
 8009bbc:	f003 030f 	and.w	r3, r3, #15
 8009bc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	019a      	lsls	r2, r3, #6
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	041b      	lsls	r3, r3, #16
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	061b      	lsls	r3, r3, #24
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	071b      	lsls	r3, r3, #28
 8009bda:	4958      	ldr	r1, [pc, #352]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d004      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bf6:	d00a      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d02e      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c0c:	d129      	bne.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009c0e:	4b4b      	ldr	r3, [pc, #300]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c14:	0c1b      	lsrs	r3, r3, #16
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c1c:	4b47      	ldr	r3, [pc, #284]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c22:	0f1b      	lsrs	r3, r3, #28
 8009c24:	f003 0307 	and.w	r3, r3, #7
 8009c28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	019a      	lsls	r2, r3, #6
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	041b      	lsls	r3, r3, #16
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	061b      	lsls	r3, r3, #24
 8009c3c:	431a      	orrs	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	071b      	lsls	r3, r3, #28
 8009c42:	493e      	ldr	r1, [pc, #248]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009c4a:	4b3c      	ldr	r3, [pc, #240]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c50:	f023 021f 	bic.w	r2, r3, #31
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	4938      	ldr	r1, [pc, #224]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d01d      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009c6e:	4b33      	ldr	r3, [pc, #204]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c74:	0e1b      	lsrs	r3, r3, #24
 8009c76:	f003 030f 	and.w	r3, r3, #15
 8009c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c7c:	4b2f      	ldr	r3, [pc, #188]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c82:	0f1b      	lsrs	r3, r3, #28
 8009c84:	f003 0307 	and.w	r3, r3, #7
 8009c88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	019a      	lsls	r2, r3, #6
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	431a      	orrs	r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	061b      	lsls	r3, r3, #24
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	071b      	lsls	r3, r3, #28
 8009ca2:	4926      	ldr	r1, [pc, #152]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d011      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	019a      	lsls	r2, r3, #6
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	041b      	lsls	r3, r3, #16
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	061b      	lsls	r3, r3, #24
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	071b      	lsls	r3, r3, #28
 8009cd2:	491a      	ldr	r1, [pc, #104]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009cda:	4b18      	ldr	r3, [pc, #96]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a17      	ldr	r2, [pc, #92]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ce6:	f7fd fd4d 	bl	8007784 <HAL_GetTick>
 8009cea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009cec:	e008      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009cee:	f7fd fd49 	bl	8007784 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	2b64      	cmp	r3, #100	; 0x64
 8009cfa:	d901      	bls.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e0d8      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d00:	4b0e      	ldr	r3, [pc, #56]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0f0      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	f040 80ce 	bne.w	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009d14:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d20:	f7fd fd30 	bl	8007784 <HAL_GetTick>
 8009d24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d26:	e00b      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009d28:	f7fd fd2c 	bl	8007784 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	2b64      	cmp	r3, #100	; 0x64
 8009d34:	d904      	bls.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	e0bb      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009d3a:	bf00      	nop
 8009d3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d40:	4b5e      	ldr	r3, [pc, #376]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d4c:	d0ec      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d02e      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d12a      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009d76:	4b51      	ldr	r3, [pc, #324]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d7c:	0c1b      	lsrs	r3, r3, #16
 8009d7e:	f003 0303 	and.w	r3, r3, #3
 8009d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d84:	4b4d      	ldr	r3, [pc, #308]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8a:	0f1b      	lsrs	r3, r3, #28
 8009d8c:	f003 0307 	and.w	r3, r3, #7
 8009d90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	019a      	lsls	r2, r3, #6
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	041b      	lsls	r3, r3, #16
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	061b      	lsls	r3, r3, #24
 8009da4:	431a      	orrs	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	071b      	lsls	r3, r3, #28
 8009daa:	4944      	ldr	r1, [pc, #272]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009db2:	4b42      	ldr	r3, [pc, #264]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	021b      	lsls	r3, r3, #8
 8009dc4:	493d      	ldr	r1, [pc, #244]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d022      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009de0:	d11d      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009de2:	4b36      	ldr	r3, [pc, #216]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de8:	0e1b      	lsrs	r3, r3, #24
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009df0:	4b32      	ldr	r3, [pc, #200]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df6:	0f1b      	lsrs	r3, r3, #28
 8009df8:	f003 0307 	and.w	r3, r3, #7
 8009dfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	019a      	lsls	r2, r3, #6
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	041b      	lsls	r3, r3, #16
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	061b      	lsls	r3, r3, #24
 8009e10:	431a      	orrs	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	071b      	lsls	r3, r3, #28
 8009e16:	4929      	ldr	r1, [pc, #164]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0308 	and.w	r3, r3, #8
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d028      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009e2a:	4b24      	ldr	r3, [pc, #144]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e30:	0e1b      	lsrs	r3, r3, #24
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009e38:	4b20      	ldr	r3, [pc, #128]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3e:	0c1b      	lsrs	r3, r3, #16
 8009e40:	f003 0303 	and.w	r3, r3, #3
 8009e44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	019a      	lsls	r2, r3, #6
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	041b      	lsls	r3, r3, #16
 8009e50:	431a      	orrs	r2, r3
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	061b      	lsls	r3, r3, #24
 8009e56:	431a      	orrs	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	071b      	lsls	r3, r3, #28
 8009e5e:	4917      	ldr	r1, [pc, #92]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009e66:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	4911      	ldr	r1, [pc, #68]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009e7c:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a0e      	ldr	r2, [pc, #56]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e88:	f7fd fc7c 	bl	8007784 <HAL_GetTick>
 8009e8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e8e:	e008      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e90:	f7fd fc78 	bl	8007784 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	2b64      	cmp	r3, #100	; 0x64
 8009e9c:	d901      	bls.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e007      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ea2:	4b06      	ldr	r3, [pc, #24]	; (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eae:	d1ef      	bne.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	40023800 	.word	0x40023800

08009ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e049      	b.n	8009f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f841 	bl	8009f6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f000 fa00 	bl	800a304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
	...

08009f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d001      	beq.n	8009f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e054      	b.n	800a046 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f042 0201 	orr.w	r2, r2, #1
 8009fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a26      	ldr	r2, [pc, #152]	; (800a054 <HAL_TIM_Base_Start_IT+0xd0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d022      	beq.n	800a004 <HAL_TIM_Base_Start_IT+0x80>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc6:	d01d      	beq.n	800a004 <HAL_TIM_Base_Start_IT+0x80>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a22      	ldr	r2, [pc, #136]	; (800a058 <HAL_TIM_Base_Start_IT+0xd4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d018      	beq.n	800a004 <HAL_TIM_Base_Start_IT+0x80>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a21      	ldr	r2, [pc, #132]	; (800a05c <HAL_TIM_Base_Start_IT+0xd8>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d013      	beq.n	800a004 <HAL_TIM_Base_Start_IT+0x80>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a1f      	ldr	r2, [pc, #124]	; (800a060 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d00e      	beq.n	800a004 <HAL_TIM_Base_Start_IT+0x80>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a1e      	ldr	r2, [pc, #120]	; (800a064 <HAL_TIM_Base_Start_IT+0xe0>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d009      	beq.n	800a004 <HAL_TIM_Base_Start_IT+0x80>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a1c      	ldr	r2, [pc, #112]	; (800a068 <HAL_TIM_Base_Start_IT+0xe4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d004      	beq.n	800a004 <HAL_TIM_Base_Start_IT+0x80>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a1b      	ldr	r2, [pc, #108]	; (800a06c <HAL_TIM_Base_Start_IT+0xe8>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d115      	bne.n	800a030 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	4b19      	ldr	r3, [pc, #100]	; (800a070 <HAL_TIM_Base_Start_IT+0xec>)
 800a00c:	4013      	ands	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b06      	cmp	r3, #6
 800a014:	d015      	beq.n	800a042 <HAL_TIM_Base_Start_IT+0xbe>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a01c:	d011      	beq.n	800a042 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f042 0201 	orr.w	r2, r2, #1
 800a02c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a02e:	e008      	b.n	800a042 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f042 0201 	orr.w	r2, r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	e000      	b.n	800a044 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a042:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40010000 	.word	0x40010000
 800a058:	40000400 	.word	0x40000400
 800a05c:	40000800 	.word	0x40000800
 800a060:	40000c00 	.word	0x40000c00
 800a064:	40010400 	.word	0x40010400
 800a068:	40014000 	.word	0x40014000
 800a06c:	40001800 	.word	0x40001800
 800a070:	00010007 	.word	0x00010007

0800a074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b02      	cmp	r3, #2
 800a088:	d122      	bne.n	800a0d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b02      	cmp	r3, #2
 800a096:	d11b      	bne.n	800a0d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f06f 0202 	mvn.w	r2, #2
 800a0a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f905 	bl	800a2c6 <HAL_TIM_IC_CaptureCallback>
 800a0bc:	e005      	b.n	800a0ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f8f7 	bl	800a2b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f908 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	f003 0304 	and.w	r3, r3, #4
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d122      	bne.n	800a124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d11b      	bne.n	800a124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f06f 0204 	mvn.w	r2, #4
 800a0f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a106:	2b00      	cmp	r3, #0
 800a108:	d003      	beq.n	800a112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f8db 	bl	800a2c6 <HAL_TIM_IC_CaptureCallback>
 800a110:	e005      	b.n	800a11e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f8cd 	bl	800a2b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f8de 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	f003 0308 	and.w	r3, r3, #8
 800a12e:	2b08      	cmp	r3, #8
 800a130:	d122      	bne.n	800a178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	2b08      	cmp	r3, #8
 800a13e:	d11b      	bne.n	800a178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f06f 0208 	mvn.w	r2, #8
 800a148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2204      	movs	r2, #4
 800a14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f8b1 	bl	800a2c6 <HAL_TIM_IC_CaptureCallback>
 800a164:	e005      	b.n	800a172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f8a3 	bl	800a2b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f8b4 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	f003 0310 	and.w	r3, r3, #16
 800a182:	2b10      	cmp	r3, #16
 800a184:	d122      	bne.n	800a1cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	f003 0310 	and.w	r3, r3, #16
 800a190:	2b10      	cmp	r3, #16
 800a192:	d11b      	bne.n	800a1cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f06f 0210 	mvn.w	r2, #16
 800a19c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2208      	movs	r2, #8
 800a1a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f887 	bl	800a2c6 <HAL_TIM_IC_CaptureCallback>
 800a1b8:	e005      	b.n	800a1c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f879 	bl	800a2b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f88a 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d10e      	bne.n	800a1f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d107      	bne.n	800a1f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f06f 0201 	mvn.w	r2, #1
 800a1f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7fb fa62 	bl	80056bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a202:	2b80      	cmp	r3, #128	; 0x80
 800a204:	d10e      	bne.n	800a224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a210:	2b80      	cmp	r3, #128	; 0x80
 800a212:	d107      	bne.n	800a224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f91a 	bl	800a458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a232:	d10e      	bne.n	800a252 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23e:	2b80      	cmp	r3, #128	; 0x80
 800a240:	d107      	bne.n	800a252 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a24a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f90d 	bl	800a46c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25c:	2b40      	cmp	r3, #64	; 0x40
 800a25e:	d10e      	bne.n	800a27e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26a:	2b40      	cmp	r3, #64	; 0x40
 800a26c:	d107      	bne.n	800a27e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f838 	bl	800a2ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d10e      	bne.n	800a2aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f003 0320 	and.w	r3, r3, #32
 800a296:	2b20      	cmp	r3, #32
 800a298:	d107      	bne.n	800a2aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f06f 0220 	mvn.w	r2, #32
 800a2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f8cd 	bl	800a444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2ba:	bf00      	nop
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b083      	sub	sp, #12
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
	...

0800a304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a40      	ldr	r2, [pc, #256]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d013      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a322:	d00f      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a3d      	ldr	r2, [pc, #244]	; (800a41c <TIM_Base_SetConfig+0x118>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00b      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a3c      	ldr	r2, [pc, #240]	; (800a420 <TIM_Base_SetConfig+0x11c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d007      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a3b      	ldr	r2, [pc, #236]	; (800a424 <TIM_Base_SetConfig+0x120>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d003      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a3a      	ldr	r2, [pc, #232]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d108      	bne.n	800a356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	4313      	orrs	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a2f      	ldr	r2, [pc, #188]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d02b      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a364:	d027      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a2c      	ldr	r2, [pc, #176]	; (800a41c <TIM_Base_SetConfig+0x118>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d023      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a2b      	ldr	r2, [pc, #172]	; (800a420 <TIM_Base_SetConfig+0x11c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d01f      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a2a      	ldr	r2, [pc, #168]	; (800a424 <TIM_Base_SetConfig+0x120>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d01b      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a29      	ldr	r2, [pc, #164]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d017      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a28      	ldr	r2, [pc, #160]	; (800a42c <TIM_Base_SetConfig+0x128>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d013      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a27      	ldr	r2, [pc, #156]	; (800a430 <TIM_Base_SetConfig+0x12c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d00f      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a26      	ldr	r2, [pc, #152]	; (800a434 <TIM_Base_SetConfig+0x130>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d00b      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a25      	ldr	r2, [pc, #148]	; (800a438 <TIM_Base_SetConfig+0x134>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d007      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a24      	ldr	r2, [pc, #144]	; (800a43c <TIM_Base_SetConfig+0x138>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d003      	beq.n	800a3b6 <TIM_Base_SetConfig+0xb2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a23      	ldr	r2, [pc, #140]	; (800a440 <TIM_Base_SetConfig+0x13c>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d108      	bne.n	800a3c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a0a      	ldr	r2, [pc, #40]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d003      	beq.n	800a3fc <TIM_Base_SetConfig+0xf8>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a0c      	ldr	r2, [pc, #48]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d103      	bne.n	800a404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	691a      	ldr	r2, [r3, #16]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	615a      	str	r2, [r3, #20]
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	40010000 	.word	0x40010000
 800a41c:	40000400 	.word	0x40000400
 800a420:	40000800 	.word	0x40000800
 800a424:	40000c00 	.word	0x40000c00
 800a428:	40010400 	.word	0x40010400
 800a42c:	40014000 	.word	0x40014000
 800a430:	40014400 	.word	0x40014400
 800a434:	40014800 	.word	0x40014800
 800a438:	40001800 	.word	0x40001800
 800a43c:	40001c00 	.word	0x40001c00
 800a440:	40002000 	.word	0x40002000

0800a444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e040      	b.n	800a514 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7fd f81e 	bl	80074e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2224      	movs	r2, #36	; 0x24
 800a4ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0201 	bic.w	r2, r2, #1
 800a4bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f82c 	bl	800a51c <UART_SetConfig>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d101      	bne.n	800a4ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e022      	b.n	800a514 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fa84 	bl	800a9e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689a      	ldr	r2, [r3, #8]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0201 	orr.w	r2, r2, #1
 800a50a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fb0b 	bl	800ab28 <UART_CheckIdleState>
 800a512:	4603      	mov	r3, r0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	431a      	orrs	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	431a      	orrs	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	4ba6      	ldr	r3, [pc, #664]	; (800a7e0 <UART_SetConfig+0x2c4>)
 800a548:	4013      	ands	r3, r2
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	6979      	ldr	r1, [r7, #20]
 800a550:	430b      	orrs	r3, r1
 800a552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68da      	ldr	r2, [r3, #12]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	4313      	orrs	r3, r2
 800a578:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a94      	ldr	r2, [pc, #592]	; (800a7e4 <UART_SetConfig+0x2c8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d120      	bne.n	800a5da <UART_SetConfig+0xbe>
 800a598:	4b93      	ldr	r3, [pc, #588]	; (800a7e8 <UART_SetConfig+0x2cc>)
 800a59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a59e:	f003 0303 	and.w	r3, r3, #3
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d816      	bhi.n	800a5d4 <UART_SetConfig+0xb8>
 800a5a6:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <UART_SetConfig+0x90>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a5bd 	.word	0x0800a5bd
 800a5b0:	0800a5c9 	.word	0x0800a5c9
 800a5b4:	0800a5c3 	.word	0x0800a5c3
 800a5b8:	0800a5cf 	.word	0x0800a5cf
 800a5bc:	2301      	movs	r3, #1
 800a5be:	77fb      	strb	r3, [r7, #31]
 800a5c0:	e150      	b.n	800a864 <UART_SetConfig+0x348>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	77fb      	strb	r3, [r7, #31]
 800a5c6:	e14d      	b.n	800a864 <UART_SetConfig+0x348>
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	77fb      	strb	r3, [r7, #31]
 800a5cc:	e14a      	b.n	800a864 <UART_SetConfig+0x348>
 800a5ce:	2308      	movs	r3, #8
 800a5d0:	77fb      	strb	r3, [r7, #31]
 800a5d2:	e147      	b.n	800a864 <UART_SetConfig+0x348>
 800a5d4:	2310      	movs	r3, #16
 800a5d6:	77fb      	strb	r3, [r7, #31]
 800a5d8:	e144      	b.n	800a864 <UART_SetConfig+0x348>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a83      	ldr	r2, [pc, #524]	; (800a7ec <UART_SetConfig+0x2d0>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d132      	bne.n	800a64a <UART_SetConfig+0x12e>
 800a5e4:	4b80      	ldr	r3, [pc, #512]	; (800a7e8 <UART_SetConfig+0x2cc>)
 800a5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ea:	f003 030c 	and.w	r3, r3, #12
 800a5ee:	2b0c      	cmp	r3, #12
 800a5f0:	d828      	bhi.n	800a644 <UART_SetConfig+0x128>
 800a5f2:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <UART_SetConfig+0xdc>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a62d 	.word	0x0800a62d
 800a5fc:	0800a645 	.word	0x0800a645
 800a600:	0800a645 	.word	0x0800a645
 800a604:	0800a645 	.word	0x0800a645
 800a608:	0800a639 	.word	0x0800a639
 800a60c:	0800a645 	.word	0x0800a645
 800a610:	0800a645 	.word	0x0800a645
 800a614:	0800a645 	.word	0x0800a645
 800a618:	0800a633 	.word	0x0800a633
 800a61c:	0800a645 	.word	0x0800a645
 800a620:	0800a645 	.word	0x0800a645
 800a624:	0800a645 	.word	0x0800a645
 800a628:	0800a63f 	.word	0x0800a63f
 800a62c:	2300      	movs	r3, #0
 800a62e:	77fb      	strb	r3, [r7, #31]
 800a630:	e118      	b.n	800a864 <UART_SetConfig+0x348>
 800a632:	2302      	movs	r3, #2
 800a634:	77fb      	strb	r3, [r7, #31]
 800a636:	e115      	b.n	800a864 <UART_SetConfig+0x348>
 800a638:	2304      	movs	r3, #4
 800a63a:	77fb      	strb	r3, [r7, #31]
 800a63c:	e112      	b.n	800a864 <UART_SetConfig+0x348>
 800a63e:	2308      	movs	r3, #8
 800a640:	77fb      	strb	r3, [r7, #31]
 800a642:	e10f      	b.n	800a864 <UART_SetConfig+0x348>
 800a644:	2310      	movs	r3, #16
 800a646:	77fb      	strb	r3, [r7, #31]
 800a648:	e10c      	b.n	800a864 <UART_SetConfig+0x348>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a68      	ldr	r2, [pc, #416]	; (800a7f0 <UART_SetConfig+0x2d4>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d120      	bne.n	800a696 <UART_SetConfig+0x17a>
 800a654:	4b64      	ldr	r3, [pc, #400]	; (800a7e8 <UART_SetConfig+0x2cc>)
 800a656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a65e:	2b30      	cmp	r3, #48	; 0x30
 800a660:	d013      	beq.n	800a68a <UART_SetConfig+0x16e>
 800a662:	2b30      	cmp	r3, #48	; 0x30
 800a664:	d814      	bhi.n	800a690 <UART_SetConfig+0x174>
 800a666:	2b20      	cmp	r3, #32
 800a668:	d009      	beq.n	800a67e <UART_SetConfig+0x162>
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	d810      	bhi.n	800a690 <UART_SetConfig+0x174>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <UART_SetConfig+0x15c>
 800a672:	2b10      	cmp	r3, #16
 800a674:	d006      	beq.n	800a684 <UART_SetConfig+0x168>
 800a676:	e00b      	b.n	800a690 <UART_SetConfig+0x174>
 800a678:	2300      	movs	r3, #0
 800a67a:	77fb      	strb	r3, [r7, #31]
 800a67c:	e0f2      	b.n	800a864 <UART_SetConfig+0x348>
 800a67e:	2302      	movs	r3, #2
 800a680:	77fb      	strb	r3, [r7, #31]
 800a682:	e0ef      	b.n	800a864 <UART_SetConfig+0x348>
 800a684:	2304      	movs	r3, #4
 800a686:	77fb      	strb	r3, [r7, #31]
 800a688:	e0ec      	b.n	800a864 <UART_SetConfig+0x348>
 800a68a:	2308      	movs	r3, #8
 800a68c:	77fb      	strb	r3, [r7, #31]
 800a68e:	e0e9      	b.n	800a864 <UART_SetConfig+0x348>
 800a690:	2310      	movs	r3, #16
 800a692:	77fb      	strb	r3, [r7, #31]
 800a694:	e0e6      	b.n	800a864 <UART_SetConfig+0x348>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a56      	ldr	r2, [pc, #344]	; (800a7f4 <UART_SetConfig+0x2d8>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d120      	bne.n	800a6e2 <UART_SetConfig+0x1c6>
 800a6a0:	4b51      	ldr	r3, [pc, #324]	; (800a7e8 <UART_SetConfig+0x2cc>)
 800a6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a6aa:	2bc0      	cmp	r3, #192	; 0xc0
 800a6ac:	d013      	beq.n	800a6d6 <UART_SetConfig+0x1ba>
 800a6ae:	2bc0      	cmp	r3, #192	; 0xc0
 800a6b0:	d814      	bhi.n	800a6dc <UART_SetConfig+0x1c0>
 800a6b2:	2b80      	cmp	r3, #128	; 0x80
 800a6b4:	d009      	beq.n	800a6ca <UART_SetConfig+0x1ae>
 800a6b6:	2b80      	cmp	r3, #128	; 0x80
 800a6b8:	d810      	bhi.n	800a6dc <UART_SetConfig+0x1c0>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <UART_SetConfig+0x1a8>
 800a6be:	2b40      	cmp	r3, #64	; 0x40
 800a6c0:	d006      	beq.n	800a6d0 <UART_SetConfig+0x1b4>
 800a6c2:	e00b      	b.n	800a6dc <UART_SetConfig+0x1c0>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	77fb      	strb	r3, [r7, #31]
 800a6c8:	e0cc      	b.n	800a864 <UART_SetConfig+0x348>
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	77fb      	strb	r3, [r7, #31]
 800a6ce:	e0c9      	b.n	800a864 <UART_SetConfig+0x348>
 800a6d0:	2304      	movs	r3, #4
 800a6d2:	77fb      	strb	r3, [r7, #31]
 800a6d4:	e0c6      	b.n	800a864 <UART_SetConfig+0x348>
 800a6d6:	2308      	movs	r3, #8
 800a6d8:	77fb      	strb	r3, [r7, #31]
 800a6da:	e0c3      	b.n	800a864 <UART_SetConfig+0x348>
 800a6dc:	2310      	movs	r3, #16
 800a6de:	77fb      	strb	r3, [r7, #31]
 800a6e0:	e0c0      	b.n	800a864 <UART_SetConfig+0x348>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a44      	ldr	r2, [pc, #272]	; (800a7f8 <UART_SetConfig+0x2dc>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d125      	bne.n	800a738 <UART_SetConfig+0x21c>
 800a6ec:	4b3e      	ldr	r3, [pc, #248]	; (800a7e8 <UART_SetConfig+0x2cc>)
 800a6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6fa:	d017      	beq.n	800a72c <UART_SetConfig+0x210>
 800a6fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a700:	d817      	bhi.n	800a732 <UART_SetConfig+0x216>
 800a702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a706:	d00b      	beq.n	800a720 <UART_SetConfig+0x204>
 800a708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a70c:	d811      	bhi.n	800a732 <UART_SetConfig+0x216>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <UART_SetConfig+0x1fe>
 800a712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a716:	d006      	beq.n	800a726 <UART_SetConfig+0x20a>
 800a718:	e00b      	b.n	800a732 <UART_SetConfig+0x216>
 800a71a:	2300      	movs	r3, #0
 800a71c:	77fb      	strb	r3, [r7, #31]
 800a71e:	e0a1      	b.n	800a864 <UART_SetConfig+0x348>
 800a720:	2302      	movs	r3, #2
 800a722:	77fb      	strb	r3, [r7, #31]
 800a724:	e09e      	b.n	800a864 <UART_SetConfig+0x348>
 800a726:	2304      	movs	r3, #4
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e09b      	b.n	800a864 <UART_SetConfig+0x348>
 800a72c:	2308      	movs	r3, #8
 800a72e:	77fb      	strb	r3, [r7, #31]
 800a730:	e098      	b.n	800a864 <UART_SetConfig+0x348>
 800a732:	2310      	movs	r3, #16
 800a734:	77fb      	strb	r3, [r7, #31]
 800a736:	e095      	b.n	800a864 <UART_SetConfig+0x348>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a2f      	ldr	r2, [pc, #188]	; (800a7fc <UART_SetConfig+0x2e0>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d125      	bne.n	800a78e <UART_SetConfig+0x272>
 800a742:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <UART_SetConfig+0x2cc>)
 800a744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a74c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a750:	d017      	beq.n	800a782 <UART_SetConfig+0x266>
 800a752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a756:	d817      	bhi.n	800a788 <UART_SetConfig+0x26c>
 800a758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a75c:	d00b      	beq.n	800a776 <UART_SetConfig+0x25a>
 800a75e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a762:	d811      	bhi.n	800a788 <UART_SetConfig+0x26c>
 800a764:	2b00      	cmp	r3, #0
 800a766:	d003      	beq.n	800a770 <UART_SetConfig+0x254>
 800a768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a76c:	d006      	beq.n	800a77c <UART_SetConfig+0x260>
 800a76e:	e00b      	b.n	800a788 <UART_SetConfig+0x26c>
 800a770:	2301      	movs	r3, #1
 800a772:	77fb      	strb	r3, [r7, #31]
 800a774:	e076      	b.n	800a864 <UART_SetConfig+0x348>
 800a776:	2302      	movs	r3, #2
 800a778:	77fb      	strb	r3, [r7, #31]
 800a77a:	e073      	b.n	800a864 <UART_SetConfig+0x348>
 800a77c:	2304      	movs	r3, #4
 800a77e:	77fb      	strb	r3, [r7, #31]
 800a780:	e070      	b.n	800a864 <UART_SetConfig+0x348>
 800a782:	2308      	movs	r3, #8
 800a784:	77fb      	strb	r3, [r7, #31]
 800a786:	e06d      	b.n	800a864 <UART_SetConfig+0x348>
 800a788:	2310      	movs	r3, #16
 800a78a:	77fb      	strb	r3, [r7, #31]
 800a78c:	e06a      	b.n	800a864 <UART_SetConfig+0x348>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a1b      	ldr	r2, [pc, #108]	; (800a800 <UART_SetConfig+0x2e4>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d138      	bne.n	800a80a <UART_SetConfig+0x2ee>
 800a798:	4b13      	ldr	r3, [pc, #76]	; (800a7e8 <UART_SetConfig+0x2cc>)
 800a79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a79e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a7a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7a6:	d017      	beq.n	800a7d8 <UART_SetConfig+0x2bc>
 800a7a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7ac:	d82a      	bhi.n	800a804 <UART_SetConfig+0x2e8>
 800a7ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7b2:	d00b      	beq.n	800a7cc <UART_SetConfig+0x2b0>
 800a7b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7b8:	d824      	bhi.n	800a804 <UART_SetConfig+0x2e8>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <UART_SetConfig+0x2aa>
 800a7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c2:	d006      	beq.n	800a7d2 <UART_SetConfig+0x2b6>
 800a7c4:	e01e      	b.n	800a804 <UART_SetConfig+0x2e8>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	77fb      	strb	r3, [r7, #31]
 800a7ca:	e04b      	b.n	800a864 <UART_SetConfig+0x348>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	77fb      	strb	r3, [r7, #31]
 800a7d0:	e048      	b.n	800a864 <UART_SetConfig+0x348>
 800a7d2:	2304      	movs	r3, #4
 800a7d4:	77fb      	strb	r3, [r7, #31]
 800a7d6:	e045      	b.n	800a864 <UART_SetConfig+0x348>
 800a7d8:	2308      	movs	r3, #8
 800a7da:	77fb      	strb	r3, [r7, #31]
 800a7dc:	e042      	b.n	800a864 <UART_SetConfig+0x348>
 800a7de:	bf00      	nop
 800a7e0:	efff69f3 	.word	0xefff69f3
 800a7e4:	40011000 	.word	0x40011000
 800a7e8:	40023800 	.word	0x40023800
 800a7ec:	40004400 	.word	0x40004400
 800a7f0:	40004800 	.word	0x40004800
 800a7f4:	40004c00 	.word	0x40004c00
 800a7f8:	40005000 	.word	0x40005000
 800a7fc:	40011400 	.word	0x40011400
 800a800:	40007800 	.word	0x40007800
 800a804:	2310      	movs	r3, #16
 800a806:	77fb      	strb	r3, [r7, #31]
 800a808:	e02c      	b.n	800a864 <UART_SetConfig+0x348>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a72      	ldr	r2, [pc, #456]	; (800a9d8 <UART_SetConfig+0x4bc>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d125      	bne.n	800a860 <UART_SetConfig+0x344>
 800a814:	4b71      	ldr	r3, [pc, #452]	; (800a9dc <UART_SetConfig+0x4c0>)
 800a816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a81a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a81e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a822:	d017      	beq.n	800a854 <UART_SetConfig+0x338>
 800a824:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a828:	d817      	bhi.n	800a85a <UART_SetConfig+0x33e>
 800a82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a82e:	d00b      	beq.n	800a848 <UART_SetConfig+0x32c>
 800a830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a834:	d811      	bhi.n	800a85a <UART_SetConfig+0x33e>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <UART_SetConfig+0x326>
 800a83a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a83e:	d006      	beq.n	800a84e <UART_SetConfig+0x332>
 800a840:	e00b      	b.n	800a85a <UART_SetConfig+0x33e>
 800a842:	2300      	movs	r3, #0
 800a844:	77fb      	strb	r3, [r7, #31]
 800a846:	e00d      	b.n	800a864 <UART_SetConfig+0x348>
 800a848:	2302      	movs	r3, #2
 800a84a:	77fb      	strb	r3, [r7, #31]
 800a84c:	e00a      	b.n	800a864 <UART_SetConfig+0x348>
 800a84e:	2304      	movs	r3, #4
 800a850:	77fb      	strb	r3, [r7, #31]
 800a852:	e007      	b.n	800a864 <UART_SetConfig+0x348>
 800a854:	2308      	movs	r3, #8
 800a856:	77fb      	strb	r3, [r7, #31]
 800a858:	e004      	b.n	800a864 <UART_SetConfig+0x348>
 800a85a:	2310      	movs	r3, #16
 800a85c:	77fb      	strb	r3, [r7, #31]
 800a85e:	e001      	b.n	800a864 <UART_SetConfig+0x348>
 800a860:	2310      	movs	r3, #16
 800a862:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a86c:	d15b      	bne.n	800a926 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a86e:	7ffb      	ldrb	r3, [r7, #31]
 800a870:	2b08      	cmp	r3, #8
 800a872:	d828      	bhi.n	800a8c6 <UART_SetConfig+0x3aa>
 800a874:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <UART_SetConfig+0x360>)
 800a876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87a:	bf00      	nop
 800a87c:	0800a8a1 	.word	0x0800a8a1
 800a880:	0800a8a9 	.word	0x0800a8a9
 800a884:	0800a8b1 	.word	0x0800a8b1
 800a888:	0800a8c7 	.word	0x0800a8c7
 800a88c:	0800a8b7 	.word	0x0800a8b7
 800a890:	0800a8c7 	.word	0x0800a8c7
 800a894:	0800a8c7 	.word	0x0800a8c7
 800a898:	0800a8c7 	.word	0x0800a8c7
 800a89c:	0800a8bf 	.word	0x0800a8bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8a0:	f7fe fe8c 	bl	80095bc <HAL_RCC_GetPCLK1Freq>
 800a8a4:	61b8      	str	r0, [r7, #24]
        break;
 800a8a6:	e013      	b.n	800a8d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8a8:	f7fe fe9c 	bl	80095e4 <HAL_RCC_GetPCLK2Freq>
 800a8ac:	61b8      	str	r0, [r7, #24]
        break;
 800a8ae:	e00f      	b.n	800a8d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8b0:	4b4b      	ldr	r3, [pc, #300]	; (800a9e0 <UART_SetConfig+0x4c4>)
 800a8b2:	61bb      	str	r3, [r7, #24]
        break;
 800a8b4:	e00c      	b.n	800a8d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8b6:	f7fe fd6f 	bl	8009398 <HAL_RCC_GetSysClockFreq>
 800a8ba:	61b8      	str	r0, [r7, #24]
        break;
 800a8bc:	e008      	b.n	800a8d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8c2:	61bb      	str	r3, [r7, #24]
        break;
 800a8c4:	e004      	b.n	800a8d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	77bb      	strb	r3, [r7, #30]
        break;
 800a8ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d074      	beq.n	800a9c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	005a      	lsls	r2, r3, #1
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	085b      	lsrs	r3, r3, #1
 800a8e0:	441a      	add	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	2b0f      	cmp	r3, #15
 800a8f0:	d916      	bls.n	800a920 <UART_SetConfig+0x404>
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f8:	d212      	bcs.n	800a920 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	f023 030f 	bic.w	r3, r3, #15
 800a902:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	085b      	lsrs	r3, r3, #1
 800a908:	b29b      	uxth	r3, r3
 800a90a:	f003 0307 	and.w	r3, r3, #7
 800a90e:	b29a      	uxth	r2, r3
 800a910:	89fb      	ldrh	r3, [r7, #14]
 800a912:	4313      	orrs	r3, r2
 800a914:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	89fa      	ldrh	r2, [r7, #14]
 800a91c:	60da      	str	r2, [r3, #12]
 800a91e:	e04f      	b.n	800a9c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	77bb      	strb	r3, [r7, #30]
 800a924:	e04c      	b.n	800a9c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a926:	7ffb      	ldrb	r3, [r7, #31]
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d828      	bhi.n	800a97e <UART_SetConfig+0x462>
 800a92c:	a201      	add	r2, pc, #4	; (adr r2, 800a934 <UART_SetConfig+0x418>)
 800a92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a932:	bf00      	nop
 800a934:	0800a959 	.word	0x0800a959
 800a938:	0800a961 	.word	0x0800a961
 800a93c:	0800a969 	.word	0x0800a969
 800a940:	0800a97f 	.word	0x0800a97f
 800a944:	0800a96f 	.word	0x0800a96f
 800a948:	0800a97f 	.word	0x0800a97f
 800a94c:	0800a97f 	.word	0x0800a97f
 800a950:	0800a97f 	.word	0x0800a97f
 800a954:	0800a977 	.word	0x0800a977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a958:	f7fe fe30 	bl	80095bc <HAL_RCC_GetPCLK1Freq>
 800a95c:	61b8      	str	r0, [r7, #24]
        break;
 800a95e:	e013      	b.n	800a988 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a960:	f7fe fe40 	bl	80095e4 <HAL_RCC_GetPCLK2Freq>
 800a964:	61b8      	str	r0, [r7, #24]
        break;
 800a966:	e00f      	b.n	800a988 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a968:	4b1d      	ldr	r3, [pc, #116]	; (800a9e0 <UART_SetConfig+0x4c4>)
 800a96a:	61bb      	str	r3, [r7, #24]
        break;
 800a96c:	e00c      	b.n	800a988 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a96e:	f7fe fd13 	bl	8009398 <HAL_RCC_GetSysClockFreq>
 800a972:	61b8      	str	r0, [r7, #24]
        break;
 800a974:	e008      	b.n	800a988 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a97a:	61bb      	str	r3, [r7, #24]
        break;
 800a97c:	e004      	b.n	800a988 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	77bb      	strb	r3, [r7, #30]
        break;
 800a986:	bf00      	nop
    }

    if (pclk != 0U)
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d018      	beq.n	800a9c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	085a      	lsrs	r2, r3, #1
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	441a      	add	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b0f      	cmp	r3, #15
 800a9a6:	d909      	bls.n	800a9bc <UART_SetConfig+0x4a0>
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ae:	d205      	bcs.n	800a9bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	60da      	str	r2, [r3, #12]
 800a9ba:	e001      	b.n	800a9c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a9cc:	7fbb      	ldrb	r3, [r7, #30]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3720      	adds	r7, #32
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	40007c00 	.word	0x40007c00
 800a9dc:	40023800 	.word	0x40023800
 800a9e0:	00f42400 	.word	0x00f42400

0800a9e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00a      	beq.n	800aa52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	f003 0308 	and.w	r3, r3, #8
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	430a      	orrs	r2, r1
 800aa72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	f003 0310 	and.w	r3, r3, #16
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	430a      	orrs	r2, r1
 800aab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01a      	beq.n	800aafa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	430a      	orrs	r2, r1
 800aad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aae2:	d10a      	bne.n	800aafa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00a      	beq.n	800ab1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	605a      	str	r2, [r3, #4]
  }
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab38:	f7fc fe24 	bl	8007784 <HAL_GetTick>
 800ab3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0308 	and.w	r3, r3, #8
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d10e      	bne.n	800ab6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f831 	bl	800abc2 <UART_WaitOnFlagUntilTimeout>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e027      	b.n	800abba <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	d10e      	bne.n	800ab96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f81b 	bl	800abc2 <UART_WaitOnFlagUntilTimeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e011      	b.n	800abba <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2220      	movs	r2, #32
 800ab9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b09c      	sub	sp, #112	; 0x70
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	603b      	str	r3, [r7, #0]
 800abce:	4613      	mov	r3, r2
 800abd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abd2:	e0a7      	b.n	800ad24 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abda:	f000 80a3 	beq.w	800ad24 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abde:	f7fc fdd1 	bl	8007784 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800abea:	429a      	cmp	r2, r3
 800abec:	d302      	bcc.n	800abf4 <UART_WaitOnFlagUntilTimeout+0x32>
 800abee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d13f      	bne.n	800ac74 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abfc:	e853 3f00 	ldrex	r3, [r3]
 800ac00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac08:	667b      	str	r3, [r7, #100]	; 0x64
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac1a:	e841 2300 	strex	r3, r2, [r1]
 800ac1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ac20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1e6      	bne.n	800abf4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac30:	e853 3f00 	ldrex	r3, [r3]
 800ac34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac38:	f023 0301 	bic.w	r3, r3, #1
 800ac3c:	663b      	str	r3, [r7, #96]	; 0x60
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3308      	adds	r3, #8
 800ac44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac46:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac4e:	e841 2300 	strex	r3, r2, [r1]
 800ac52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e5      	bne.n	800ac26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e068      	b.n	800ad46 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d050      	beq.n	800ad24 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac90:	d148      	bne.n	800ad24 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800acb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acba:	637b      	str	r3, [r7, #52]	; 0x34
 800acbc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1e6      	bne.n	800ac9c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3308      	adds	r3, #8
 800acd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	e853 3f00 	ldrex	r3, [r3]
 800acdc:	613b      	str	r3, [r7, #16]
   return(result);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f023 0301 	bic.w	r3, r3, #1
 800ace4:	66bb      	str	r3, [r7, #104]	; 0x68
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3308      	adds	r3, #8
 800acec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acee:	623a      	str	r2, [r7, #32]
 800acf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf2:	69f9      	ldr	r1, [r7, #28]
 800acf4:	6a3a      	ldr	r2, [r7, #32]
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	61bb      	str	r3, [r7, #24]
   return(result);
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1e5      	bne.n	800acce <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2220      	movs	r2, #32
 800ad06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2220      	movs	r2, #32
 800ad14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e010      	b.n	800ad46 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	69da      	ldr	r2, [r3, #28]
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	bf0c      	ite	eq
 800ad34:	2301      	moveq	r3, #1
 800ad36:	2300      	movne	r3, #0
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	f43f af48 	beq.w	800abd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3770      	adds	r7, #112	; 0x70
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad50:	b084      	sub	sp, #16
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	f107 001c 	add.w	r0, r7, #28
 800ad5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d120      	bne.n	800adaa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	4b20      	ldr	r3, [pc, #128]	; (800adfc <USB_CoreInit+0xac>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ad8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d105      	bne.n	800ad9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa96 	bl	800b2d0 <USB_CoreReset>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]
 800ada8:	e010      	b.n	800adcc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fa8a 	bl	800b2d0 <USB_CoreReset>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adce:	2b01      	cmp	r3, #1
 800add0:	d10b      	bne.n	800adea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f043 0206 	orr.w	r2, r3, #6
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f043 0220 	orr.w	r2, r3, #32
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800adea:	7bfb      	ldrb	r3, [r7, #15]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800adf6:	b004      	add	sp, #16
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	ffbdffbf 	.word	0xffbdffbf

0800ae00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f023 0201 	bic.w	r2, r3, #1
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b084      	sub	sp, #16
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ae3e:	78fb      	ldrb	r3, [r7, #3]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d115      	bne.n	800ae70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ae50:	2001      	movs	r0, #1
 800ae52:	f7fc fca3 	bl	800779c <HAL_Delay>
      ms++;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fa29 	bl	800b2b4 <USB_GetMode>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d01e      	beq.n	800aea6 <USB_SetCurrentMode+0x84>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b31      	cmp	r3, #49	; 0x31
 800ae6c:	d9f0      	bls.n	800ae50 <USB_SetCurrentMode+0x2e>
 800ae6e:	e01a      	b.n	800aea6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ae70:	78fb      	ldrb	r3, [r7, #3]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d115      	bne.n	800aea2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ae82:	2001      	movs	r0, #1
 800ae84:	f7fc fc8a 	bl	800779c <HAL_Delay>
      ms++;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fa10 	bl	800b2b4 <USB_GetMode>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d005      	beq.n	800aea6 <USB_SetCurrentMode+0x84>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b31      	cmp	r3, #49	; 0x31
 800ae9e:	d9f0      	bls.n	800ae82 <USB_SetCurrentMode+0x60>
 800aea0:	e001      	b.n	800aea6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e005      	b.n	800aeb2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2b32      	cmp	r3, #50	; 0x32
 800aeaa:	d101      	bne.n	800aeb0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e000      	b.n	800aeb2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
	...

0800aebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aebc:	b084      	sub	sp, #16
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b086      	sub	sp, #24
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aeca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aed6:	2300      	movs	r3, #0
 800aed8:	613b      	str	r3, [r7, #16]
 800aeda:	e009      	b.n	800aef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	3340      	adds	r3, #64	; 0x40
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	2200      	movs	r2, #0
 800aee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	3301      	adds	r3, #1
 800aeee:	613b      	str	r3, [r7, #16]
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b0e      	cmp	r3, #14
 800aef4:	d9f2      	bls.n	800aedc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d11c      	bne.n	800af36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af0a:	f043 0302 	orr.w	r3, r3, #2
 800af0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	e005      	b.n	800af42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af48:	461a      	mov	r2, r3
 800af4a:	2300      	movs	r3, #0
 800af4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af54:	4619      	mov	r1, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5c:	461a      	mov	r2, r3
 800af5e:	680b      	ldr	r3, [r1, #0]
 800af60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	2b01      	cmp	r3, #1
 800af66:	d10c      	bne.n	800af82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800af68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d104      	bne.n	800af78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f965 	bl	800b240 <USB_SetDevSpeed>
 800af76:	e008      	b.n	800af8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800af78:	2101      	movs	r1, #1
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f960 	bl	800b240 <USB_SetDevSpeed>
 800af80:	e003      	b.n	800af8a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800af82:	2103      	movs	r1, #3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 f95b 	bl	800b240 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af8a:	2110      	movs	r1, #16
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f8f3 	bl	800b178 <USB_FlushTxFifo>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f91f 	bl	800b1e0 <USB_FlushRxFifo>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb2:	461a      	mov	r2, r3
 800afb4:	2300      	movs	r3, #0
 800afb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afbe:	461a      	mov	r2, r3
 800afc0:	2300      	movs	r3, #0
 800afc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afca:	461a      	mov	r2, r3
 800afcc:	2300      	movs	r3, #0
 800afce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afd0:	2300      	movs	r3, #0
 800afd2:	613b      	str	r3, [r7, #16]
 800afd4:	e043      	b.n	800b05e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afec:	d118      	bne.n	800b020 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	015a      	lsls	r2, r3, #5
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4413      	add	r3, r2
 800affc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b000:	461a      	mov	r2, r3
 800b002:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b006:	6013      	str	r3, [r2, #0]
 800b008:	e013      	b.n	800b032 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	015a      	lsls	r2, r3, #5
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	4413      	add	r3, r2
 800b012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b016:	461a      	mov	r2, r3
 800b018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	e008      	b.n	800b032 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b02c:	461a      	mov	r2, r3
 800b02e:	2300      	movs	r3, #0
 800b030:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b03e:	461a      	mov	r2, r3
 800b040:	2300      	movs	r3, #0
 800b042:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b050:	461a      	mov	r2, r3
 800b052:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b056:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	3301      	adds	r3, #1
 800b05c:	613b      	str	r3, [r7, #16]
 800b05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b060:	693a      	ldr	r2, [r7, #16]
 800b062:	429a      	cmp	r2, r3
 800b064:	d3b7      	bcc.n	800afd6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b066:	2300      	movs	r3, #0
 800b068:	613b      	str	r3, [r7, #16]
 800b06a:	e043      	b.n	800b0f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b07e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b082:	d118      	bne.n	800b0b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10a      	bne.n	800b0a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b096:	461a      	mov	r2, r3
 800b098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	e013      	b.n	800b0c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	e008      	b.n	800b0c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	613b      	str	r3, [r7, #16]
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d3b7      	bcc.n	800b06c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b10a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b10e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b11c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	2b00      	cmp	r3, #0
 800b122:	d105      	bne.n	800b130 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	f043 0210 	orr.w	r2, r3, #16
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	699a      	ldr	r2, [r3, #24]
 800b134:	4b0e      	ldr	r3, [pc, #56]	; (800b170 <USB_DevInit+0x2b4>)
 800b136:	4313      	orrs	r3, r2
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	f043 0208 	orr.w	r2, r3, #8
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b150:	2b01      	cmp	r3, #1
 800b152:	d105      	bne.n	800b160 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	699a      	ldr	r2, [r3, #24]
 800b158:	4b06      	ldr	r3, [pc, #24]	; (800b174 <USB_DevInit+0x2b8>)
 800b15a:	4313      	orrs	r3, r2
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b160:	7dfb      	ldrb	r3, [r7, #23]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b16c:	b004      	add	sp, #16
 800b16e:	4770      	bx	lr
 800b170:	803c3800 	.word	0x803c3800
 800b174:	40000004 	.word	0x40000004

0800b178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3301      	adds	r3, #1
 800b18a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4a13      	ldr	r2, [pc, #76]	; (800b1dc <USB_FlushTxFifo+0x64>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d901      	bls.n	800b198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e01b      	b.n	800b1d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	daf2      	bge.n	800b186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	019b      	lsls	r3, r3, #6
 800b1a8:	f043 0220 	orr.w	r2, r3, #32
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	4a08      	ldr	r2, [pc, #32]	; (800b1dc <USB_FlushTxFifo+0x64>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d901      	bls.n	800b1c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e006      	b.n	800b1d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	f003 0320 	and.w	r3, r3, #32
 800b1ca:	2b20      	cmp	r3, #32
 800b1cc:	d0f0      	beq.n	800b1b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	00030d40 	.word	0x00030d40

0800b1e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	4a11      	ldr	r2, [pc, #68]	; (800b23c <USB_FlushRxFifo+0x5c>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d901      	bls.n	800b1fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e018      	b.n	800b230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	daf2      	bge.n	800b1ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2210      	movs	r2, #16
 800b20e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	3301      	adds	r3, #1
 800b214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	4a08      	ldr	r2, [pc, #32]	; (800b23c <USB_FlushRxFifo+0x5c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d901      	bls.n	800b222 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e006      	b.n	800b230 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	f003 0310 	and.w	r3, r3, #16
 800b22a:	2b10      	cmp	r3, #16
 800b22c:	d0f0      	beq.n	800b210 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	00030d40 	.word	0x00030d40

0800b240 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	460b      	mov	r3, r1
 800b24a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	78fb      	ldrb	r3, [r7, #3]
 800b25a:	68f9      	ldr	r1, [r7, #12]
 800b25c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b260:	4313      	orrs	r3, r2
 800b262:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b272:	b480      	push	{r7}
 800b274:	b085      	sub	sp, #20
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b28c:	f023 0303 	bic.w	r3, r3, #3
 800b290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2a0:	f043 0302 	orr.w	r3, r3, #2
 800b2a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	f003 0301 	and.w	r3, r3, #1
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4a13      	ldr	r2, [pc, #76]	; (800b334 <USB_CoreReset+0x64>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d901      	bls.n	800b2ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e01b      	b.n	800b326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	daf2      	bge.n	800b2dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f043 0201 	orr.w	r2, r3, #1
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	3301      	adds	r3, #1
 800b30a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4a09      	ldr	r2, [pc, #36]	; (800b334 <USB_CoreReset+0x64>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d901      	bls.n	800b318 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b314:	2303      	movs	r3, #3
 800b316:	e006      	b.n	800b326 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	f003 0301 	and.w	r3, r3, #1
 800b320:	2b01      	cmp	r3, #1
 800b322:	d0f0      	beq.n	800b306 <USB_CoreReset+0x36>

  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	00030d40 	.word	0x00030d40

0800b338 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b338:	b480      	push	{r7}
 800b33a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b33c:	bf00      	nop
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
	...

0800b348 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b34e:	f3ef 8305 	mrs	r3, IPSR
 800b352:	60bb      	str	r3, [r7, #8]
  return(result);
 800b354:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10f      	bne.n	800b37a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b35a:	f3ef 8310 	mrs	r3, PRIMASK
 800b35e:	607b      	str	r3, [r7, #4]
  return(result);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d105      	bne.n	800b372 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b366:	f3ef 8311 	mrs	r3, BASEPRI
 800b36a:	603b      	str	r3, [r7, #0]
  return(result);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d007      	beq.n	800b382 <osKernelInitialize+0x3a>
 800b372:	4b0e      	ldr	r3, [pc, #56]	; (800b3ac <osKernelInitialize+0x64>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b02      	cmp	r3, #2
 800b378:	d103      	bne.n	800b382 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b37a:	f06f 0305 	mvn.w	r3, #5
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	e00c      	b.n	800b39c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b382:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <osKernelInitialize+0x64>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d105      	bne.n	800b396 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b38a:	4b08      	ldr	r3, [pc, #32]	; (800b3ac <osKernelInitialize+0x64>)
 800b38c:	2201      	movs	r2, #1
 800b38e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b390:	2300      	movs	r3, #0
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	e002      	b.n	800b39c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b396:	f04f 33ff 	mov.w	r3, #4294967295
 800b39a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b39c:	68fb      	ldr	r3, [r7, #12]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	20001510 	.word	0x20001510

0800b3b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b6:	f3ef 8305 	mrs	r3, IPSR
 800b3ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10f      	bne.n	800b3e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3c6:	607b      	str	r3, [r7, #4]
  return(result);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d105      	bne.n	800b3da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3ce:	f3ef 8311 	mrs	r3, BASEPRI
 800b3d2:	603b      	str	r3, [r7, #0]
  return(result);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d007      	beq.n	800b3ea <osKernelStart+0x3a>
 800b3da:	4b0f      	ldr	r3, [pc, #60]	; (800b418 <osKernelStart+0x68>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d103      	bne.n	800b3ea <osKernelStart+0x3a>
    stat = osErrorISR;
 800b3e2:	f06f 0305 	mvn.w	r3, #5
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	e010      	b.n	800b40c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b3ea:	4b0b      	ldr	r3, [pc, #44]	; (800b418 <osKernelStart+0x68>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d109      	bne.n	800b406 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b3f2:	f7ff ffa1 	bl	800b338 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b3f6:	4b08      	ldr	r3, [pc, #32]	; (800b418 <osKernelStart+0x68>)
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b3fc:	f001 fd70 	bl	800cee0 <vTaskStartScheduler>
      stat = osOK;
 800b400:	2300      	movs	r3, #0
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	e002      	b.n	800b40c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b406:	f04f 33ff 	mov.w	r3, #4294967295
 800b40a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b40c:	68fb      	ldr	r3, [r7, #12]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20001510 	.word	0x20001510

0800b41c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b090      	sub	sp, #64	; 0x40
 800b420:	af04      	add	r7, sp, #16
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b42c:	f3ef 8305 	mrs	r3, IPSR
 800b430:	61fb      	str	r3, [r7, #28]
  return(result);
 800b432:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b434:	2b00      	cmp	r3, #0
 800b436:	f040 808f 	bne.w	800b558 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b43a:	f3ef 8310 	mrs	r3, PRIMASK
 800b43e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d105      	bne.n	800b452 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b446:	f3ef 8311 	mrs	r3, BASEPRI
 800b44a:	617b      	str	r3, [r7, #20]
  return(result);
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d003      	beq.n	800b45a <osThreadNew+0x3e>
 800b452:	4b44      	ldr	r3, [pc, #272]	; (800b564 <osThreadNew+0x148>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d07e      	beq.n	800b558 <osThreadNew+0x13c>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d07b      	beq.n	800b558 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b460:	2380      	movs	r3, #128	; 0x80
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b464:	2318      	movs	r3, #24
 800b466:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b468:	2300      	movs	r3, #0
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b46c:	f04f 33ff 	mov.w	r3, #4294967295
 800b470:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d045      	beq.n	800b504 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <osThreadNew+0x6a>
        name = attr->name;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b496:	2b00      	cmp	r3, #0
 800b498:	d008      	beq.n	800b4ac <osThreadNew+0x90>
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	2b38      	cmp	r3, #56	; 0x38
 800b49e:	d805      	bhi.n	800b4ac <osThreadNew+0x90>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f003 0301 	and.w	r3, r3, #1
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <osThreadNew+0x94>
        return (NULL);
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	e054      	b.n	800b55a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	089b      	lsrs	r3, r3, #2
 800b4be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00e      	beq.n	800b4e6 <osThreadNew+0xca>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	2bbb      	cmp	r3, #187	; 0xbb
 800b4ce:	d90a      	bls.n	800b4e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d006      	beq.n	800b4e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	695b      	ldr	r3, [r3, #20]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <osThreadNew+0xca>
        mem = 1;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	623b      	str	r3, [r7, #32]
 800b4e4:	e010      	b.n	800b508 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10c      	bne.n	800b508 <osThreadNew+0xec>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d108      	bne.n	800b508 <osThreadNew+0xec>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d104      	bne.n	800b508 <osThreadNew+0xec>
          mem = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	623b      	str	r3, [r7, #32]
 800b502:	e001      	b.n	800b508 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d110      	bne.n	800b530 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b516:	9202      	str	r2, [sp, #8]
 800b518:	9301      	str	r3, [sp, #4]
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f001 fae5 	bl	800caf4 <xTaskCreateStatic>
 800b52a:	4603      	mov	r3, r0
 800b52c:	613b      	str	r3, [r7, #16]
 800b52e:	e013      	b.n	800b558 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d110      	bne.n	800b558 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	b29a      	uxth	r2, r3
 800b53a:	f107 0310 	add.w	r3, r7, #16
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f001 fb36 	bl	800cbba <xTaskCreate>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b01      	cmp	r3, #1
 800b552:	d001      	beq.n	800b558 <osThreadNew+0x13c>
          hTask = NULL;
 800b554:	2300      	movs	r3, #0
 800b556:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b558:	693b      	ldr	r3, [r7, #16]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3730      	adds	r7, #48	; 0x30
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20001510 	.word	0x20001510

0800b568 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b570:	f3ef 8305 	mrs	r3, IPSR
 800b574:	613b      	str	r3, [r7, #16]
  return(result);
 800b576:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10f      	bne.n	800b59c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b57c:	f3ef 8310 	mrs	r3, PRIMASK
 800b580:	60fb      	str	r3, [r7, #12]
  return(result);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d105      	bne.n	800b594 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b588:	f3ef 8311 	mrs	r3, BASEPRI
 800b58c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d007      	beq.n	800b5a4 <osDelay+0x3c>
 800b594:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <osDelay+0x58>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d103      	bne.n	800b5a4 <osDelay+0x3c>
    stat = osErrorISR;
 800b59c:	f06f 0305 	mvn.w	r3, #5
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	e007      	b.n	800b5b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f001 fc60 	bl	800ce74 <vTaskDelay>
    }
  }

  return (stat);
 800b5b4:	697b      	ldr	r3, [r7, #20]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20001510 	.word	0x20001510

0800b5c4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08c      	sub	sp, #48	; 0x30
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5d4:	f3ef 8305 	mrs	r3, IPSR
 800b5d8:	61bb      	str	r3, [r7, #24]
  return(result);
 800b5da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f040 8086 	bne.w	800b6ee <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e6:	617b      	str	r3, [r7, #20]
  return(result);
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d105      	bne.n	800b5fa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5ee:	f3ef 8311 	mrs	r3, BASEPRI
 800b5f2:	613b      	str	r3, [r7, #16]
  return(result);
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <osSemaphoreNew+0x3e>
 800b5fa:	4b3f      	ldr	r3, [pc, #252]	; (800b6f8 <osSemaphoreNew+0x134>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d075      	beq.n	800b6ee <osSemaphoreNew+0x12a>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d072      	beq.n	800b6ee <osSemaphoreNew+0x12a>
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d86e      	bhi.n	800b6ee <osSemaphoreNew+0x12a>
    mem = -1;
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
 800b614:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d015      	beq.n	800b648 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d006      	beq.n	800b632 <osSemaphoreNew+0x6e>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	2b4f      	cmp	r3, #79	; 0x4f
 800b62a:	d902      	bls.n	800b632 <osSemaphoreNew+0x6e>
        mem = 1;
 800b62c:	2301      	movs	r3, #1
 800b62e:	623b      	str	r3, [r7, #32]
 800b630:	e00c      	b.n	800b64c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d108      	bne.n	800b64c <osSemaphoreNew+0x88>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d104      	bne.n	800b64c <osSemaphoreNew+0x88>
          mem = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	623b      	str	r3, [r7, #32]
 800b646:	e001      	b.n	800b64c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b652:	d04c      	beq.n	800b6ee <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d128      	bne.n	800b6ac <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d10a      	bne.n	800b676 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	2203      	movs	r2, #3
 800b666:	9200      	str	r2, [sp, #0]
 800b668:	2200      	movs	r2, #0
 800b66a:	2100      	movs	r1, #0
 800b66c:	2001      	movs	r0, #1
 800b66e:	f000 fa55 	bl	800bb1c <xQueueGenericCreateStatic>
 800b672:	6278      	str	r0, [r7, #36]	; 0x24
 800b674:	e005      	b.n	800b682 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b676:	2203      	movs	r2, #3
 800b678:	2100      	movs	r1, #0
 800b67a:	2001      	movs	r0, #1
 800b67c:	f000 fad0 	bl	800bc20 <xQueueGenericCreate>
 800b680:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	2b00      	cmp	r3, #0
 800b686:	d022      	beq.n	800b6ce <osSemaphoreNew+0x10a>
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d01f      	beq.n	800b6ce <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b68e:	2300      	movs	r3, #0
 800b690:	2200      	movs	r2, #0
 800b692:	2100      	movs	r1, #0
 800b694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b696:	f000 fb9b 	bl	800bdd0 <xQueueGenericSend>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d016      	beq.n	800b6ce <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800b6a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6a2:	f001 f851 	bl	800c748 <vQueueDelete>
            hSemaphore = NULL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b6aa:	e010      	b.n	800b6ce <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d108      	bne.n	800b6c4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 fb15 	bl	800bcea <xQueueCreateCountingSemaphoreStatic>
 800b6c0:	6278      	str	r0, [r7, #36]	; 0x24
 800b6c2:	e004      	b.n	800b6ce <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b6c4:	68b9      	ldr	r1, [r7, #8]
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 fb4a 	bl	800bd60 <xQueueCreateCountingSemaphore>
 800b6cc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00c      	beq.n	800b6ee <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d003      	beq.n	800b6e2 <osSemaphoreNew+0x11e>
          name = attr->name;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	61fb      	str	r3, [r7, #28]
 800b6e0:	e001      	b.n	800b6e6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b6e6:	69f9      	ldr	r1, [r7, #28]
 800b6e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6ea:	f001 f97b 	bl	800c9e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3728      	adds	r7, #40	; 0x28
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	20001510 	.word	0x20001510

0800b6fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d103      	bne.n	800b71c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b714:	f06f 0303 	mvn.w	r3, #3
 800b718:	61fb      	str	r3, [r7, #28]
 800b71a:	e04b      	b.n	800b7b4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b71c:	f3ef 8305 	mrs	r3, IPSR
 800b720:	617b      	str	r3, [r7, #20]
  return(result);
 800b722:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10f      	bne.n	800b748 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b728:	f3ef 8310 	mrs	r3, PRIMASK
 800b72c:	613b      	str	r3, [r7, #16]
  return(result);
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d105      	bne.n	800b740 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b734:	f3ef 8311 	mrs	r3, BASEPRI
 800b738:	60fb      	str	r3, [r7, #12]
  return(result);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d026      	beq.n	800b78e <osSemaphoreAcquire+0x92>
 800b740:	4b1f      	ldr	r3, [pc, #124]	; (800b7c0 <osSemaphoreAcquire+0xc4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b02      	cmp	r3, #2
 800b746:	d122      	bne.n	800b78e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800b74e:	f06f 0303 	mvn.w	r3, #3
 800b752:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b754:	e02d      	b.n	800b7b2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800b756:	2300      	movs	r3, #0
 800b758:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b75a:	f107 0308 	add.w	r3, r7, #8
 800b75e:	461a      	mov	r2, r3
 800b760:	2100      	movs	r1, #0
 800b762:	69b8      	ldr	r0, [r7, #24]
 800b764:	f000 ff6a 	bl	800c63c <xQueueReceiveFromISR>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d003      	beq.n	800b776 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800b76e:	f06f 0302 	mvn.w	r3, #2
 800b772:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b774:	e01d      	b.n	800b7b2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d01a      	beq.n	800b7b2 <osSemaphoreAcquire+0xb6>
 800b77c:	4b11      	ldr	r3, [pc, #68]	; (800b7c4 <osSemaphoreAcquire+0xc8>)
 800b77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800b78c:	e011      	b.n	800b7b2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	69b8      	ldr	r0, [r7, #24]
 800b792:	f000 fe3f 	bl	800c414 <xQueueSemaphoreTake>
 800b796:	4603      	mov	r3, r0
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d00b      	beq.n	800b7b4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800b7a2:	f06f 0301 	mvn.w	r3, #1
 800b7a6:	61fb      	str	r3, [r7, #28]
 800b7a8:	e004      	b.n	800b7b4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800b7aa:	f06f 0302 	mvn.w	r3, #2
 800b7ae:	61fb      	str	r3, [r7, #28]
 800b7b0:	e000      	b.n	800b7b4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800b7b2:	bf00      	nop
      }
    }
  }

  return (stat);
 800b7b4:	69fb      	ldr	r3, [r7, #28]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20001510 	.word	0x20001510
 800b7c4:	e000ed04 	.word	0xe000ed04

0800b7c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d103      	bne.n	800b7e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b7de:	f06f 0303 	mvn.w	r3, #3
 800b7e2:	61fb      	str	r3, [r7, #28]
 800b7e4:	e03e      	b.n	800b864 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7e6:	f3ef 8305 	mrs	r3, IPSR
 800b7ea:	617b      	str	r3, [r7, #20]
  return(result);
 800b7ec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10f      	bne.n	800b812 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f6:	613b      	str	r3, [r7, #16]
  return(result);
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d105      	bne.n	800b80a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b7fe:	f3ef 8311 	mrs	r3, BASEPRI
 800b802:	60fb      	str	r3, [r7, #12]
  return(result);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d01e      	beq.n	800b848 <osSemaphoreRelease+0x80>
 800b80a:	4b19      	ldr	r3, [pc, #100]	; (800b870 <osSemaphoreRelease+0xa8>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d11a      	bne.n	800b848 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800b812:	2300      	movs	r3, #0
 800b814:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b816:	f107 0308 	add.w	r3, r7, #8
 800b81a:	4619      	mov	r1, r3
 800b81c:	69b8      	ldr	r0, [r7, #24]
 800b81e:	f000 fc7d 	bl	800c11c <xQueueGiveFromISR>
 800b822:	4603      	mov	r3, r0
 800b824:	2b01      	cmp	r3, #1
 800b826:	d003      	beq.n	800b830 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800b828:	f06f 0302 	mvn.w	r3, #2
 800b82c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b82e:	e018      	b.n	800b862 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d015      	beq.n	800b862 <osSemaphoreRelease+0x9a>
 800b836:	4b0f      	ldr	r3, [pc, #60]	; (800b874 <osSemaphoreRelease+0xac>)
 800b838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b846:	e00c      	b.n	800b862 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b848:	2300      	movs	r3, #0
 800b84a:	2200      	movs	r2, #0
 800b84c:	2100      	movs	r1, #0
 800b84e:	69b8      	ldr	r0, [r7, #24]
 800b850:	f000 fabe 	bl	800bdd0 <xQueueGenericSend>
 800b854:	4603      	mov	r3, r0
 800b856:	2b01      	cmp	r3, #1
 800b858:	d004      	beq.n	800b864 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800b85a:	f06f 0302 	mvn.w	r3, #2
 800b85e:	61fb      	str	r3, [r7, #28]
 800b860:	e000      	b.n	800b864 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b862:	bf00      	nop
    }
  }

  return (stat);
 800b864:	69fb      	ldr	r3, [r7, #28]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3720      	adds	r7, #32
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	20001510 	.word	0x20001510
 800b874:	e000ed04 	.word	0xe000ed04

0800b878 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4a07      	ldr	r2, [pc, #28]	; (800b8a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b888:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	4a06      	ldr	r2, [pc, #24]	; (800b8a8 <vApplicationGetIdleTaskMemory+0x30>)
 800b88e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2280      	movs	r2, #128	; 0x80
 800b894:	601a      	str	r2, [r3, #0]
}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	20001514 	.word	0x20001514
 800b8a8:	200015d0 	.word	0x200015d0

0800b8ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4a07      	ldr	r2, [pc, #28]	; (800b8d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b8bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	4a06      	ldr	r2, [pc, #24]	; (800b8dc <vApplicationGetTimerTaskMemory+0x30>)
 800b8c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8ca:	601a      	str	r2, [r3, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	200017d0 	.word	0x200017d0
 800b8dc:	2000188c 	.word	0x2000188c

0800b8e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f103 0208 	add.w	r2, r3, #8
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f103 0208 	add.w	r2, r3, #8
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f103 0208 	add.w	r2, r3, #8
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b93a:	b480      	push	{r7}
 800b93c:	b085      	sub	sp, #20
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	689a      	ldr	r2, [r3, #8]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	1c5a      	adds	r2, r3, #1
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	601a      	str	r2, [r3, #0]
}
 800b976:	bf00      	nop
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b982:	b480      	push	{r7}
 800b984:	b085      	sub	sp, #20
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b998:	d103      	bne.n	800b9a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	60fb      	str	r3, [r7, #12]
 800b9a0:	e00c      	b.n	800b9bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	e002      	b.n	800b9b0 <vListInsert+0x2e>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d2f6      	bcs.n	800b9aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	601a      	str	r2, [r3, #0]
}
 800b9e8:	bf00      	nop
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	6892      	ldr	r2, [r2, #8]
 800ba0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	6852      	ldr	r2, [r2, #4]
 800ba14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d103      	bne.n	800ba28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	1e5a      	subs	r2, r3, #1
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10c      	bne.n	800ba76 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	b672      	cpsid	i
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	b662      	cpsie	i
 800ba70:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ba76:	f002 fcf1 	bl	800e45c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba82:	68f9      	ldr	r1, [r7, #12]
 800ba84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba86:	fb01 f303 	mul.w	r3, r1, r3
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa6:	3b01      	subs	r3, #1
 800baa8:	68f9      	ldr	r1, [r7, #12]
 800baaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800baac:	fb01 f303 	mul.w	r3, r1, r3
 800bab0:	441a      	add	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	22ff      	movs	r2, #255	; 0xff
 800baba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	22ff      	movs	r2, #255	; 0xff
 800bac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d114      	bne.n	800baf6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d01a      	beq.n	800bb0a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3310      	adds	r3, #16
 800bad8:	4618      	mov	r0, r3
 800bada:	f001 fca9 	bl	800d430 <xTaskRemoveFromEventList>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d012      	beq.n	800bb0a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bae4:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <xQueueGenericReset+0xd0>)
 800bae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	e009      	b.n	800bb0a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3310      	adds	r3, #16
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff fef0 	bl	800b8e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3324      	adds	r3, #36	; 0x24
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff feeb 	bl	800b8e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb0a:	f002 fcdb 	bl	800e4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb0e:	2301      	movs	r3, #1
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	e000ed04 	.word	0xe000ed04

0800bb1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	; 0x38
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10c      	bne.n	800bb4a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	b672      	cpsid	i
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	b662      	cpsie	i
 800bb44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb46:	bf00      	nop
 800bb48:	e7fe      	b.n	800bb48 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10c      	bne.n	800bb6a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	b672      	cpsid	i
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	b662      	cpsie	i
 800bb64:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <xQueueGenericCreateStatic+0x5a>
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <xQueueGenericCreateStatic+0x5e>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e000      	b.n	800bb7c <xQueueGenericCreateStatic+0x60>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10c      	bne.n	800bb9a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	b672      	cpsid	i
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	b662      	cpsie	i
 800bb94:	623b      	str	r3, [r7, #32]
}
 800bb96:	bf00      	nop
 800bb98:	e7fe      	b.n	800bb98 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d102      	bne.n	800bba6 <xQueueGenericCreateStatic+0x8a>
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <xQueueGenericCreateStatic+0x8e>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e000      	b.n	800bbac <xQueueGenericCreateStatic+0x90>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10c      	bne.n	800bbca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	b672      	cpsid	i
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	b662      	cpsie	i
 800bbc4:	61fb      	str	r3, [r7, #28]
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbca:	2350      	movs	r3, #80	; 0x50
 800bbcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2b50      	cmp	r3, #80	; 0x50
 800bbd2:	d00c      	beq.n	800bbee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	b672      	cpsid	i
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	b662      	cpsie	i
 800bbe8:	61bb      	str	r3, [r7, #24]
}
 800bbea:	bf00      	nop
 800bbec:	e7fe      	b.n	800bbec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00d      	beq.n	800bc16 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	68b9      	ldr	r1, [r7, #8]
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f000 f847 	bl	800bca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3730      	adds	r7, #48	; 0x30
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08a      	sub	sp, #40	; 0x28
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10c      	bne.n	800bc4e <xQueueGenericCreate+0x2e>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	b672      	cpsid	i
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	b662      	cpsie	i
 800bc48:	613b      	str	r3, [r7, #16]
}
 800bc4a:	bf00      	nop
 800bc4c:	e7fe      	b.n	800bc4c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	61fb      	str	r3, [r7, #28]
 800bc58:	e004      	b.n	800bc64 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	fb02 f303 	mul.w	r3, r2, r3
 800bc62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	3350      	adds	r3, #80	; 0x50
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f002 fd23 	bl	800e6b4 <pvPortMalloc>
 800bc6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d011      	beq.n	800bc9a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	3350      	adds	r3, #80	; 0x50
 800bc7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc88:	79fa      	ldrb	r2, [r7, #7]
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	68b9      	ldr	r1, [r7, #8]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 f805 	bl	800bca4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc9a:	69bb      	ldr	r3, [r7, #24]
	}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d103      	bne.n	800bcc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	e002      	b.n	800bcc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	69b8      	ldr	r0, [r7, #24]
 800bcd6:	f7ff feb7 	bl	800ba48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	78fa      	ldrb	r2, [r7, #3]
 800bcde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bce2:	bf00      	nop
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b08a      	sub	sp, #40	; 0x28
 800bcee:	af02      	add	r7, sp, #8
 800bcf0:	60f8      	str	r0, [r7, #12]
 800bcf2:	60b9      	str	r1, [r7, #8]
 800bcf4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10c      	bne.n	800bd16 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	b672      	cpsid	i
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	b662      	cpsie	i
 800bd10:	61bb      	str	r3, [r7, #24]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d90c      	bls.n	800bd38 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	b672      	cpsid	i
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	b662      	cpsie	i
 800bd32:	617b      	str	r3, [r7, #20]
}
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd38:	2302      	movs	r3, #2
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	2100      	movs	r1, #0
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f7ff feea 	bl	800bb1c <xQueueGenericCreateStatic>
 800bd48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bd56:	69fb      	ldr	r3, [r7, #28]
	}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10c      	bne.n	800bd8a <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800bd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd74:	b672      	cpsid	i
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	b662      	cpsie	i
 800bd84:	613b      	str	r3, [r7, #16]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d90c      	bls.n	800bdac <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800bd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd96:	b672      	cpsid	i
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	b662      	cpsie	i
 800bda6:	60fb      	str	r3, [r7, #12]
}
 800bda8:	bf00      	nop
 800bdaa:	e7fe      	b.n	800bdaa <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bdac:	2202      	movs	r2, #2
 800bdae:	2100      	movs	r1, #0
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7ff ff35 	bl	800bc20 <xQueueGenericCreate>
 800bdb6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bdc4:	697b      	ldr	r3, [r7, #20]
	}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
	...

0800bdd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08e      	sub	sp, #56	; 0x38
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bdde:	2300      	movs	r3, #0
 800bde0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10c      	bne.n	800be06 <xQueueGenericSend+0x36>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	b672      	cpsid	i
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	b662      	cpsie	i
 800be00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be02:	bf00      	nop
 800be04:	e7fe      	b.n	800be04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d103      	bne.n	800be14 <xQueueGenericSend+0x44>
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <xQueueGenericSend+0x48>
 800be14:	2301      	movs	r3, #1
 800be16:	e000      	b.n	800be1a <xQueueGenericSend+0x4a>
 800be18:	2300      	movs	r3, #0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10c      	bne.n	800be38 <xQueueGenericSend+0x68>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	b672      	cpsid	i
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	b662      	cpsie	i
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be34:	bf00      	nop
 800be36:	e7fe      	b.n	800be36 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d103      	bne.n	800be46 <xQueueGenericSend+0x76>
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be42:	2b01      	cmp	r3, #1
 800be44:	d101      	bne.n	800be4a <xQueueGenericSend+0x7a>
 800be46:	2301      	movs	r3, #1
 800be48:	e000      	b.n	800be4c <xQueueGenericSend+0x7c>
 800be4a:	2300      	movs	r3, #0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10c      	bne.n	800be6a <xQueueGenericSend+0x9a>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be54:	b672      	cpsid	i
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	b662      	cpsie	i
 800be64:	623b      	str	r3, [r7, #32]
}
 800be66:	bf00      	nop
 800be68:	e7fe      	b.n	800be68 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be6a:	f001 fcab 	bl	800d7c4 <xTaskGetSchedulerState>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d102      	bne.n	800be7a <xQueueGenericSend+0xaa>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <xQueueGenericSend+0xae>
 800be7a:	2301      	movs	r3, #1
 800be7c:	e000      	b.n	800be80 <xQueueGenericSend+0xb0>
 800be7e:	2300      	movs	r3, #0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10c      	bne.n	800be9e <xQueueGenericSend+0xce>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	b672      	cpsid	i
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	b662      	cpsie	i
 800be98:	61fb      	str	r3, [r7, #28]
}
 800be9a:	bf00      	nop
 800be9c:	e7fe      	b.n	800be9c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be9e:	f002 fadd 	bl	800e45c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beaa:	429a      	cmp	r2, r3
 800beac:	d302      	bcc.n	800beb4 <xQueueGenericSend+0xe4>
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d129      	bne.n	800bf08 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	68b9      	ldr	r1, [r7, #8]
 800beb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beba:	f000 fc82 	bl	800c7c2 <prvCopyDataToQueue>
 800bebe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d010      	beq.n	800beea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beca:	3324      	adds	r3, #36	; 0x24
 800becc:	4618      	mov	r0, r3
 800bece:	f001 faaf 	bl	800d430 <xTaskRemoveFromEventList>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d013      	beq.n	800bf00 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bed8:	4b3f      	ldr	r3, [pc, #252]	; (800bfd8 <xQueueGenericSend+0x208>)
 800beda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bede:	601a      	str	r2, [r3, #0]
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	e00a      	b.n	800bf00 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	2b00      	cmp	r3, #0
 800beee:	d007      	beq.n	800bf00 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bef0:	4b39      	ldr	r3, [pc, #228]	; (800bfd8 <xQueueGenericSend+0x208>)
 800bef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf00:	f002 fae0 	bl	800e4c4 <vPortExitCritical>
				return pdPASS;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e063      	b.n	800bfd0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d103      	bne.n	800bf16 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf0e:	f002 fad9 	bl	800e4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	e05c      	b.n	800bfd0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d106      	bne.n	800bf2a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf1c:	f107 0314 	add.w	r3, r7, #20
 800bf20:	4618      	mov	r0, r3
 800bf22:	f001 faeb 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf26:	2301      	movs	r3, #1
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf2a:	f002 facb 	bl	800e4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf2e:	f001 f84b 	bl	800cfc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf32:	f002 fa93 	bl	800e45c <vPortEnterCritical>
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf3c:	b25b      	sxtb	r3, r3
 800bf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf42:	d103      	bne.n	800bf4c <xQueueGenericSend+0x17c>
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf52:	b25b      	sxtb	r3, r3
 800bf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf58:	d103      	bne.n	800bf62 <xQueueGenericSend+0x192>
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf62:	f002 faaf 	bl	800e4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf66:	1d3a      	adds	r2, r7, #4
 800bf68:	f107 0314 	add.w	r3, r7, #20
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f001 fada 	bl	800d528 <xTaskCheckForTimeOut>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d124      	bne.n	800bfc4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf7c:	f000 fd19 	bl	800c9b2 <prvIsQueueFull>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d018      	beq.n	800bfb8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	3310      	adds	r3, #16
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 f9fa 	bl	800d388 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf96:	f000 fca4 	bl	800c8e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf9a:	f001 f823 	bl	800cfe4 <xTaskResumeAll>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f47f af7c 	bne.w	800be9e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bfa6:	4b0c      	ldr	r3, [pc, #48]	; (800bfd8 <xQueueGenericSend+0x208>)
 800bfa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	e772      	b.n	800be9e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfba:	f000 fc92 	bl	800c8e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfbe:	f001 f811 	bl	800cfe4 <xTaskResumeAll>
 800bfc2:	e76c      	b.n	800be9e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bfc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc6:	f000 fc8c 	bl	800c8e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfca:	f001 f80b 	bl	800cfe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bfce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3738      	adds	r7, #56	; 0x38
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	e000ed04 	.word	0xe000ed04

0800bfdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b08e      	sub	sp, #56	; 0x38
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
 800bfe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10c      	bne.n	800c00e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	b672      	cpsid	i
 800bffa:	f383 8811 	msr	BASEPRI, r3
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	b662      	cpsie	i
 800c008:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c00a:	bf00      	nop
 800c00c:	e7fe      	b.n	800c00c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d103      	bne.n	800c01c <xQueueGenericSendFromISR+0x40>
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d101      	bne.n	800c020 <xQueueGenericSendFromISR+0x44>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e000      	b.n	800c022 <xQueueGenericSendFromISR+0x46>
 800c020:	2300      	movs	r3, #0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10c      	bne.n	800c040 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800c026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02a:	b672      	cpsid	i
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	b662      	cpsie	i
 800c03a:	623b      	str	r3, [r7, #32]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2b02      	cmp	r3, #2
 800c044:	d103      	bne.n	800c04e <xQueueGenericSendFromISR+0x72>
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d101      	bne.n	800c052 <xQueueGenericSendFromISR+0x76>
 800c04e:	2301      	movs	r3, #1
 800c050:	e000      	b.n	800c054 <xQueueGenericSendFromISR+0x78>
 800c052:	2300      	movs	r3, #0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10c      	bne.n	800c072 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	b672      	cpsid	i
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	b662      	cpsie	i
 800c06c:	61fb      	str	r3, [r7, #28]
}
 800c06e:	bf00      	nop
 800c070:	e7fe      	b.n	800c070 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c072:	f002 fadb 	bl	800e62c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c076:	f3ef 8211 	mrs	r2, BASEPRI
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	b672      	cpsid	i
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	b662      	cpsie	i
 800c08e:	61ba      	str	r2, [r7, #24]
 800c090:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c092:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c094:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d302      	bcc.n	800c0a8 <xQueueGenericSendFromISR+0xcc>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	2b02      	cmp	r3, #2
 800c0a6:	d12c      	bne.n	800c102 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	68b9      	ldr	r1, [r7, #8]
 800c0b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0b8:	f000 fb83 	bl	800c7c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c4:	d112      	bne.n	800c0ec <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d016      	beq.n	800c0fc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d0:	3324      	adds	r3, #36	; 0x24
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f001 f9ac 	bl	800d430 <xTaskRemoveFromEventList>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00e      	beq.n	800c0fc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00b      	beq.n	800c0fc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	e007      	b.n	800c0fc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	b25a      	sxtb	r2, r3
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c100:	e001      	b.n	800c106 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c102:	2300      	movs	r3, #0
 800c104:	637b      	str	r3, [r7, #52]	; 0x34
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c110:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c114:	4618      	mov	r0, r3
 800c116:	3738      	adds	r7, #56	; 0x38
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08e      	sub	sp, #56	; 0x38
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10c      	bne.n	800c14a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	b672      	cpsid	i
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	b662      	cpsie	i
 800c144:	623b      	str	r3, [r7, #32]
}
 800c146:	bf00      	nop
 800c148:	e7fe      	b.n	800c148 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00c      	beq.n	800c16c <xQueueGiveFromISR+0x50>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	b672      	cpsid	i
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	b662      	cpsie	i
 800c166:	61fb      	str	r3, [r7, #28]
}
 800c168:	bf00      	nop
 800c16a:	e7fe      	b.n	800c16a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d103      	bne.n	800c17c <xQueueGiveFromISR+0x60>
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d101      	bne.n	800c180 <xQueueGiveFromISR+0x64>
 800c17c:	2301      	movs	r3, #1
 800c17e:	e000      	b.n	800c182 <xQueueGiveFromISR+0x66>
 800c180:	2300      	movs	r3, #0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10c      	bne.n	800c1a0 <xQueueGiveFromISR+0x84>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	b672      	cpsid	i
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	b662      	cpsie	i
 800c19a:	61bb      	str	r3, [r7, #24]
}
 800c19c:	bf00      	nop
 800c19e:	e7fe      	b.n	800c19e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1a0:	f002 fa44 	bl	800e62c <vPortValidateInterruptPriority>
	__asm volatile
 800c1a4:	f3ef 8211 	mrs	r2, BASEPRI
 800c1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ac:	b672      	cpsid	i
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	b662      	cpsie	i
 800c1bc:	617a      	str	r2, [r7, #20]
 800c1be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c1c0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d22b      	bcs.n	800c22c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	1c5a      	adds	r2, r3, #1
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c1e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ee:	d112      	bne.n	800c216 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d016      	beq.n	800c226 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fa:	3324      	adds	r3, #36	; 0x24
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f001 f917 	bl	800d430 <xTaskRemoveFromEventList>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00e      	beq.n	800c226 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00b      	beq.n	800c226 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2201      	movs	r2, #1
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	e007      	b.n	800c226 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c21a:	3301      	adds	r3, #1
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	b25a      	sxtb	r2, r3
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c226:	2301      	movs	r3, #1
 800c228:	637b      	str	r3, [r7, #52]	; 0x34
 800c22a:	e001      	b.n	800c230 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c22c:	2300      	movs	r3, #0
 800c22e:	637b      	str	r3, [r7, #52]	; 0x34
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f383 8811 	msr	BASEPRI, r3
}
 800c23a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3738      	adds	r7, #56	; 0x38
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
	...

0800c248 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08c      	sub	sp, #48	; 0x30
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c254:	2300      	movs	r3, #0
 800c256:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10c      	bne.n	800c27c <xQueueReceive+0x34>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c266:	b672      	cpsid	i
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	b662      	cpsie	i
 800c276:	623b      	str	r3, [r7, #32]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d103      	bne.n	800c28a <xQueueReceive+0x42>
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c286:	2b00      	cmp	r3, #0
 800c288:	d101      	bne.n	800c28e <xQueueReceive+0x46>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e000      	b.n	800c290 <xQueueReceive+0x48>
 800c28e:	2300      	movs	r3, #0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10c      	bne.n	800c2ae <xQueueReceive+0x66>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	b672      	cpsid	i
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	b662      	cpsie	i
 800c2a8:	61fb      	str	r3, [r7, #28]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2ae:	f001 fa89 	bl	800d7c4 <xTaskGetSchedulerState>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d102      	bne.n	800c2be <xQueueReceive+0x76>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <xQueueReceive+0x7a>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e000      	b.n	800c2c4 <xQueueReceive+0x7c>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10c      	bne.n	800c2e2 <xQueueReceive+0x9a>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2cc:	b672      	cpsid	i
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	b662      	cpsie	i
 800c2dc:	61bb      	str	r3, [r7, #24]
}
 800c2de:	bf00      	nop
 800c2e0:	e7fe      	b.n	800c2e0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2e2:	f002 f8bb 	bl	800e45c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d01f      	beq.n	800c332 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c2f2:	68b9      	ldr	r1, [r7, #8]
 800c2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f6:	f000 face 	bl	800c896 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	1e5a      	subs	r2, r3, #1
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00f      	beq.n	800c32a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	3310      	adds	r3, #16
 800c30e:	4618      	mov	r0, r3
 800c310:	f001 f88e 	bl	800d430 <xTaskRemoveFromEventList>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d007      	beq.n	800c32a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c31a:	4b3d      	ldr	r3, [pc, #244]	; (800c410 <xQueueReceive+0x1c8>)
 800c31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c32a:	f002 f8cb 	bl	800e4c4 <vPortExitCritical>
				return pdPASS;
 800c32e:	2301      	movs	r3, #1
 800c330:	e069      	b.n	800c406 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d103      	bne.n	800c340 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c338:	f002 f8c4 	bl	800e4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c33c:	2300      	movs	r3, #0
 800c33e:	e062      	b.n	800c406 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c346:	f107 0310 	add.w	r3, r7, #16
 800c34a:	4618      	mov	r0, r3
 800c34c:	f001 f8d6 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c350:	2301      	movs	r3, #1
 800c352:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c354:	f002 f8b6 	bl	800e4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c358:	f000 fe36 	bl	800cfc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c35c:	f002 f87e 	bl	800e45c <vPortEnterCritical>
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c366:	b25b      	sxtb	r3, r3
 800c368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36c:	d103      	bne.n	800c376 <xQueueReceive+0x12e>
 800c36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c37c:	b25b      	sxtb	r3, r3
 800c37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c382:	d103      	bne.n	800c38c <xQueueReceive+0x144>
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c38c:	f002 f89a 	bl	800e4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c390:	1d3a      	adds	r2, r7, #4
 800c392:	f107 0310 	add.w	r3, r7, #16
 800c396:	4611      	mov	r1, r2
 800c398:	4618      	mov	r0, r3
 800c39a:	f001 f8c5 	bl	800d528 <xTaskCheckForTimeOut>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d123      	bne.n	800c3ec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3a6:	f000 faee 	bl	800c986 <prvIsQueueEmpty>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d017      	beq.n	800c3e0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b2:	3324      	adds	r3, #36	; 0x24
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 ffe5 	bl	800d388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c0:	f000 fa8f 	bl	800c8e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3c4:	f000 fe0e 	bl	800cfe4 <xTaskResumeAll>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d189      	bne.n	800c2e2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c3ce:	4b10      	ldr	r3, [pc, #64]	; (800c410 <xQueueReceive+0x1c8>)
 800c3d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3d4:	601a      	str	r2, [r3, #0]
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	e780      	b.n	800c2e2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3e2:	f000 fa7e 	bl	800c8e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3e6:	f000 fdfd 	bl	800cfe4 <xTaskResumeAll>
 800c3ea:	e77a      	b.n	800c2e2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c3ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ee:	f000 fa78 	bl	800c8e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3f2:	f000 fdf7 	bl	800cfe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f8:	f000 fac5 	bl	800c986 <prvIsQueueEmpty>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f43f af6f 	beq.w	800c2e2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c404:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c406:	4618      	mov	r0, r3
 800c408:	3730      	adds	r7, #48	; 0x30
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	e000ed04 	.word	0xe000ed04

0800c414 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b08e      	sub	sp, #56	; 0x38
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c41e:	2300      	movs	r3, #0
 800c420:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c426:	2300      	movs	r3, #0
 800c428:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10c      	bne.n	800c44a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	b672      	cpsid	i
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	b662      	cpsie	i
 800c444:	623b      	str	r3, [r7, #32]
}
 800c446:	bf00      	nop
 800c448:	e7fe      	b.n	800c448 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00c      	beq.n	800c46c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	b672      	cpsid	i
 800c458:	f383 8811 	msr	BASEPRI, r3
 800c45c:	f3bf 8f6f 	isb	sy
 800c460:	f3bf 8f4f 	dsb	sy
 800c464:	b662      	cpsie	i
 800c466:	61fb      	str	r3, [r7, #28]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c46c:	f001 f9aa 	bl	800d7c4 <xTaskGetSchedulerState>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d102      	bne.n	800c47c <xQueueSemaphoreTake+0x68>
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d101      	bne.n	800c480 <xQueueSemaphoreTake+0x6c>
 800c47c:	2301      	movs	r3, #1
 800c47e:	e000      	b.n	800c482 <xQueueSemaphoreTake+0x6e>
 800c480:	2300      	movs	r3, #0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10c      	bne.n	800c4a0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48a:	b672      	cpsid	i
 800c48c:	f383 8811 	msr	BASEPRI, r3
 800c490:	f3bf 8f6f 	isb	sy
 800c494:	f3bf 8f4f 	dsb	sy
 800c498:	b662      	cpsie	i
 800c49a:	61bb      	str	r3, [r7, #24]
}
 800c49c:	bf00      	nop
 800c49e:	e7fe      	b.n	800c49e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4a0:	f001 ffdc 	bl	800e45c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d024      	beq.n	800c4fa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	1e5a      	subs	r2, r3, #1
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d104      	bne.n	800c4ca <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c4c0:	f001 fafe 	bl	800dac0 <pvTaskIncrementMutexHeldCount>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00f      	beq.n	800c4f2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	3310      	adds	r3, #16
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 ffaa 	bl	800d430 <xTaskRemoveFromEventList>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d007      	beq.n	800c4f2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4e2:	4b55      	ldr	r3, [pc, #340]	; (800c638 <xQueueSemaphoreTake+0x224>)
 800c4e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e8:	601a      	str	r2, [r3, #0]
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4f2:	f001 ffe7 	bl	800e4c4 <vPortExitCritical>
				return pdPASS;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e099      	b.n	800c62e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d113      	bne.n	800c528 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00c      	beq.n	800c520 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50a:	b672      	cpsid	i
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	b662      	cpsie	i
 800c51a:	617b      	str	r3, [r7, #20]
}
 800c51c:	bf00      	nop
 800c51e:	e7fe      	b.n	800c51e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c520:	f001 ffd0 	bl	800e4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c524:	2300      	movs	r3, #0
 800c526:	e082      	b.n	800c62e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d106      	bne.n	800c53c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c52e:	f107 030c 	add.w	r3, r7, #12
 800c532:	4618      	mov	r0, r3
 800c534:	f000 ffe2 	bl	800d4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c538:	2301      	movs	r3, #1
 800c53a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c53c:	f001 ffc2 	bl	800e4c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c540:	f000 fd42 	bl	800cfc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c544:	f001 ff8a 	bl	800e45c <vPortEnterCritical>
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c54e:	b25b      	sxtb	r3, r3
 800c550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c554:	d103      	bne.n	800c55e <xQueueSemaphoreTake+0x14a>
 800c556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c558:	2200      	movs	r2, #0
 800c55a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c564:	b25b      	sxtb	r3, r3
 800c566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56a:	d103      	bne.n	800c574 <xQueueSemaphoreTake+0x160>
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	2200      	movs	r2, #0
 800c570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c574:	f001 ffa6 	bl	800e4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c578:	463a      	mov	r2, r7
 800c57a:	f107 030c 	add.w	r3, r7, #12
 800c57e:	4611      	mov	r1, r2
 800c580:	4618      	mov	r0, r3
 800c582:	f000 ffd1 	bl	800d528 <xTaskCheckForTimeOut>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d132      	bne.n	800c5f2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c58c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c58e:	f000 f9fa 	bl	800c986 <prvIsQueueEmpty>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d026      	beq.n	800c5e6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d109      	bne.n	800c5b4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c5a0:	f001 ff5c 	bl	800e45c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f001 f929 	bl	800d800 <xTaskPriorityInherit>
 800c5ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c5b0:	f001 ff88 	bl	800e4c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	3324      	adds	r3, #36	; 0x24
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	4611      	mov	r1, r2
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f000 fee3 	bl	800d388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c5c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5c4:	f000 f98d 	bl	800c8e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c5c8:	f000 fd0c 	bl	800cfe4 <xTaskResumeAll>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f47f af66 	bne.w	800c4a0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c5d4:	4b18      	ldr	r3, [pc, #96]	; (800c638 <xQueueSemaphoreTake+0x224>)
 800c5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	e75c      	b.n	800c4a0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c5e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5e8:	f000 f97b 	bl	800c8e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5ec:	f000 fcfa 	bl	800cfe4 <xTaskResumeAll>
 800c5f0:	e756      	b.n	800c4a0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c5f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5f4:	f000 f975 	bl	800c8e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5f8:	f000 fcf4 	bl	800cfe4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5fe:	f000 f9c2 	bl	800c986 <prvIsQueueEmpty>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	f43f af4b 	beq.w	800c4a0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00d      	beq.n	800c62c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c610:	f001 ff24 	bl	800e45c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c616:	f000 f8bc 	bl	800c792 <prvGetDisinheritPriorityAfterTimeout>
 800c61a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c622:	4618      	mov	r0, r3
 800c624:	f001 f9c6 	bl	800d9b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c628:	f001 ff4c 	bl	800e4c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c62c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3738      	adds	r7, #56	; 0x38
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	e000ed04 	.word	0xe000ed04

0800c63c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b08e      	sub	sp, #56	; 0x38
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10c      	bne.n	800c66c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	b672      	cpsid	i
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	b662      	cpsie	i
 800c666:	623b      	str	r3, [r7, #32]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d103      	bne.n	800c67a <xQueueReceiveFromISR+0x3e>
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <xQueueReceiveFromISR+0x42>
 800c67a:	2301      	movs	r3, #1
 800c67c:	e000      	b.n	800c680 <xQueueReceiveFromISR+0x44>
 800c67e:	2300      	movs	r3, #0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10c      	bne.n	800c69e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	b672      	cpsid	i
 800c68a:	f383 8811 	msr	BASEPRI, r3
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	b662      	cpsie	i
 800c698:	61fb      	str	r3, [r7, #28]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c69e:	f001 ffc5 	bl	800e62c <vPortValidateInterruptPriority>
	__asm volatile
 800c6a2:	f3ef 8211 	mrs	r2, BASEPRI
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	b672      	cpsid	i
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	b662      	cpsie	i
 800c6ba:	61ba      	str	r2, [r7, #24]
 800c6bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c6be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d02f      	beq.n	800c72e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6d8:	68b9      	ldr	r1, [r7, #8]
 800c6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6dc:	f000 f8db 	bl	800c896 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	1e5a      	subs	r2, r3, #1
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c6e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f0:	d112      	bne.n	800c718 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d016      	beq.n	800c728 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fc:	3310      	adds	r3, #16
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 fe96 	bl	800d430 <xTaskRemoveFromEventList>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00e      	beq.n	800c728 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00b      	beq.n	800c728 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	601a      	str	r2, [r3, #0]
 800c716:	e007      	b.n	800c728 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c71c:	3301      	adds	r3, #1
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	b25a      	sxtb	r2, r3
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c728:	2301      	movs	r3, #1
 800c72a:	637b      	str	r3, [r7, #52]	; 0x34
 800c72c:	e001      	b.n	800c732 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800c72e:	2300      	movs	r3, #0
 800c730:	637b      	str	r3, [r7, #52]	; 0x34
 800c732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c734:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f383 8811 	msr	BASEPRI, r3
}
 800c73c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c740:	4618      	mov	r0, r3
 800c742:	3738      	adds	r7, #56	; 0x38
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10c      	bne.n	800c774 <vQueueDelete+0x2c>
	__asm volatile
 800c75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75e:	b672      	cpsid	i
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	b662      	cpsie	i
 800c76e:	60bb      	str	r3, [r7, #8]
}
 800c770:	bf00      	nop
 800c772:	e7fe      	b.n	800c772 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f000 f95f 	bl	800ca38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c780:	2b00      	cmp	r3, #0
 800c782:	d102      	bne.n	800c78a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f002 f85f 	bl	800e848 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c78a:	bf00      	nop
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c792:	b480      	push	{r7}
 800c794:	b085      	sub	sp, #20
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d006      	beq.n	800c7b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	e001      	b.n	800c7b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
	}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b086      	sub	sp, #24
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	60f8      	str	r0, [r7, #12]
 800c7ca:	60b9      	str	r1, [r7, #8]
 800c7cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10d      	bne.n	800c7fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d14d      	bne.n	800c884 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f001 f86f 	bl	800d8d0 <xTaskPriorityDisinherit>
 800c7f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	609a      	str	r2, [r3, #8]
 800c7fa:	e043      	b.n	800c884 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d119      	bne.n	800c836 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6858      	ldr	r0, [r3, #4]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80a:	461a      	mov	r2, r3
 800c80c:	68b9      	ldr	r1, [r7, #8]
 800c80e:	f002 fa58 	bl	800ecc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81a:	441a      	add	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	685a      	ldr	r2, [r3, #4]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d32b      	bcc.n	800c884 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	605a      	str	r2, [r3, #4]
 800c834:	e026      	b.n	800c884 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	68d8      	ldr	r0, [r3, #12]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83e:	461a      	mov	r2, r3
 800c840:	68b9      	ldr	r1, [r7, #8]
 800c842:	f002 fa3e 	bl	800ecc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	68da      	ldr	r2, [r3, #12]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84e:	425b      	negs	r3, r3
 800c850:	441a      	add	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	68da      	ldr	r2, [r3, #12]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d207      	bcs.n	800c872 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	689a      	ldr	r2, [r3, #8]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86a:	425b      	negs	r3, r3
 800c86c:	441a      	add	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b02      	cmp	r3, #2
 800c876:	d105      	bne.n	800c884 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	3b01      	subs	r3, #1
 800c882:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c88c:	697b      	ldr	r3, [r7, #20]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d018      	beq.n	800c8da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b0:	441a      	add	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	68da      	ldr	r2, [r3, #12]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d303      	bcc.n	800c8ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68d9      	ldr	r1, [r3, #12]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6838      	ldr	r0, [r7, #0]
 800c8d6:	f002 f9f4 	bl	800ecc2 <memcpy>
	}
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b084      	sub	sp, #16
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c8ea:	f001 fdb7 	bl	800e45c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8f6:	e011      	b.n	800c91c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d012      	beq.n	800c926 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3324      	adds	r3, #36	; 0x24
 800c904:	4618      	mov	r0, r3
 800c906:	f000 fd93 	bl	800d430 <xTaskRemoveFromEventList>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c910:	f000 fe70 	bl	800d5f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c914:	7bfb      	ldrb	r3, [r7, #15]
 800c916:	3b01      	subs	r3, #1
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c920:	2b00      	cmp	r3, #0
 800c922:	dce9      	bgt.n	800c8f8 <prvUnlockQueue+0x16>
 800c924:	e000      	b.n	800c928 <prvUnlockQueue+0x46>
					break;
 800c926:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	22ff      	movs	r2, #255	; 0xff
 800c92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c930:	f001 fdc8 	bl	800e4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c934:	f001 fd92 	bl	800e45c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c93e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c940:	e011      	b.n	800c966 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d012      	beq.n	800c970 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3310      	adds	r3, #16
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 fd6e 	bl	800d430 <xTaskRemoveFromEventList>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c95a:	f000 fe4b 	bl	800d5f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c95e:	7bbb      	ldrb	r3, [r7, #14]
 800c960:	3b01      	subs	r3, #1
 800c962:	b2db      	uxtb	r3, r3
 800c964:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dce9      	bgt.n	800c942 <prvUnlockQueue+0x60>
 800c96e:	e000      	b.n	800c972 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c970:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	22ff      	movs	r2, #255	; 0xff
 800c976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c97a:	f001 fda3 	bl	800e4c4 <vPortExitCritical>
}
 800c97e:	bf00      	nop
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c98e:	f001 fd65 	bl	800e45c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c996:	2b00      	cmp	r3, #0
 800c998:	d102      	bne.n	800c9a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c99a:	2301      	movs	r3, #1
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	e001      	b.n	800c9a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9a4:	f001 fd8e 	bl	800e4c4 <vPortExitCritical>

	return xReturn;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9ba:	f001 fd4f 	bl	800e45c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d102      	bne.n	800c9d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	60fb      	str	r3, [r7, #12]
 800c9ce:	e001      	b.n	800c9d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9d4:	f001 fd76 	bl	800e4c4 <vPortExitCritical>

	return xReturn;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
	...

0800c9e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	60fb      	str	r3, [r7, #12]
 800c9f2:	e014      	b.n	800ca1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c9f4:	4a0f      	ldr	r2, [pc, #60]	; (800ca34 <vQueueAddToRegistry+0x50>)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10b      	bne.n	800ca18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca00:	490c      	ldr	r1, [pc, #48]	; (800ca34 <vQueueAddToRegistry+0x50>)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	683a      	ldr	r2, [r7, #0]
 800ca06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca0a:	4a0a      	ldr	r2, [pc, #40]	; (800ca34 <vQueueAddToRegistry+0x50>)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	00db      	lsls	r3, r3, #3
 800ca10:	4413      	add	r3, r2
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca16:	e006      	b.n	800ca26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	60fb      	str	r3, [r7, #12]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2b07      	cmp	r3, #7
 800ca22:	d9e7      	bls.n	800c9f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20001c8c 	.word	0x20001c8c

0800ca38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca40:	2300      	movs	r3, #0
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	e016      	b.n	800ca74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ca46:	4a10      	ldr	r2, [pc, #64]	; (800ca88 <vQueueUnregisterQueue+0x50>)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	4413      	add	r3, r2
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d10b      	bne.n	800ca6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ca56:	4a0c      	ldr	r2, [pc, #48]	; (800ca88 <vQueueUnregisterQueue+0x50>)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ca60:	4a09      	ldr	r2, [pc, #36]	; (800ca88 <vQueueUnregisterQueue+0x50>)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	00db      	lsls	r3, r3, #3
 800ca66:	4413      	add	r3, r2
 800ca68:	2200      	movs	r2, #0
 800ca6a:	605a      	str	r2, [r3, #4]
				break;
 800ca6c:	e006      	b.n	800ca7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	3301      	adds	r3, #1
 800ca72:	60fb      	str	r3, [r7, #12]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b07      	cmp	r3, #7
 800ca78:	d9e5      	bls.n	800ca46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr
 800ca88:	20001c8c 	.word	0x20001c8c

0800ca8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca9c:	f001 fcde 	bl	800e45c <vPortEnterCritical>
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caa6:	b25b      	sxtb	r3, r3
 800caa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caac:	d103      	bne.n	800cab6 <vQueueWaitForMessageRestricted+0x2a>
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cabc:	b25b      	sxtb	r3, r3
 800cabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac2:	d103      	bne.n	800cacc <vQueueWaitForMessageRestricted+0x40>
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cacc:	f001 fcfa 	bl	800e4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d106      	bne.n	800cae6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	3324      	adds	r3, #36	; 0x24
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	68b9      	ldr	r1, [r7, #8]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fc77 	bl	800d3d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cae6:	6978      	ldr	r0, [r7, #20]
 800cae8:	f7ff fefb 	bl	800c8e2 <prvUnlockQueue>
	}
 800caec:	bf00      	nop
 800caee:	3718      	adds	r7, #24
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08e      	sub	sp, #56	; 0x38
 800caf8:	af04      	add	r7, sp, #16
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10c      	bne.n	800cb22 <xTaskCreateStatic+0x2e>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0c:	b672      	cpsid	i
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	b662      	cpsie	i
 800cb1c:	623b      	str	r3, [r7, #32]
}
 800cb1e:	bf00      	nop
 800cb20:	e7fe      	b.n	800cb20 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800cb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10c      	bne.n	800cb42 <xTaskCreateStatic+0x4e>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	b672      	cpsid	i
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	b662      	cpsie	i
 800cb3c:	61fb      	str	r3, [r7, #28]
}
 800cb3e:	bf00      	nop
 800cb40:	e7fe      	b.n	800cb40 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb42:	23bc      	movs	r3, #188	; 0xbc
 800cb44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2bbc      	cmp	r3, #188	; 0xbc
 800cb4a:	d00c      	beq.n	800cb66 <xTaskCreateStatic+0x72>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb50:	b672      	cpsid	i
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	b662      	cpsie	i
 800cb60:	61bb      	str	r3, [r7, #24]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d01e      	beq.n	800cbac <xTaskCreateStatic+0xb8>
 800cb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d01b      	beq.n	800cbac <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	2202      	movs	r2, #2
 800cb82:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb86:	2300      	movs	r3, #0
 800cb88:	9303      	str	r3, [sp, #12]
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8c:	9302      	str	r3, [sp, #8]
 800cb8e:	f107 0314 	add.w	r3, r7, #20
 800cb92:	9301      	str	r3, [sp, #4]
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	68b9      	ldr	r1, [r7, #8]
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 f850 	bl	800cc44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cba6:	f000 f8f5 	bl	800cd94 <prvAddNewTaskToReadyList>
 800cbaa:	e001      	b.n	800cbb0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800cbac:	2300      	movs	r3, #0
 800cbae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cbb0:	697b      	ldr	r3, [r7, #20]
	}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3728      	adds	r7, #40	; 0x28
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b08c      	sub	sp, #48	; 0x30
 800cbbe:	af04      	add	r7, sp, #16
 800cbc0:	60f8      	str	r0, [r7, #12]
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	603b      	str	r3, [r7, #0]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbca:	88fb      	ldrh	r3, [r7, #6]
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f001 fd70 	bl	800e6b4 <pvPortMalloc>
 800cbd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00e      	beq.n	800cbfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cbdc:	20bc      	movs	r0, #188	; 0xbc
 800cbde:	f001 fd69 	bl	800e6b4 <pvPortMalloc>
 800cbe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	697a      	ldr	r2, [r7, #20]
 800cbee:	631a      	str	r2, [r3, #48]	; 0x30
 800cbf0:	e005      	b.n	800cbfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbf2:	6978      	ldr	r0, [r7, #20]
 800cbf4:	f001 fe28 	bl	800e848 <vPortFree>
 800cbf8:	e001      	b.n	800cbfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d017      	beq.n	800cc34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc0c:	88fa      	ldrh	r2, [r7, #6]
 800cc0e:	2300      	movs	r3, #0
 800cc10:	9303      	str	r3, [sp, #12]
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	9302      	str	r3, [sp, #8]
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	9301      	str	r3, [sp, #4]
 800cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	68b9      	ldr	r1, [r7, #8]
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f000 f80e 	bl	800cc44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc28:	69f8      	ldr	r0, [r7, #28]
 800cc2a:	f000 f8b3 	bl	800cd94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	61bb      	str	r3, [r7, #24]
 800cc32:	e002      	b.n	800cc3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc34:	f04f 33ff 	mov.w	r3, #4294967295
 800cc38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc3a:	69bb      	ldr	r3, [r7, #24]
	}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3720      	adds	r7, #32
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b088      	sub	sp, #32
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
 800cc50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	21a5      	movs	r1, #165	; 0xa5
 800cc5e:	f002 f83e 	bl	800ecde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cc6c:	440b      	add	r3, r1
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	f023 0307 	bic.w	r3, r3, #7
 800cc7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	f003 0307 	and.w	r3, r3, #7
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00c      	beq.n	800cca0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	b672      	cpsid	i
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	b662      	cpsie	i
 800cc9a:	617b      	str	r3, [r7, #20]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d01f      	beq.n	800cce6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cca6:	2300      	movs	r3, #0
 800cca8:	61fb      	str	r3, [r7, #28]
 800ccaa:	e012      	b.n	800ccd2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	7819      	ldrb	r1, [r3, #0]
 800ccb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	4413      	add	r3, r2
 800ccba:	3334      	adds	r3, #52	; 0x34
 800ccbc:	460a      	mov	r2, r1
 800ccbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d006      	beq.n	800ccda <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	61fb      	str	r3, [r7, #28]
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	2b0f      	cmp	r3, #15
 800ccd6:	d9e9      	bls.n	800ccac <prvInitialiseNewTask+0x68>
 800ccd8:	e000      	b.n	800ccdc <prvInitialiseNewTask+0x98>
			{
				break;
 800ccda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cce4:	e003      	b.n	800ccee <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf0:	2b37      	cmp	r3, #55	; 0x37
 800ccf2:	d901      	bls.n	800ccf8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccf4:	2337      	movs	r3, #55	; 0x37
 800ccf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ccf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd06:	2200      	movs	r2, #0
 800cd08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fe fe06 	bl	800b920 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	3318      	adds	r3, #24
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fe fe01 	bl	800b920 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	2200      	movs	r2, #0
 800cd38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	3354      	adds	r3, #84	; 0x54
 800cd48:	2260      	movs	r2, #96	; 0x60
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f001 ffc6 	bl	800ecde <memset>
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	4a0c      	ldr	r2, [pc, #48]	; (800cd88 <prvInitialiseNewTask+0x144>)
 800cd56:	659a      	str	r2, [r3, #88]	; 0x58
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5a:	4a0c      	ldr	r2, [pc, #48]	; (800cd8c <prvInitialiseNewTask+0x148>)
 800cd5c:	65da      	str	r2, [r3, #92]	; 0x5c
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	4a0b      	ldr	r2, [pc, #44]	; (800cd90 <prvInitialiseNewTask+0x14c>)
 800cd62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	68f9      	ldr	r1, [r7, #12]
 800cd68:	69b8      	ldr	r0, [r7, #24]
 800cd6a:	f001 fa6d 	bl	800e248 <pxPortInitialiseStack>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd80:	bf00      	nop
 800cd82:	3720      	adds	r7, #32
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	08011e84 	.word	0x08011e84
 800cd8c:	08011ea4 	.word	0x08011ea4
 800cd90:	08011e64 	.word	0x08011e64

0800cd94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd9c:	f001 fb5e 	bl	800e45c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cda0:	4b2d      	ldr	r3, [pc, #180]	; (800ce58 <prvAddNewTaskToReadyList+0xc4>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	4a2c      	ldr	r2, [pc, #176]	; (800ce58 <prvAddNewTaskToReadyList+0xc4>)
 800cda8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdaa:	4b2c      	ldr	r3, [pc, #176]	; (800ce5c <prvAddNewTaskToReadyList+0xc8>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d109      	bne.n	800cdc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdb2:	4a2a      	ldr	r2, [pc, #168]	; (800ce5c <prvAddNewTaskToReadyList+0xc8>)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdb8:	4b27      	ldr	r3, [pc, #156]	; (800ce58 <prvAddNewTaskToReadyList+0xc4>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d110      	bne.n	800cde2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cdc0:	f000 fc3c 	bl	800d63c <prvInitialiseTaskLists>
 800cdc4:	e00d      	b.n	800cde2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdc6:	4b26      	ldr	r3, [pc, #152]	; (800ce60 <prvAddNewTaskToReadyList+0xcc>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d109      	bne.n	800cde2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdce:	4b23      	ldr	r3, [pc, #140]	; (800ce5c <prvAddNewTaskToReadyList+0xc8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d802      	bhi.n	800cde2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cddc:	4a1f      	ldr	r2, [pc, #124]	; (800ce5c <prvAddNewTaskToReadyList+0xc8>)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cde2:	4b20      	ldr	r3, [pc, #128]	; (800ce64 <prvAddNewTaskToReadyList+0xd0>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	3301      	adds	r3, #1
 800cde8:	4a1e      	ldr	r2, [pc, #120]	; (800ce64 <prvAddNewTaskToReadyList+0xd0>)
 800cdea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cdec:	4b1d      	ldr	r3, [pc, #116]	; (800ce64 <prvAddNewTaskToReadyList+0xd0>)
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf8:	4b1b      	ldr	r3, [pc, #108]	; (800ce68 <prvAddNewTaskToReadyList+0xd4>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d903      	bls.n	800ce08 <prvAddNewTaskToReadyList+0x74>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce04:	4a18      	ldr	r2, [pc, #96]	; (800ce68 <prvAddNewTaskToReadyList+0xd4>)
 800ce06:	6013      	str	r3, [r2, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4a15      	ldr	r2, [pc, #84]	; (800ce6c <prvAddNewTaskToReadyList+0xd8>)
 800ce16:	441a      	add	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f7fe fd8b 	bl	800b93a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce24:	f001 fb4e 	bl	800e4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce28:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <prvAddNewTaskToReadyList+0xcc>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00e      	beq.n	800ce4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce30:	4b0a      	ldr	r3, [pc, #40]	; (800ce5c <prvAddNewTaskToReadyList+0xc8>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d207      	bcs.n	800ce4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce3e:	4b0c      	ldr	r3, [pc, #48]	; (800ce70 <prvAddNewTaskToReadyList+0xdc>)
 800ce40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce4e:	bf00      	nop
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	200021a0 	.word	0x200021a0
 800ce5c:	20001ccc 	.word	0x20001ccc
 800ce60:	200021ac 	.word	0x200021ac
 800ce64:	200021bc 	.word	0x200021bc
 800ce68:	200021a8 	.word	0x200021a8
 800ce6c:	20001cd0 	.word	0x20001cd0
 800ce70:	e000ed04 	.word	0xe000ed04

0800ce74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d019      	beq.n	800ceba <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce86:	4b14      	ldr	r3, [pc, #80]	; (800ced8 <vTaskDelay+0x64>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00c      	beq.n	800cea8 <vTaskDelay+0x34>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	b672      	cpsid	i
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	b662      	cpsie	i
 800cea2:	60bb      	str	r3, [r7, #8]
}
 800cea4:	bf00      	nop
 800cea6:	e7fe      	b.n	800cea6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cea8:	f000 f88e 	bl	800cfc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ceac:	2100      	movs	r1, #0
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fe1a 	bl	800dae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ceb4:	f000 f896 	bl	800cfe4 <xTaskResumeAll>
 800ceb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d107      	bne.n	800ced0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800cec0:	4b06      	ldr	r3, [pc, #24]	; (800cedc <vTaskDelay+0x68>)
 800cec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ced0:	bf00      	nop
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	200021c8 	.word	0x200021c8
 800cedc:	e000ed04 	.word	0xe000ed04

0800cee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b08a      	sub	sp, #40	; 0x28
 800cee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ceee:	463a      	mov	r2, r7
 800cef0:	1d39      	adds	r1, r7, #4
 800cef2:	f107 0308 	add.w	r3, r7, #8
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fcbe 	bl	800b878 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	9202      	str	r2, [sp, #8]
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	2300      	movs	r3, #0
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	460a      	mov	r2, r1
 800cf0e:	4926      	ldr	r1, [pc, #152]	; (800cfa8 <vTaskStartScheduler+0xc8>)
 800cf10:	4826      	ldr	r0, [pc, #152]	; (800cfac <vTaskStartScheduler+0xcc>)
 800cf12:	f7ff fdef 	bl	800caf4 <xTaskCreateStatic>
 800cf16:	4603      	mov	r3, r0
 800cf18:	4a25      	ldr	r2, [pc, #148]	; (800cfb0 <vTaskStartScheduler+0xd0>)
 800cf1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf1c:	4b24      	ldr	r3, [pc, #144]	; (800cfb0 <vTaskStartScheduler+0xd0>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d002      	beq.n	800cf2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf24:	2301      	movs	r3, #1
 800cf26:	617b      	str	r3, [r7, #20]
 800cf28:	e001      	b.n	800cf2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d102      	bne.n	800cf3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf34:	f000 fe2c 	bl	800db90 <xTimerCreateTimerTask>
 800cf38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d11d      	bne.n	800cf7c <vTaskStartScheduler+0x9c>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	b672      	cpsid	i
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	b662      	cpsie	i
 800cf54:	613b      	str	r3, [r7, #16]
}
 800cf56:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf58:	4b16      	ldr	r3, [pc, #88]	; (800cfb4 <vTaskStartScheduler+0xd4>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3354      	adds	r3, #84	; 0x54
 800cf5e:	4a16      	ldr	r2, [pc, #88]	; (800cfb8 <vTaskStartScheduler+0xd8>)
 800cf60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf62:	4b16      	ldr	r3, [pc, #88]	; (800cfbc <vTaskStartScheduler+0xdc>)
 800cf64:	f04f 32ff 	mov.w	r2, #4294967295
 800cf68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf6a:	4b15      	ldr	r3, [pc, #84]	; (800cfc0 <vTaskStartScheduler+0xe0>)
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf70:	4b14      	ldr	r3, [pc, #80]	; (800cfc4 <vTaskStartScheduler+0xe4>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf76:	f001 f9f3 	bl	800e360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf7a:	e010      	b.n	800cf9e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf82:	d10c      	bne.n	800cf9e <vTaskStartScheduler+0xbe>
	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf88:	b672      	cpsid	i
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	b662      	cpsie	i
 800cf98:	60fb      	str	r3, [r7, #12]
}
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <vTaskStartScheduler+0xbc>
}
 800cf9e:	bf00      	nop
 800cfa0:	3718      	adds	r7, #24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	08011c10 	.word	0x08011c10
 800cfac:	0800d60d 	.word	0x0800d60d
 800cfb0:	200021c4 	.word	0x200021c4
 800cfb4:	20001ccc 	.word	0x20001ccc
 800cfb8:	20000068 	.word	0x20000068
 800cfbc:	200021c0 	.word	0x200021c0
 800cfc0:	200021ac 	.word	0x200021ac
 800cfc4:	200021a4 	.word	0x200021a4

0800cfc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfc8:	b480      	push	{r7}
 800cfca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <vTaskSuspendAll+0x18>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	4a03      	ldr	r2, [pc, #12]	; (800cfe0 <vTaskSuspendAll+0x18>)
 800cfd4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cfd6:	bf00      	nop
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	200021c8 	.word	0x200021c8

0800cfe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfea:	2300      	movs	r3, #0
 800cfec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfee:	2300      	movs	r3, #0
 800cff0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cff2:	4b43      	ldr	r3, [pc, #268]	; (800d100 <xTaskResumeAll+0x11c>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10c      	bne.n	800d014 <xTaskResumeAll+0x30>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	b672      	cpsid	i
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	b662      	cpsie	i
 800d00e:	603b      	str	r3, [r7, #0]
}
 800d010:	bf00      	nop
 800d012:	e7fe      	b.n	800d012 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d014:	f001 fa22 	bl	800e45c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d018:	4b39      	ldr	r3, [pc, #228]	; (800d100 <xTaskResumeAll+0x11c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	4a38      	ldr	r2, [pc, #224]	; (800d100 <xTaskResumeAll+0x11c>)
 800d020:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d022:	4b37      	ldr	r3, [pc, #220]	; (800d100 <xTaskResumeAll+0x11c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d162      	bne.n	800d0f0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d02a:	4b36      	ldr	r3, [pc, #216]	; (800d104 <xTaskResumeAll+0x120>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d05e      	beq.n	800d0f0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d032:	e02f      	b.n	800d094 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d034:	4b34      	ldr	r3, [pc, #208]	; (800d108 <xTaskResumeAll+0x124>)
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	3318      	adds	r3, #24
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fcd7 	bl	800b9f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3304      	adds	r3, #4
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe fcd2 	bl	800b9f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d054:	4b2d      	ldr	r3, [pc, #180]	; (800d10c <xTaskResumeAll+0x128>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d903      	bls.n	800d064 <xTaskResumeAll+0x80>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d060:	4a2a      	ldr	r2, [pc, #168]	; (800d10c <xTaskResumeAll+0x128>)
 800d062:	6013      	str	r3, [r2, #0]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d068:	4613      	mov	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4a27      	ldr	r2, [pc, #156]	; (800d110 <xTaskResumeAll+0x12c>)
 800d072:	441a      	add	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3304      	adds	r3, #4
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f7fe fc5d 	bl	800b93a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d084:	4b23      	ldr	r3, [pc, #140]	; (800d114 <xTaskResumeAll+0x130>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d302      	bcc.n	800d094 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800d08e:	4b22      	ldr	r3, [pc, #136]	; (800d118 <xTaskResumeAll+0x134>)
 800d090:	2201      	movs	r2, #1
 800d092:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d094:	4b1c      	ldr	r3, [pc, #112]	; (800d108 <xTaskResumeAll+0x124>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d1cb      	bne.n	800d034 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0a2:	f000 fb6f 	bl	800d784 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d0a6:	4b1d      	ldr	r3, [pc, #116]	; (800d11c <xTaskResumeAll+0x138>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d010      	beq.n	800d0d4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0b2:	f000 f847 	bl	800d144 <xTaskIncrementTick>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800d0bc:	4b16      	ldr	r3, [pc, #88]	; (800d118 <xTaskResumeAll+0x134>)
 800d0be:	2201      	movs	r2, #1
 800d0c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1f1      	bne.n	800d0b2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <xTaskResumeAll+0x138>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0d4:	4b10      	ldr	r3, [pc, #64]	; (800d118 <xTaskResumeAll+0x134>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d009      	beq.n	800d0f0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0e0:	4b0f      	ldr	r3, [pc, #60]	; (800d120 <xTaskResumeAll+0x13c>)
 800d0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e6:	601a      	str	r2, [r3, #0]
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0f0:	f001 f9e8 	bl	800e4c4 <vPortExitCritical>

	return xAlreadyYielded;
 800d0f4:	68bb      	ldr	r3, [r7, #8]
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	200021c8 	.word	0x200021c8
 800d104:	200021a0 	.word	0x200021a0
 800d108:	20002160 	.word	0x20002160
 800d10c:	200021a8 	.word	0x200021a8
 800d110:	20001cd0 	.word	0x20001cd0
 800d114:	20001ccc 	.word	0x20001ccc
 800d118:	200021b4 	.word	0x200021b4
 800d11c:	200021b0 	.word	0x200021b0
 800d120:	e000ed04 	.word	0xe000ed04

0800d124 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d12a:	4b05      	ldr	r3, [pc, #20]	; (800d140 <xTaskGetTickCount+0x1c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d130:	687b      	ldr	r3, [r7, #4]
}
 800d132:	4618      	mov	r0, r3
 800d134:	370c      	adds	r7, #12
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	200021a4 	.word	0x200021a4

0800d144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d14a:	2300      	movs	r3, #0
 800d14c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d14e:	4b50      	ldr	r3, [pc, #320]	; (800d290 <xTaskIncrementTick+0x14c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	f040 808b 	bne.w	800d26e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d158:	4b4e      	ldr	r3, [pc, #312]	; (800d294 <xTaskIncrementTick+0x150>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	3301      	adds	r3, #1
 800d15e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d160:	4a4c      	ldr	r2, [pc, #304]	; (800d294 <xTaskIncrementTick+0x150>)
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d122      	bne.n	800d1b2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d16c:	4b4a      	ldr	r3, [pc, #296]	; (800d298 <xTaskIncrementTick+0x154>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00c      	beq.n	800d190 <xTaskIncrementTick+0x4c>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17a:	b672      	cpsid	i
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	b662      	cpsie	i
 800d18a:	603b      	str	r3, [r7, #0]
}
 800d18c:	bf00      	nop
 800d18e:	e7fe      	b.n	800d18e <xTaskIncrementTick+0x4a>
 800d190:	4b41      	ldr	r3, [pc, #260]	; (800d298 <xTaskIncrementTick+0x154>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	60fb      	str	r3, [r7, #12]
 800d196:	4b41      	ldr	r3, [pc, #260]	; (800d29c <xTaskIncrementTick+0x158>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a3f      	ldr	r2, [pc, #252]	; (800d298 <xTaskIncrementTick+0x154>)
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	4a3f      	ldr	r2, [pc, #252]	; (800d29c <xTaskIncrementTick+0x158>)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6013      	str	r3, [r2, #0]
 800d1a4:	4b3e      	ldr	r3, [pc, #248]	; (800d2a0 <xTaskIncrementTick+0x15c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	4a3d      	ldr	r2, [pc, #244]	; (800d2a0 <xTaskIncrementTick+0x15c>)
 800d1ac:	6013      	str	r3, [r2, #0]
 800d1ae:	f000 fae9 	bl	800d784 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1b2:	4b3c      	ldr	r3, [pc, #240]	; (800d2a4 <xTaskIncrementTick+0x160>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d349      	bcc.n	800d250 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1bc:	4b36      	ldr	r3, [pc, #216]	; (800d298 <xTaskIncrementTick+0x154>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d104      	bne.n	800d1d0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1c6:	4b37      	ldr	r3, [pc, #220]	; (800d2a4 <xTaskIncrementTick+0x160>)
 800d1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1cc:	601a      	str	r2, [r3, #0]
					break;
 800d1ce:	e03f      	b.n	800d250 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1d0:	4b31      	ldr	r3, [pc, #196]	; (800d298 <xTaskIncrementTick+0x154>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d203      	bcs.n	800d1f0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1e8:	4a2e      	ldr	r2, [pc, #184]	; (800d2a4 <xTaskIncrementTick+0x160>)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d1ee:	e02f      	b.n	800d250 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	3304      	adds	r3, #4
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7fe fbfd 	bl	800b9f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d004      	beq.n	800d20c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	3318      	adds	r3, #24
 800d206:	4618      	mov	r0, r3
 800d208:	f7fe fbf4 	bl	800b9f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d210:	4b25      	ldr	r3, [pc, #148]	; (800d2a8 <xTaskIncrementTick+0x164>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	429a      	cmp	r2, r3
 800d216:	d903      	bls.n	800d220 <xTaskIncrementTick+0xdc>
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21c:	4a22      	ldr	r2, [pc, #136]	; (800d2a8 <xTaskIncrementTick+0x164>)
 800d21e:	6013      	str	r3, [r2, #0]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d224:	4613      	mov	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4a1f      	ldr	r2, [pc, #124]	; (800d2ac <xTaskIncrementTick+0x168>)
 800d22e:	441a      	add	r2, r3
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	3304      	adds	r3, #4
 800d234:	4619      	mov	r1, r3
 800d236:	4610      	mov	r0, r2
 800d238:	f7fe fb7f 	bl	800b93a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d240:	4b1b      	ldr	r3, [pc, #108]	; (800d2b0 <xTaskIncrementTick+0x16c>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d246:	429a      	cmp	r2, r3
 800d248:	d3b8      	bcc.n	800d1bc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d24a:	2301      	movs	r3, #1
 800d24c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d24e:	e7b5      	b.n	800d1bc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d250:	4b17      	ldr	r3, [pc, #92]	; (800d2b0 <xTaskIncrementTick+0x16c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d256:	4915      	ldr	r1, [pc, #84]	; (800d2ac <xTaskIncrementTick+0x168>)
 800d258:	4613      	mov	r3, r2
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	4413      	add	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	440b      	add	r3, r1
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d907      	bls.n	800d278 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800d268:	2301      	movs	r3, #1
 800d26a:	617b      	str	r3, [r7, #20]
 800d26c:	e004      	b.n	800d278 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d26e:	4b11      	ldr	r3, [pc, #68]	; (800d2b4 <xTaskIncrementTick+0x170>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3301      	adds	r3, #1
 800d274:	4a0f      	ldr	r2, [pc, #60]	; (800d2b4 <xTaskIncrementTick+0x170>)
 800d276:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d278:	4b0f      	ldr	r3, [pc, #60]	; (800d2b8 <xTaskIncrementTick+0x174>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800d280:	2301      	movs	r3, #1
 800d282:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d284:	697b      	ldr	r3, [r7, #20]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	200021c8 	.word	0x200021c8
 800d294:	200021a4 	.word	0x200021a4
 800d298:	20002158 	.word	0x20002158
 800d29c:	2000215c 	.word	0x2000215c
 800d2a0:	200021b8 	.word	0x200021b8
 800d2a4:	200021c0 	.word	0x200021c0
 800d2a8:	200021a8 	.word	0x200021a8
 800d2ac:	20001cd0 	.word	0x20001cd0
 800d2b0:	20001ccc 	.word	0x20001ccc
 800d2b4:	200021b0 	.word	0x200021b0
 800d2b8:	200021b4 	.word	0x200021b4

0800d2bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2c2:	4b2b      	ldr	r3, [pc, #172]	; (800d370 <vTaskSwitchContext+0xb4>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d003      	beq.n	800d2d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2ca:	4b2a      	ldr	r3, [pc, #168]	; (800d374 <vTaskSwitchContext+0xb8>)
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2d0:	e048      	b.n	800d364 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800d2d2:	4b28      	ldr	r3, [pc, #160]	; (800d374 <vTaskSwitchContext+0xb8>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2d8:	4b27      	ldr	r3, [pc, #156]	; (800d378 <vTaskSwitchContext+0xbc>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	60fb      	str	r3, [r7, #12]
 800d2de:	e012      	b.n	800d306 <vTaskSwitchContext+0x4a>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10c      	bne.n	800d300 <vTaskSwitchContext+0x44>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	b672      	cpsid	i
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	b662      	cpsie	i
 800d2fa:	607b      	str	r3, [r7, #4]
}
 800d2fc:	bf00      	nop
 800d2fe:	e7fe      	b.n	800d2fe <vTaskSwitchContext+0x42>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	3b01      	subs	r3, #1
 800d304:	60fb      	str	r3, [r7, #12]
 800d306:	491d      	ldr	r1, [pc, #116]	; (800d37c <vTaskSwitchContext+0xc0>)
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	4613      	mov	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	440b      	add	r3, r1
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d0e2      	beq.n	800d2e0 <vTaskSwitchContext+0x24>
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4a15      	ldr	r2, [pc, #84]	; (800d37c <vTaskSwitchContext+0xc0>)
 800d326:	4413      	add	r3, r2
 800d328:	60bb      	str	r3, [r7, #8]
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	685a      	ldr	r2, [r3, #4]
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	605a      	str	r2, [r3, #4]
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	3308      	adds	r3, #8
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d104      	bne.n	800d34a <vTaskSwitchContext+0x8e>
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	685a      	ldr	r2, [r3, #4]
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	605a      	str	r2, [r3, #4]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	4a0b      	ldr	r2, [pc, #44]	; (800d380 <vTaskSwitchContext+0xc4>)
 800d352:	6013      	str	r3, [r2, #0]
 800d354:	4a08      	ldr	r2, [pc, #32]	; (800d378 <vTaskSwitchContext+0xbc>)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d35a:	4b09      	ldr	r3, [pc, #36]	; (800d380 <vTaskSwitchContext+0xc4>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3354      	adds	r3, #84	; 0x54
 800d360:	4a08      	ldr	r2, [pc, #32]	; (800d384 <vTaskSwitchContext+0xc8>)
 800d362:	6013      	str	r3, [r2, #0]
}
 800d364:	bf00      	nop
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	200021c8 	.word	0x200021c8
 800d374:	200021b4 	.word	0x200021b4
 800d378:	200021a8 	.word	0x200021a8
 800d37c:	20001cd0 	.word	0x20001cd0
 800d380:	20001ccc 	.word	0x20001ccc
 800d384:	20000068 	.word	0x20000068

0800d388 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10c      	bne.n	800d3b2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39c:	b672      	cpsid	i
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	b662      	cpsie	i
 800d3ac:	60fb      	str	r3, [r7, #12]
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3b2:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <vTaskPlaceOnEventList+0x48>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3318      	adds	r3, #24
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7fe fae1 	bl	800b982 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	6838      	ldr	r0, [r7, #0]
 800d3c4:	f000 fb90 	bl	800dae8 <prvAddCurrentTaskToDelayedList>
}
 800d3c8:	bf00      	nop
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	20001ccc 	.word	0x20001ccc

0800d3d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10c      	bne.n	800d400 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800d3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ea:	b672      	cpsid	i
 800d3ec:	f383 8811 	msr	BASEPRI, r3
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	f3bf 8f4f 	dsb	sy
 800d3f8:	b662      	cpsie	i
 800d3fa:	617b      	str	r3, [r7, #20]
}
 800d3fc:	bf00      	nop
 800d3fe:	e7fe      	b.n	800d3fe <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <vTaskPlaceOnEventListRestricted+0x58>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	3318      	adds	r3, #24
 800d406:	4619      	mov	r1, r3
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7fe fa96 	bl	800b93a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800d414:	f04f 33ff 	mov.w	r3, #4294967295
 800d418:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	68b8      	ldr	r0, [r7, #8]
 800d41e:	f000 fb63 	bl	800dae8 <prvAddCurrentTaskToDelayedList>
	}
 800d422:	bf00      	nop
 800d424:	3718      	adds	r7, #24
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	20001ccc 	.word	0x20001ccc

0800d430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10c      	bne.n	800d460 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	b672      	cpsid	i
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	b662      	cpsie	i
 800d45a:	60fb      	str	r3, [r7, #12]
}
 800d45c:	bf00      	nop
 800d45e:	e7fe      	b.n	800d45e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	3318      	adds	r3, #24
 800d464:	4618      	mov	r0, r3
 800d466:	f7fe fac5 	bl	800b9f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d46a:	4b1e      	ldr	r3, [pc, #120]	; (800d4e4 <xTaskRemoveFromEventList+0xb4>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d11d      	bne.n	800d4ae <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	3304      	adds	r3, #4
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe fabc 	bl	800b9f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d480:	4b19      	ldr	r3, [pc, #100]	; (800d4e8 <xTaskRemoveFromEventList+0xb8>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	429a      	cmp	r2, r3
 800d486:	d903      	bls.n	800d490 <xTaskRemoveFromEventList+0x60>
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48c:	4a16      	ldr	r2, [pc, #88]	; (800d4e8 <xTaskRemoveFromEventList+0xb8>)
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d494:	4613      	mov	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	4413      	add	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4a13      	ldr	r2, [pc, #76]	; (800d4ec <xTaskRemoveFromEventList+0xbc>)
 800d49e:	441a      	add	r2, r3
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	f7fe fa47 	bl	800b93a <vListInsertEnd>
 800d4ac:	e005      	b.n	800d4ba <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	3318      	adds	r3, #24
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	480e      	ldr	r0, [pc, #56]	; (800d4f0 <xTaskRemoveFromEventList+0xc0>)
 800d4b6:	f7fe fa40 	bl	800b93a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4be:	4b0d      	ldr	r3, [pc, #52]	; (800d4f4 <xTaskRemoveFromEventList+0xc4>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d905      	bls.n	800d4d4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4cc:	4b0a      	ldr	r3, [pc, #40]	; (800d4f8 <xTaskRemoveFromEventList+0xc8>)
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	e001      	b.n	800d4d8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4d8:	697b      	ldr	r3, [r7, #20]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	200021c8 	.word	0x200021c8
 800d4e8:	200021a8 	.word	0x200021a8
 800d4ec:	20001cd0 	.word	0x20001cd0
 800d4f0:	20002160 	.word	0x20002160
 800d4f4:	20001ccc 	.word	0x20001ccc
 800d4f8:	200021b4 	.word	0x200021b4

0800d4fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d504:	4b06      	ldr	r3, [pc, #24]	; (800d520 <vTaskInternalSetTimeOutState+0x24>)
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d50c:	4b05      	ldr	r3, [pc, #20]	; (800d524 <vTaskInternalSetTimeOutState+0x28>)
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	605a      	str	r2, [r3, #4]
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	200021b8 	.word	0x200021b8
 800d524:	200021a4 	.word	0x200021a4

0800d528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10c      	bne.n	800d552 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53c:	b672      	cpsid	i
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	b662      	cpsie	i
 800d54c:	613b      	str	r3, [r7, #16]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10c      	bne.n	800d572 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55c:	b672      	cpsid	i
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	b662      	cpsie	i
 800d56c:	60fb      	str	r3, [r7, #12]
}
 800d56e:	bf00      	nop
 800d570:	e7fe      	b.n	800d570 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d572:	f000 ff73 	bl	800e45c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d576:	4b1d      	ldr	r3, [pc, #116]	; (800d5ec <xTaskCheckForTimeOut+0xc4>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	69ba      	ldr	r2, [r7, #24]
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58e:	d102      	bne.n	800d596 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d590:	2300      	movs	r3, #0
 800d592:	61fb      	str	r3, [r7, #28]
 800d594:	e023      	b.n	800d5de <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <xTaskCheckForTimeOut+0xc8>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d007      	beq.n	800d5b2 <xTaskCheckForTimeOut+0x8a>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d302      	bcc.n	800d5b2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	61fb      	str	r3, [r7, #28]
 800d5b0:	e015      	b.n	800d5de <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d20b      	bcs.n	800d5d4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	1ad2      	subs	r2, r2, r3
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff ff97 	bl	800d4fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	61fb      	str	r3, [r7, #28]
 800d5d2:	e004      	b.n	800d5de <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5de:	f000 ff71 	bl	800e4c4 <vPortExitCritical>

	return xReturn;
 800d5e2:	69fb      	ldr	r3, [r7, #28]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3720      	adds	r7, #32
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	200021a4 	.word	0x200021a4
 800d5f0:	200021b8 	.word	0x200021b8

0800d5f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5f8:	4b03      	ldr	r3, [pc, #12]	; (800d608 <vTaskMissedYield+0x14>)
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	601a      	str	r2, [r3, #0]
}
 800d5fe:	bf00      	nop
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	200021b4 	.word	0x200021b4

0800d60c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d614:	f000 f852 	bl	800d6bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d618:	4b06      	ldr	r3, [pc, #24]	; (800d634 <prvIdleTask+0x28>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d9f9      	bls.n	800d614 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <prvIdleTask+0x2c>)
 800d622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d626:	601a      	str	r2, [r3, #0]
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d630:	e7f0      	b.n	800d614 <prvIdleTask+0x8>
 800d632:	bf00      	nop
 800d634:	20001cd0 	.word	0x20001cd0
 800d638:	e000ed04 	.word	0xe000ed04

0800d63c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d642:	2300      	movs	r3, #0
 800d644:	607b      	str	r3, [r7, #4]
 800d646:	e00c      	b.n	800d662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4a12      	ldr	r2, [pc, #72]	; (800d69c <prvInitialiseTaskLists+0x60>)
 800d654:	4413      	add	r3, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe f942 	bl	800b8e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	3301      	adds	r3, #1
 800d660:	607b      	str	r3, [r7, #4]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b37      	cmp	r3, #55	; 0x37
 800d666:	d9ef      	bls.n	800d648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d668:	480d      	ldr	r0, [pc, #52]	; (800d6a0 <prvInitialiseTaskLists+0x64>)
 800d66a:	f7fe f939 	bl	800b8e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d66e:	480d      	ldr	r0, [pc, #52]	; (800d6a4 <prvInitialiseTaskLists+0x68>)
 800d670:	f7fe f936 	bl	800b8e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d674:	480c      	ldr	r0, [pc, #48]	; (800d6a8 <prvInitialiseTaskLists+0x6c>)
 800d676:	f7fe f933 	bl	800b8e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d67a:	480c      	ldr	r0, [pc, #48]	; (800d6ac <prvInitialiseTaskLists+0x70>)
 800d67c:	f7fe f930 	bl	800b8e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d680:	480b      	ldr	r0, [pc, #44]	; (800d6b0 <prvInitialiseTaskLists+0x74>)
 800d682:	f7fe f92d 	bl	800b8e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d686:	4b0b      	ldr	r3, [pc, #44]	; (800d6b4 <prvInitialiseTaskLists+0x78>)
 800d688:	4a05      	ldr	r2, [pc, #20]	; (800d6a0 <prvInitialiseTaskLists+0x64>)
 800d68a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d68c:	4b0a      	ldr	r3, [pc, #40]	; (800d6b8 <prvInitialiseTaskLists+0x7c>)
 800d68e:	4a05      	ldr	r2, [pc, #20]	; (800d6a4 <prvInitialiseTaskLists+0x68>)
 800d690:	601a      	str	r2, [r3, #0]
}
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	20001cd0 	.word	0x20001cd0
 800d6a0:	20002130 	.word	0x20002130
 800d6a4:	20002144 	.word	0x20002144
 800d6a8:	20002160 	.word	0x20002160
 800d6ac:	20002174 	.word	0x20002174
 800d6b0:	2000218c 	.word	0x2000218c
 800d6b4:	20002158 	.word	0x20002158
 800d6b8:	2000215c 	.word	0x2000215c

0800d6bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6c2:	e019      	b.n	800d6f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6c4:	f000 feca 	bl	800e45c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6c8:	4b10      	ldr	r3, [pc, #64]	; (800d70c <prvCheckTasksWaitingTermination+0x50>)
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe f98d 	bl	800b9f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6da:	4b0d      	ldr	r3, [pc, #52]	; (800d710 <prvCheckTasksWaitingTermination+0x54>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	4a0b      	ldr	r2, [pc, #44]	; (800d710 <prvCheckTasksWaitingTermination+0x54>)
 800d6e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6e4:	4b0b      	ldr	r3, [pc, #44]	; (800d714 <prvCheckTasksWaitingTermination+0x58>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	4a0a      	ldr	r2, [pc, #40]	; (800d714 <prvCheckTasksWaitingTermination+0x58>)
 800d6ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6ee:	f000 fee9 	bl	800e4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f810 	bl	800d718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6f8:	4b06      	ldr	r3, [pc, #24]	; (800d714 <prvCheckTasksWaitingTermination+0x58>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e1      	bne.n	800d6c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d700:	bf00      	nop
 800d702:	bf00      	nop
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20002174 	.word	0x20002174
 800d710:	200021a0 	.word	0x200021a0
 800d714:	20002188 	.word	0x20002188

0800d718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	3354      	adds	r3, #84	; 0x54
 800d724:	4618      	mov	r0, r3
 800d726:	f001 fff5 	bl	800f714 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d730:	2b00      	cmp	r3, #0
 800d732:	d108      	bne.n	800d746 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d738:	4618      	mov	r0, r3
 800d73a:	f001 f885 	bl	800e848 <vPortFree>
				vPortFree( pxTCB );
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f001 f882 	bl	800e848 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d744:	e01a      	b.n	800d77c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d103      	bne.n	800d758 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f001 f879 	bl	800e848 <vPortFree>
	}
 800d756:	e011      	b.n	800d77c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d75e:	2b02      	cmp	r3, #2
 800d760:	d00c      	beq.n	800d77c <prvDeleteTCB+0x64>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	b672      	cpsid	i
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	b662      	cpsie	i
 800d776:	60fb      	str	r3, [r7, #12]
}
 800d778:	bf00      	nop
 800d77a:	e7fe      	b.n	800d77a <prvDeleteTCB+0x62>
	}
 800d77c:	bf00      	nop
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d78a:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <prvResetNextTaskUnblockTime+0x38>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d104      	bne.n	800d79e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d794:	4b0a      	ldr	r3, [pc, #40]	; (800d7c0 <prvResetNextTaskUnblockTime+0x3c>)
 800d796:	f04f 32ff 	mov.w	r2, #4294967295
 800d79a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d79c:	e008      	b.n	800d7b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d79e:	4b07      	ldr	r3, [pc, #28]	; (800d7bc <prvResetNextTaskUnblockTime+0x38>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	4a04      	ldr	r2, [pc, #16]	; (800d7c0 <prvResetNextTaskUnblockTime+0x3c>)
 800d7ae:	6013      	str	r3, [r2, #0]
}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	20002158 	.word	0x20002158
 800d7c0:	200021c0 	.word	0x200021c0

0800d7c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7ca:	4b0b      	ldr	r3, [pc, #44]	; (800d7f8 <xTaskGetSchedulerState+0x34>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	607b      	str	r3, [r7, #4]
 800d7d6:	e008      	b.n	800d7ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7d8:	4b08      	ldr	r3, [pc, #32]	; (800d7fc <xTaskGetSchedulerState+0x38>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	607b      	str	r3, [r7, #4]
 800d7e4:	e001      	b.n	800d7ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7ea:	687b      	ldr	r3, [r7, #4]
	}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	370c      	adds	r7, #12
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	200021ac 	.word	0x200021ac
 800d7fc:	200021c8 	.word	0x200021c8

0800d800 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d80c:	2300      	movs	r3, #0
 800d80e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d051      	beq.n	800d8ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81a:	4b2a      	ldr	r3, [pc, #168]	; (800d8c4 <xTaskPriorityInherit+0xc4>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d820:	429a      	cmp	r2, r3
 800d822:	d241      	bcs.n	800d8a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	699b      	ldr	r3, [r3, #24]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	db06      	blt.n	800d83a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d82c:	4b25      	ldr	r3, [pc, #148]	; (800d8c4 <xTaskPriorityInherit+0xc4>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d832:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	6959      	ldr	r1, [r3, #20]
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d842:	4613      	mov	r3, r2
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	4413      	add	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4a1f      	ldr	r2, [pc, #124]	; (800d8c8 <xTaskPriorityInherit+0xc8>)
 800d84c:	4413      	add	r3, r2
 800d84e:	4299      	cmp	r1, r3
 800d850:	d122      	bne.n	800d898 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	3304      	adds	r3, #4
 800d856:	4618      	mov	r0, r3
 800d858:	f7fe f8cc 	bl	800b9f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d85c:	4b19      	ldr	r3, [pc, #100]	; (800d8c4 <xTaskPriorityInherit+0xc4>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d86a:	4b18      	ldr	r3, [pc, #96]	; (800d8cc <xTaskPriorityInherit+0xcc>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d903      	bls.n	800d87a <xTaskPriorityInherit+0x7a>
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d876:	4a15      	ldr	r2, [pc, #84]	; (800d8cc <xTaskPriorityInherit+0xcc>)
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87e:	4613      	mov	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4413      	add	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4a10      	ldr	r2, [pc, #64]	; (800d8c8 <xTaskPriorityInherit+0xc8>)
 800d888:	441a      	add	r2, r3
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	3304      	adds	r3, #4
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f7fe f852 	bl	800b93a <vListInsertEnd>
 800d896:	e004      	b.n	800d8a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d898:	4b0a      	ldr	r3, [pc, #40]	; (800d8c4 <xTaskPriorityInherit+0xc4>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	60fb      	str	r3, [r7, #12]
 800d8a6:	e008      	b.n	800d8ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d8ac:	4b05      	ldr	r3, [pc, #20]	; (800d8c4 <xTaskPriorityInherit+0xc4>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d201      	bcs.n	800d8ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
	}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	20001ccc 	.word	0x20001ccc
 800d8c8:	20001cd0 	.word	0x20001cd0
 800d8cc:	200021a8 	.word	0x200021a8

0800d8d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d05a      	beq.n	800d99c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8e6:	4b30      	ldr	r3, [pc, #192]	; (800d9a8 <xTaskPriorityDisinherit+0xd8>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d00c      	beq.n	800d90a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	b672      	cpsid	i
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	b662      	cpsie	i
 800d904:	60fb      	str	r3, [r7, #12]
}
 800d906:	bf00      	nop
 800d908:	e7fe      	b.n	800d908 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10c      	bne.n	800d92c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	b672      	cpsid	i
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	b662      	cpsie	i
 800d926:	60bb      	str	r3, [r7, #8]
}
 800d928:	bf00      	nop
 800d92a:	e7fe      	b.n	800d92a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d930:	1e5a      	subs	r2, r3, #1
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d93e:	429a      	cmp	r2, r3
 800d940:	d02c      	beq.n	800d99c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d946:	2b00      	cmp	r3, #0
 800d948:	d128      	bne.n	800d99c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	3304      	adds	r3, #4
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fe f850 	bl	800b9f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d960:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d96c:	4b0f      	ldr	r3, [pc, #60]	; (800d9ac <xTaskPriorityDisinherit+0xdc>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d903      	bls.n	800d97c <xTaskPriorityDisinherit+0xac>
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d978:	4a0c      	ldr	r2, [pc, #48]	; (800d9ac <xTaskPriorityDisinherit+0xdc>)
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4a09      	ldr	r2, [pc, #36]	; (800d9b0 <xTaskPriorityDisinherit+0xe0>)
 800d98a:	441a      	add	r2, r3
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	3304      	adds	r3, #4
 800d990:	4619      	mov	r1, r3
 800d992:	4610      	mov	r0, r2
 800d994:	f7fd ffd1 	bl	800b93a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d998:	2301      	movs	r3, #1
 800d99a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d99c:	697b      	ldr	r3, [r7, #20]
	}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3718      	adds	r7, #24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20001ccc 	.word	0x20001ccc
 800d9ac:	200021a8 	.word	0x200021a8
 800d9b0:	20001cd0 	.word	0x20001cd0

0800d9b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d06e      	beq.n	800daaa <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10c      	bne.n	800d9ee <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800d9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d8:	b672      	cpsid	i
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	b662      	cpsie	i
 800d9e8:	60fb      	str	r3, [r7, #12]
}
 800d9ea:	bf00      	nop
 800d9ec:	e7fe      	b.n	800d9ec <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9f2:	683a      	ldr	r2, [r7, #0]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d902      	bls.n	800d9fe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	61fb      	str	r3, [r7, #28]
 800d9fc:	e002      	b.n	800da04 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d04d      	beq.n	800daaa <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	429a      	cmp	r2, r3
 800da16:	d148      	bne.n	800daaa <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da18:	4b26      	ldr	r3, [pc, #152]	; (800dab4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	69ba      	ldr	r2, [r7, #24]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d10c      	bne.n	800da3c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	b672      	cpsid	i
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	b662      	cpsie	i
 800da36:	60bb      	str	r3, [r7, #8]
}
 800da38:	bf00      	nop
 800da3a:	e7fe      	b.n	800da3a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	69fa      	ldr	r2, [r7, #28]
 800da46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	db04      	blt.n	800da5a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da56:	69bb      	ldr	r3, [r7, #24]
 800da58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	6959      	ldr	r1, [r3, #20]
 800da5e:	693a      	ldr	r2, [r7, #16]
 800da60:	4613      	mov	r3, r2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	4413      	add	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4a13      	ldr	r2, [pc, #76]	; (800dab8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800da6a:	4413      	add	r3, r2
 800da6c:	4299      	cmp	r1, r3
 800da6e:	d11c      	bne.n	800daaa <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	3304      	adds	r3, #4
 800da74:	4618      	mov	r0, r3
 800da76:	f7fd ffbd 	bl	800b9f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7e:	4b0f      	ldr	r3, [pc, #60]	; (800dabc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	429a      	cmp	r2, r3
 800da84:	d903      	bls.n	800da8e <vTaskPriorityDisinheritAfterTimeout+0xda>
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8a:	4a0c      	ldr	r2, [pc, #48]	; (800dabc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da92:	4613      	mov	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4413      	add	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4a07      	ldr	r2, [pc, #28]	; (800dab8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800da9c:	441a      	add	r2, r3
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4619      	mov	r1, r3
 800daa4:	4610      	mov	r0, r2
 800daa6:	f7fd ff48 	bl	800b93a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800daaa:	bf00      	nop
 800daac:	3720      	adds	r7, #32
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	20001ccc 	.word	0x20001ccc
 800dab8:	20001cd0 	.word	0x20001cd0
 800dabc:	200021a8 	.word	0x200021a8

0800dac0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dac4:	4b07      	ldr	r3, [pc, #28]	; (800dae4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d004      	beq.n	800dad6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dacc:	4b05      	ldr	r3, [pc, #20]	; (800dae4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dad2:	3201      	adds	r2, #1
 800dad4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dad6:	4b03      	ldr	r3, [pc, #12]	; (800dae4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dad8:	681b      	ldr	r3, [r3, #0]
	}
 800dada:	4618      	mov	r0, r3
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	20001ccc 	.word	0x20001ccc

0800dae8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800daf2:	4b21      	ldr	r3, [pc, #132]	; (800db78 <prvAddCurrentTaskToDelayedList+0x90>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800daf8:	4b20      	ldr	r3, [pc, #128]	; (800db7c <prvAddCurrentTaskToDelayedList+0x94>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	3304      	adds	r3, #4
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fd ff78 	bl	800b9f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0a:	d10a      	bne.n	800db22 <prvAddCurrentTaskToDelayedList+0x3a>
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d007      	beq.n	800db22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db12:	4b1a      	ldr	r3, [pc, #104]	; (800db7c <prvAddCurrentTaskToDelayedList+0x94>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	3304      	adds	r3, #4
 800db18:	4619      	mov	r1, r3
 800db1a:	4819      	ldr	r0, [pc, #100]	; (800db80 <prvAddCurrentTaskToDelayedList+0x98>)
 800db1c:	f7fd ff0d 	bl	800b93a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db20:	e026      	b.n	800db70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4413      	add	r3, r2
 800db28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db2a:	4b14      	ldr	r3, [pc, #80]	; (800db7c <prvAddCurrentTaskToDelayedList+0x94>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68ba      	ldr	r2, [r7, #8]
 800db30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	429a      	cmp	r2, r3
 800db38:	d209      	bcs.n	800db4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db3a:	4b12      	ldr	r3, [pc, #72]	; (800db84 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <prvAddCurrentTaskToDelayedList+0x94>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	3304      	adds	r3, #4
 800db44:	4619      	mov	r1, r3
 800db46:	4610      	mov	r0, r2
 800db48:	f7fd ff1b 	bl	800b982 <vListInsert>
}
 800db4c:	e010      	b.n	800db70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db4e:	4b0e      	ldr	r3, [pc, #56]	; (800db88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <prvAddCurrentTaskToDelayedList+0x94>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3304      	adds	r3, #4
 800db58:	4619      	mov	r1, r3
 800db5a:	4610      	mov	r0, r2
 800db5c:	f7fd ff11 	bl	800b982 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db60:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68ba      	ldr	r2, [r7, #8]
 800db66:	429a      	cmp	r2, r3
 800db68:	d202      	bcs.n	800db70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db6a:	4a08      	ldr	r2, [pc, #32]	; (800db8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	6013      	str	r3, [r2, #0]
}
 800db70:	bf00      	nop
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	200021a4 	.word	0x200021a4
 800db7c:	20001ccc 	.word	0x20001ccc
 800db80:	2000218c 	.word	0x2000218c
 800db84:	2000215c 	.word	0x2000215c
 800db88:	20002158 	.word	0x20002158
 800db8c:	200021c0 	.word	0x200021c0

0800db90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b08a      	sub	sp, #40	; 0x28
 800db94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db96:	2300      	movs	r3, #0
 800db98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db9a:	f000 fb15 	bl	800e1c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db9e:	4b1d      	ldr	r3, [pc, #116]	; (800dc14 <xTimerCreateTimerTask+0x84>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d021      	beq.n	800dbea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dba6:	2300      	movs	r3, #0
 800dba8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dbae:	1d3a      	adds	r2, r7, #4
 800dbb0:	f107 0108 	add.w	r1, r7, #8
 800dbb4:	f107 030c 	add.w	r3, r7, #12
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fd fe77 	bl	800b8ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dbbe:	6879      	ldr	r1, [r7, #4]
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	9202      	str	r2, [sp, #8]
 800dbc6:	9301      	str	r3, [sp, #4]
 800dbc8:	2302      	movs	r3, #2
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	460a      	mov	r2, r1
 800dbd0:	4911      	ldr	r1, [pc, #68]	; (800dc18 <xTimerCreateTimerTask+0x88>)
 800dbd2:	4812      	ldr	r0, [pc, #72]	; (800dc1c <xTimerCreateTimerTask+0x8c>)
 800dbd4:	f7fe ff8e 	bl	800caf4 <xTaskCreateStatic>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	4a11      	ldr	r2, [pc, #68]	; (800dc20 <xTimerCreateTimerTask+0x90>)
 800dbdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbde:	4b10      	ldr	r3, [pc, #64]	; (800dc20 <xTimerCreateTimerTask+0x90>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10c      	bne.n	800dc0a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf4:	b672      	cpsid	i
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	b662      	cpsie	i
 800dc04:	613b      	str	r3, [r7, #16]
}
 800dc06:	bf00      	nop
 800dc08:	e7fe      	b.n	800dc08 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800dc0a:	697b      	ldr	r3, [r7, #20]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	200021fc 	.word	0x200021fc
 800dc18:	08011c18 	.word	0x08011c18
 800dc1c:	0800dd61 	.word	0x0800dd61
 800dc20:	20002200 	.word	0x20002200

0800dc24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08a      	sub	sp, #40	; 0x28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d10c      	bne.n	800dc56 <xTimerGenericCommand+0x32>
	__asm volatile
 800dc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc40:	b672      	cpsid	i
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	b662      	cpsie	i
 800dc50:	623b      	str	r3, [r7, #32]
}
 800dc52:	bf00      	nop
 800dc54:	e7fe      	b.n	800dc54 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc56:	4b1a      	ldr	r3, [pc, #104]	; (800dcc0 <xTimerGenericCommand+0x9c>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d02a      	beq.n	800dcb4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	2b05      	cmp	r3, #5
 800dc6e:	dc18      	bgt.n	800dca2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc70:	f7ff fda8 	bl	800d7c4 <xTaskGetSchedulerState>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d109      	bne.n	800dc8e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc7a:	4b11      	ldr	r3, [pc, #68]	; (800dcc0 <xTimerGenericCommand+0x9c>)
 800dc7c:	6818      	ldr	r0, [r3, #0]
 800dc7e:	f107 0110 	add.w	r1, r7, #16
 800dc82:	2300      	movs	r3, #0
 800dc84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc86:	f7fe f8a3 	bl	800bdd0 <xQueueGenericSend>
 800dc8a:	6278      	str	r0, [r7, #36]	; 0x24
 800dc8c:	e012      	b.n	800dcb4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc8e:	4b0c      	ldr	r3, [pc, #48]	; (800dcc0 <xTimerGenericCommand+0x9c>)
 800dc90:	6818      	ldr	r0, [r3, #0]
 800dc92:	f107 0110 	add.w	r1, r7, #16
 800dc96:	2300      	movs	r3, #0
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f7fe f899 	bl	800bdd0 <xQueueGenericSend>
 800dc9e:	6278      	str	r0, [r7, #36]	; 0x24
 800dca0:	e008      	b.n	800dcb4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dca2:	4b07      	ldr	r3, [pc, #28]	; (800dcc0 <xTimerGenericCommand+0x9c>)
 800dca4:	6818      	ldr	r0, [r3, #0]
 800dca6:	f107 0110 	add.w	r1, r7, #16
 800dcaa:	2300      	movs	r3, #0
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	f7fe f995 	bl	800bfdc <xQueueGenericSendFromISR>
 800dcb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3728      	adds	r7, #40	; 0x28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	200021fc 	.word	0x200021fc

0800dcc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b088      	sub	sp, #32
 800dcc8:	af02      	add	r7, sp, #8
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcce:	4b23      	ldr	r3, [pc, #140]	; (800dd5c <prvProcessExpiredTimer+0x98>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fd fe89 	bl	800b9f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dce8:	f003 0304 	and.w	r3, r3, #4
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d024      	beq.n	800dd3a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	699a      	ldr	r2, [r3, #24]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	18d1      	adds	r1, r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	6978      	ldr	r0, [r7, #20]
 800dcfe:	f000 f8d3 	bl	800dea8 <prvInsertTimerInActiveList>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d021      	beq.n	800dd4c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd08:	2300      	movs	r3, #0
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	2100      	movs	r1, #0
 800dd12:	6978      	ldr	r0, [r7, #20]
 800dd14:	f7ff ff86 	bl	800dc24 <xTimerGenericCommand>
 800dd18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d115      	bne.n	800dd4c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd24:	b672      	cpsid	i
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	b662      	cpsie	i
 800dd34:	60fb      	str	r3, [r7, #12]
}
 800dd36:	bf00      	nop
 800dd38:	e7fe      	b.n	800dd38 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd40:	f023 0301 	bic.w	r3, r3, #1
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	6a1b      	ldr	r3, [r3, #32]
 800dd50:	6978      	ldr	r0, [r7, #20]
 800dd52:	4798      	blx	r3
}
 800dd54:	bf00      	nop
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	200021f4 	.word	0x200021f4

0800dd60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd68:	f107 0308 	add.w	r3, r7, #8
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 f857 	bl	800de20 <prvGetNextExpireTime>
 800dd72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	4619      	mov	r1, r3
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f000 f803 	bl	800dd84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd7e:	f000 f8d5 	bl	800df2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd82:	e7f1      	b.n	800dd68 <prvTimerTask+0x8>

0800dd84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd8e:	f7ff f91b 	bl	800cfc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd92:	f107 0308 	add.w	r3, r7, #8
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 f866 	bl	800de68 <prvSampleTimeNow>
 800dd9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d130      	bne.n	800de06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10a      	bne.n	800ddc0 <prvProcessTimerOrBlockTask+0x3c>
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d806      	bhi.n	800ddc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ddb2:	f7ff f917 	bl	800cfe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ddb6:	68f9      	ldr	r1, [r7, #12]
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff ff83 	bl	800dcc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ddbe:	e024      	b.n	800de0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d008      	beq.n	800ddd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ddc6:	4b13      	ldr	r3, [pc, #76]	; (800de14 <prvProcessTimerOrBlockTask+0x90>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <prvProcessTimerOrBlockTask+0x50>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e000      	b.n	800ddd6 <prvProcessTimerOrBlockTask+0x52>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ddd8:	4b0f      	ldr	r3, [pc, #60]	; (800de18 <prvProcessTimerOrBlockTask+0x94>)
 800ddda:	6818      	ldr	r0, [r3, #0]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	4619      	mov	r1, r3
 800dde6:	f7fe fe51 	bl	800ca8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddea:	f7ff f8fb 	bl	800cfe4 <xTaskResumeAll>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d10a      	bne.n	800de0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ddf4:	4b09      	ldr	r3, [pc, #36]	; (800de1c <prvProcessTimerOrBlockTask+0x98>)
 800ddf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	f3bf 8f6f 	isb	sy
}
 800de04:	e001      	b.n	800de0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800de06:	f7ff f8ed 	bl	800cfe4 <xTaskResumeAll>
}
 800de0a:	bf00      	nop
 800de0c:	3710      	adds	r7, #16
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	200021f8 	.word	0x200021f8
 800de18:	200021fc 	.word	0x200021fc
 800de1c:	e000ed04 	.word	0xe000ed04

0800de20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de28:	4b0e      	ldr	r3, [pc, #56]	; (800de64 <prvGetNextExpireTime+0x44>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d101      	bne.n	800de36 <prvGetNextExpireTime+0x16>
 800de32:	2201      	movs	r2, #1
 800de34:	e000      	b.n	800de38 <prvGetNextExpireTime+0x18>
 800de36:	2200      	movs	r2, #0
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d105      	bne.n	800de50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de44:	4b07      	ldr	r3, [pc, #28]	; (800de64 <prvGetNextExpireTime+0x44>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	60fb      	str	r3, [r7, #12]
 800de4e:	e001      	b.n	800de54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de50:	2300      	movs	r3, #0
 800de52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de54:	68fb      	ldr	r3, [r7, #12]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3714      	adds	r7, #20
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	200021f4 	.word	0x200021f4

0800de68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de70:	f7ff f958 	bl	800d124 <xTaskGetTickCount>
 800de74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de76:	4b0b      	ldr	r3, [pc, #44]	; (800dea4 <prvSampleTimeNow+0x3c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d205      	bcs.n	800de8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de80:	f000 f93c 	bl	800e0fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2201      	movs	r2, #1
 800de88:	601a      	str	r2, [r3, #0]
 800de8a:	e002      	b.n	800de92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de92:	4a04      	ldr	r2, [pc, #16]	; (800dea4 <prvSampleTimeNow+0x3c>)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de98:	68fb      	ldr	r3, [r7, #12]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	20002204 	.word	0x20002204

0800dea8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]
 800deb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800deb6:	2300      	movs	r3, #0
 800deb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	68fa      	ldr	r2, [r7, #12]
 800dec4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	429a      	cmp	r2, r3
 800decc:	d812      	bhi.n	800def4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	1ad2      	subs	r2, r2, r3
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	699b      	ldr	r3, [r3, #24]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d302      	bcc.n	800dee2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dedc:	2301      	movs	r3, #1
 800dede:	617b      	str	r3, [r7, #20]
 800dee0:	e01b      	b.n	800df1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dee2:	4b10      	ldr	r3, [pc, #64]	; (800df24 <prvInsertTimerInActiveList+0x7c>)
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	3304      	adds	r3, #4
 800deea:	4619      	mov	r1, r3
 800deec:	4610      	mov	r0, r2
 800deee:	f7fd fd48 	bl	800b982 <vListInsert>
 800def2:	e012      	b.n	800df1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	429a      	cmp	r2, r3
 800defa:	d206      	bcs.n	800df0a <prvInsertTimerInActiveList+0x62>
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	429a      	cmp	r2, r3
 800df02:	d302      	bcc.n	800df0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800df04:	2301      	movs	r3, #1
 800df06:	617b      	str	r3, [r7, #20]
 800df08:	e007      	b.n	800df1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df0a:	4b07      	ldr	r3, [pc, #28]	; (800df28 <prvInsertTimerInActiveList+0x80>)
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3304      	adds	r3, #4
 800df12:	4619      	mov	r1, r3
 800df14:	4610      	mov	r0, r2
 800df16:	f7fd fd34 	bl	800b982 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df1a:	697b      	ldr	r3, [r7, #20]
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3718      	adds	r7, #24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	200021f8 	.word	0x200021f8
 800df28:	200021f4 	.word	0x200021f4

0800df2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b08e      	sub	sp, #56	; 0x38
 800df30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df32:	e0d0      	b.n	800e0d6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	da1a      	bge.n	800df70 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df3a:	1d3b      	adds	r3, r7, #4
 800df3c:	3304      	adds	r3, #4
 800df3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10c      	bne.n	800df60 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4a:	b672      	cpsid	i
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	b662      	cpsie	i
 800df5a:	61fb      	str	r3, [r7, #28]
}
 800df5c:	bf00      	nop
 800df5e:	e7fe      	b.n	800df5e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df66:	6850      	ldr	r0, [r2, #4]
 800df68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df6a:	6892      	ldr	r2, [r2, #8]
 800df6c:	4611      	mov	r1, r2
 800df6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	f2c0 80ae 	blt.w	800e0d4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7e:	695b      	ldr	r3, [r3, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d004      	beq.n	800df8e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	3304      	adds	r3, #4
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fd fd33 	bl	800b9f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df8e:	463b      	mov	r3, r7
 800df90:	4618      	mov	r0, r3
 800df92:	f7ff ff69 	bl	800de68 <prvSampleTimeNow>
 800df96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b09      	cmp	r3, #9
 800df9c:	f200 809b 	bhi.w	800e0d6 <prvProcessReceivedCommands+0x1aa>
 800dfa0:	a201      	add	r2, pc, #4	; (adr r2, 800dfa8 <prvProcessReceivedCommands+0x7c>)
 800dfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa6:	bf00      	nop
 800dfa8:	0800dfd1 	.word	0x0800dfd1
 800dfac:	0800dfd1 	.word	0x0800dfd1
 800dfb0:	0800dfd1 	.word	0x0800dfd1
 800dfb4:	0800e049 	.word	0x0800e049
 800dfb8:	0800e05d 	.word	0x0800e05d
 800dfbc:	0800e0ab 	.word	0x0800e0ab
 800dfc0:	0800dfd1 	.word	0x0800dfd1
 800dfc4:	0800dfd1 	.word	0x0800dfd1
 800dfc8:	0800e049 	.word	0x0800e049
 800dfcc:	0800e05d 	.word	0x0800e05d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfd6:	f043 0301 	orr.w	r3, r3, #1
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe6:	699b      	ldr	r3, [r3, #24]
 800dfe8:	18d1      	adds	r1, r2, r3
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dff0:	f7ff ff5a 	bl	800dea8 <prvInsertTimerInActiveList>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d06d      	beq.n	800e0d6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffc:	6a1b      	ldr	r3, [r3, #32]
 800dffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e008:	f003 0304 	and.w	r3, r3, #4
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d062      	beq.n	800e0d6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e014:	699b      	ldr	r3, [r3, #24]
 800e016:	441a      	add	r2, r3
 800e018:	2300      	movs	r3, #0
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	2300      	movs	r3, #0
 800e01e:	2100      	movs	r1, #0
 800e020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e022:	f7ff fdff 	bl	800dc24 <xTimerGenericCommand>
 800e026:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d153      	bne.n	800e0d6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e032:	b672      	cpsid	i
 800e034:	f383 8811 	msr	BASEPRI, r3
 800e038:	f3bf 8f6f 	isb	sy
 800e03c:	f3bf 8f4f 	dsb	sy
 800e040:	b662      	cpsie	i
 800e042:	61bb      	str	r3, [r7, #24]
}
 800e044:	bf00      	nop
 800e046:	e7fe      	b.n	800e046 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e04e:	f023 0301 	bic.w	r3, r3, #1
 800e052:	b2da      	uxtb	r2, r3
 800e054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e05a:	e03c      	b.n	800e0d6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e062:	f043 0301 	orr.w	r3, r3, #1
 800e066:	b2da      	uxtb	r2, r3
 800e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e072:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e076:	699b      	ldr	r3, [r3, #24]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10c      	bne.n	800e096 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	b672      	cpsid	i
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	b662      	cpsie	i
 800e090:	617b      	str	r3, [r7, #20]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e098:	699a      	ldr	r2, [r3, #24]
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	18d1      	adds	r1, r2, r3
 800e09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0a4:	f7ff ff00 	bl	800dea8 <prvInsertTimerInActiveList>
					break;
 800e0a8:	e015      	b.n	800e0d6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0b0:	f003 0302 	and.w	r3, r3, #2
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d103      	bne.n	800e0c0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800e0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0ba:	f000 fbc5 	bl	800e848 <vPortFree>
 800e0be:	e00a      	b.n	800e0d6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0c6:	f023 0301 	bic.w	r3, r3, #1
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e0d2:	e000      	b.n	800e0d6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e0d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0d6:	4b08      	ldr	r3, [pc, #32]	; (800e0f8 <prvProcessReceivedCommands+0x1cc>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	1d39      	adds	r1, r7, #4
 800e0dc:	2200      	movs	r2, #0
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fe f8b2 	bl	800c248 <xQueueReceive>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f47f af24 	bne.w	800df34 <prvProcessReceivedCommands+0x8>
	}
}
 800e0ec:	bf00      	nop
 800e0ee:	bf00      	nop
 800e0f0:	3730      	adds	r7, #48	; 0x30
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	200021fc 	.word	0x200021fc

0800e0fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e102:	e04a      	b.n	800e19a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e104:	4b2e      	ldr	r3, [pc, #184]	; (800e1c0 <prvSwitchTimerLists+0xc4>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e10e:	4b2c      	ldr	r3, [pc, #176]	; (800e1c0 <prvSwitchTimerLists+0xc4>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	3304      	adds	r3, #4
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fd fc69 	bl	800b9f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6a1b      	ldr	r3, [r3, #32]
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e130:	f003 0304 	and.w	r3, r3, #4
 800e134:	2b00      	cmp	r3, #0
 800e136:	d030      	beq.n	800e19a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	699b      	ldr	r3, [r3, #24]
 800e13c:	693a      	ldr	r2, [r7, #16]
 800e13e:	4413      	add	r3, r2
 800e140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	429a      	cmp	r2, r3
 800e148:	d90e      	bls.n	800e168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e156:	4b1a      	ldr	r3, [pc, #104]	; (800e1c0 <prvSwitchTimerLists+0xc4>)
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	3304      	adds	r3, #4
 800e15e:	4619      	mov	r1, r3
 800e160:	4610      	mov	r0, r2
 800e162:	f7fd fc0e 	bl	800b982 <vListInsert>
 800e166:	e018      	b.n	800e19a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e168:	2300      	movs	r3, #0
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	2300      	movs	r3, #0
 800e16e:	693a      	ldr	r2, [r7, #16]
 800e170:	2100      	movs	r1, #0
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f7ff fd56 	bl	800dc24 <xTimerGenericCommand>
 800e178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10c      	bne.n	800e19a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	b672      	cpsid	i
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	b662      	cpsie	i
 800e194:	603b      	str	r3, [r7, #0]
}
 800e196:	bf00      	nop
 800e198:	e7fe      	b.n	800e198 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e19a:	4b09      	ldr	r3, [pc, #36]	; (800e1c0 <prvSwitchTimerLists+0xc4>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d1af      	bne.n	800e104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e1a4:	4b06      	ldr	r3, [pc, #24]	; (800e1c0 <prvSwitchTimerLists+0xc4>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e1aa:	4b06      	ldr	r3, [pc, #24]	; (800e1c4 <prvSwitchTimerLists+0xc8>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a04      	ldr	r2, [pc, #16]	; (800e1c0 <prvSwitchTimerLists+0xc4>)
 800e1b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e1b2:	4a04      	ldr	r2, [pc, #16]	; (800e1c4 <prvSwitchTimerLists+0xc8>)
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	6013      	str	r3, [r2, #0]
}
 800e1b8:	bf00      	nop
 800e1ba:	3718      	adds	r7, #24
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	200021f4 	.word	0x200021f4
 800e1c4:	200021f8 	.word	0x200021f8

0800e1c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e1ce:	f000 f945 	bl	800e45c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e1d2:	4b15      	ldr	r3, [pc, #84]	; (800e228 <prvCheckForValidListAndQueue+0x60>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d120      	bne.n	800e21c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e1da:	4814      	ldr	r0, [pc, #80]	; (800e22c <prvCheckForValidListAndQueue+0x64>)
 800e1dc:	f7fd fb80 	bl	800b8e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e1e0:	4813      	ldr	r0, [pc, #76]	; (800e230 <prvCheckForValidListAndQueue+0x68>)
 800e1e2:	f7fd fb7d 	bl	800b8e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1e6:	4b13      	ldr	r3, [pc, #76]	; (800e234 <prvCheckForValidListAndQueue+0x6c>)
 800e1e8:	4a10      	ldr	r2, [pc, #64]	; (800e22c <prvCheckForValidListAndQueue+0x64>)
 800e1ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1ec:	4b12      	ldr	r3, [pc, #72]	; (800e238 <prvCheckForValidListAndQueue+0x70>)
 800e1ee:	4a10      	ldr	r2, [pc, #64]	; (800e230 <prvCheckForValidListAndQueue+0x68>)
 800e1f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	4b11      	ldr	r3, [pc, #68]	; (800e23c <prvCheckForValidListAndQueue+0x74>)
 800e1f8:	4a11      	ldr	r2, [pc, #68]	; (800e240 <prvCheckForValidListAndQueue+0x78>)
 800e1fa:	2110      	movs	r1, #16
 800e1fc:	200a      	movs	r0, #10
 800e1fe:	f7fd fc8d 	bl	800bb1c <xQueueGenericCreateStatic>
 800e202:	4603      	mov	r3, r0
 800e204:	4a08      	ldr	r2, [pc, #32]	; (800e228 <prvCheckForValidListAndQueue+0x60>)
 800e206:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e208:	4b07      	ldr	r3, [pc, #28]	; (800e228 <prvCheckForValidListAndQueue+0x60>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d005      	beq.n	800e21c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e210:	4b05      	ldr	r3, [pc, #20]	; (800e228 <prvCheckForValidListAndQueue+0x60>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	490b      	ldr	r1, [pc, #44]	; (800e244 <prvCheckForValidListAndQueue+0x7c>)
 800e216:	4618      	mov	r0, r3
 800e218:	f7fe fbe4 	bl	800c9e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e21c:	f000 f952 	bl	800e4c4 <vPortExitCritical>
}
 800e220:	bf00      	nop
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	200021fc 	.word	0x200021fc
 800e22c:	200021cc 	.word	0x200021cc
 800e230:	200021e0 	.word	0x200021e0
 800e234:	200021f4 	.word	0x200021f4
 800e238:	200021f8 	.word	0x200021f8
 800e23c:	200022a8 	.word	0x200022a8
 800e240:	20002208 	.word	0x20002208
 800e244:	08011c20 	.word	0x08011c20

0800e248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e248:	b480      	push	{r7}
 800e24a:	b085      	sub	sp, #20
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3b04      	subs	r3, #4
 800e258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	3b04      	subs	r3, #4
 800e266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	f023 0201 	bic.w	r2, r3, #1
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	3b04      	subs	r3, #4
 800e276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e278:	4a0c      	ldr	r2, [pc, #48]	; (800e2ac <pxPortInitialiseStack+0x64>)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	3b14      	subs	r3, #20
 800e282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	3b04      	subs	r3, #4
 800e28e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f06f 0202 	mvn.w	r2, #2
 800e296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	3b20      	subs	r3, #32
 800e29c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e29e:	68fb      	ldr	r3, [r7, #12]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3714      	adds	r7, #20
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr
 800e2ac:	0800e2b1 	.word	0x0800e2b1

0800e2b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2ba:	4b14      	ldr	r3, [pc, #80]	; (800e30c <prvTaskExitError+0x5c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c2:	d00c      	beq.n	800e2de <prvTaskExitError+0x2e>
	__asm volatile
 800e2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c8:	b672      	cpsid	i
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	b662      	cpsie	i
 800e2d8:	60fb      	str	r3, [r7, #12]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <prvTaskExitError+0x2c>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e2:	b672      	cpsid	i
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	b662      	cpsie	i
 800e2f2:	60bb      	str	r3, [r7, #8]
}
 800e2f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e2f6:	bf00      	nop
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d0fc      	beq.n	800e2f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e2fe:	bf00      	nop
 800e300:	bf00      	nop
 800e302:	3714      	adds	r7, #20
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	20000064 	.word	0x20000064

0800e310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e310:	4b07      	ldr	r3, [pc, #28]	; (800e330 <pxCurrentTCBConst2>)
 800e312:	6819      	ldr	r1, [r3, #0]
 800e314:	6808      	ldr	r0, [r1, #0]
 800e316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31a:	f380 8809 	msr	PSP, r0
 800e31e:	f3bf 8f6f 	isb	sy
 800e322:	f04f 0000 	mov.w	r0, #0
 800e326:	f380 8811 	msr	BASEPRI, r0
 800e32a:	4770      	bx	lr
 800e32c:	f3af 8000 	nop.w

0800e330 <pxCurrentTCBConst2>:
 800e330:	20001ccc 	.word	0x20001ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e334:	bf00      	nop
 800e336:	bf00      	nop

0800e338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e338:	4808      	ldr	r0, [pc, #32]	; (800e35c <prvPortStartFirstTask+0x24>)
 800e33a:	6800      	ldr	r0, [r0, #0]
 800e33c:	6800      	ldr	r0, [r0, #0]
 800e33e:	f380 8808 	msr	MSP, r0
 800e342:	f04f 0000 	mov.w	r0, #0
 800e346:	f380 8814 	msr	CONTROL, r0
 800e34a:	b662      	cpsie	i
 800e34c:	b661      	cpsie	f
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	df00      	svc	0
 800e358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e35a:	bf00      	nop
 800e35c:	e000ed08 	.word	0xe000ed08

0800e360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e366:	4b37      	ldr	r3, [pc, #220]	; (800e444 <xPortStartScheduler+0xe4>)
 800e368:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	22ff      	movs	r2, #255	; 0xff
 800e376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	4b2f      	ldr	r3, [pc, #188]	; (800e448 <xPortStartScheduler+0xe8>)
 800e38c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e38e:	4b2f      	ldr	r3, [pc, #188]	; (800e44c <xPortStartScheduler+0xec>)
 800e390:	2207      	movs	r2, #7
 800e392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e394:	e009      	b.n	800e3aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e396:	4b2d      	ldr	r3, [pc, #180]	; (800e44c <xPortStartScheduler+0xec>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3b01      	subs	r3, #1
 800e39c:	4a2b      	ldr	r2, [pc, #172]	; (800e44c <xPortStartScheduler+0xec>)
 800e39e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	005b      	lsls	r3, r3, #1
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e3aa:	78fb      	ldrb	r3, [r7, #3]
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b2:	2b80      	cmp	r3, #128	; 0x80
 800e3b4:	d0ef      	beq.n	800e396 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e3b6:	4b25      	ldr	r3, [pc, #148]	; (800e44c <xPortStartScheduler+0xec>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f1c3 0307 	rsb	r3, r3, #7
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d00c      	beq.n	800e3dc <xPortStartScheduler+0x7c>
	__asm volatile
 800e3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c6:	b672      	cpsid	i
 800e3c8:	f383 8811 	msr	BASEPRI, r3
 800e3cc:	f3bf 8f6f 	isb	sy
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	b662      	cpsie	i
 800e3d6:	60bb      	str	r3, [r7, #8]
}
 800e3d8:	bf00      	nop
 800e3da:	e7fe      	b.n	800e3da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3dc:	4b1b      	ldr	r3, [pc, #108]	; (800e44c <xPortStartScheduler+0xec>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	021b      	lsls	r3, r3, #8
 800e3e2:	4a1a      	ldr	r2, [pc, #104]	; (800e44c <xPortStartScheduler+0xec>)
 800e3e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3e6:	4b19      	ldr	r3, [pc, #100]	; (800e44c <xPortStartScheduler+0xec>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3ee:	4a17      	ldr	r2, [pc, #92]	; (800e44c <xPortStartScheduler+0xec>)
 800e3f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e3fa:	4b15      	ldr	r3, [pc, #84]	; (800e450 <xPortStartScheduler+0xf0>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a14      	ldr	r2, [pc, #80]	; (800e450 <xPortStartScheduler+0xf0>)
 800e400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e404:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e406:	4b12      	ldr	r3, [pc, #72]	; (800e450 <xPortStartScheduler+0xf0>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a11      	ldr	r2, [pc, #68]	; (800e450 <xPortStartScheduler+0xf0>)
 800e40c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e410:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e412:	f000 f8dd 	bl	800e5d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e416:	4b0f      	ldr	r3, [pc, #60]	; (800e454 <xPortStartScheduler+0xf4>)
 800e418:	2200      	movs	r2, #0
 800e41a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e41c:	f000 f8fc 	bl	800e618 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e420:	4b0d      	ldr	r3, [pc, #52]	; (800e458 <xPortStartScheduler+0xf8>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a0c      	ldr	r2, [pc, #48]	; (800e458 <xPortStartScheduler+0xf8>)
 800e426:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e42a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e42c:	f7ff ff84 	bl	800e338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e430:	f7fe ff44 	bl	800d2bc <vTaskSwitchContext>
	prvTaskExitError();
 800e434:	f7ff ff3c 	bl	800e2b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3710      	adds	r7, #16
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	e000e400 	.word	0xe000e400
 800e448:	200022f8 	.word	0x200022f8
 800e44c:	200022fc 	.word	0x200022fc
 800e450:	e000ed20 	.word	0xe000ed20
 800e454:	20000064 	.word	0x20000064
 800e458:	e000ef34 	.word	0xe000ef34

0800e45c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
	__asm volatile
 800e462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e466:	b672      	cpsid	i
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	b662      	cpsie	i
 800e476:	607b      	str	r3, [r7, #4]
}
 800e478:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e47a:	4b10      	ldr	r3, [pc, #64]	; (800e4bc <vPortEnterCritical+0x60>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3301      	adds	r3, #1
 800e480:	4a0e      	ldr	r2, [pc, #56]	; (800e4bc <vPortEnterCritical+0x60>)
 800e482:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e484:	4b0d      	ldr	r3, [pc, #52]	; (800e4bc <vPortEnterCritical+0x60>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d111      	bne.n	800e4b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e48c:	4b0c      	ldr	r3, [pc, #48]	; (800e4c0 <vPortEnterCritical+0x64>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00c      	beq.n	800e4b0 <vPortEnterCritical+0x54>
	__asm volatile
 800e496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49a:	b672      	cpsid	i
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	b662      	cpsie	i
 800e4aa:	603b      	str	r3, [r7, #0]
}
 800e4ac:	bf00      	nop
 800e4ae:	e7fe      	b.n	800e4ae <vPortEnterCritical+0x52>
	}
}
 800e4b0:	bf00      	nop
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	20000064 	.word	0x20000064
 800e4c0:	e000ed04 	.word	0xe000ed04

0800e4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4ca:	4b13      	ldr	r3, [pc, #76]	; (800e518 <vPortExitCritical+0x54>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10c      	bne.n	800e4ec <vPortExitCritical+0x28>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d6:	b672      	cpsid	i
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	b662      	cpsie	i
 800e4e6:	607b      	str	r3, [r7, #4]
}
 800e4e8:	bf00      	nop
 800e4ea:	e7fe      	b.n	800e4ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e4ec:	4b0a      	ldr	r3, [pc, #40]	; (800e518 <vPortExitCritical+0x54>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	4a09      	ldr	r2, [pc, #36]	; (800e518 <vPortExitCritical+0x54>)
 800e4f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e4f6:	4b08      	ldr	r3, [pc, #32]	; (800e518 <vPortExitCritical+0x54>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d105      	bne.n	800e50a <vPortExitCritical+0x46>
 800e4fe:	2300      	movs	r3, #0
 800e500:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	f383 8811 	msr	BASEPRI, r3
}
 800e508:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e50a:	bf00      	nop
 800e50c:	370c      	adds	r7, #12
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	20000064 	.word	0x20000064
 800e51c:	00000000 	.word	0x00000000

0800e520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e520:	f3ef 8009 	mrs	r0, PSP
 800e524:	f3bf 8f6f 	isb	sy
 800e528:	4b15      	ldr	r3, [pc, #84]	; (800e580 <pxCurrentTCBConst>)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	f01e 0f10 	tst.w	lr, #16
 800e530:	bf08      	it	eq
 800e532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53a:	6010      	str	r0, [r2, #0]
 800e53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e540:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e544:	b672      	cpsid	i
 800e546:	f380 8811 	msr	BASEPRI, r0
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	f3bf 8f6f 	isb	sy
 800e552:	b662      	cpsie	i
 800e554:	f7fe feb2 	bl	800d2bc <vTaskSwitchContext>
 800e558:	f04f 0000 	mov.w	r0, #0
 800e55c:	f380 8811 	msr	BASEPRI, r0
 800e560:	bc09      	pop	{r0, r3}
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	6808      	ldr	r0, [r1, #0]
 800e566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56a:	f01e 0f10 	tst.w	lr, #16
 800e56e:	bf08      	it	eq
 800e570:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e574:	f380 8809 	msr	PSP, r0
 800e578:	f3bf 8f6f 	isb	sy
 800e57c:	4770      	bx	lr
 800e57e:	bf00      	nop

0800e580 <pxCurrentTCBConst>:
 800e580:	20001ccc 	.word	0x20001ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e584:	bf00      	nop
 800e586:	bf00      	nop

0800e588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
	__asm volatile
 800e58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e592:	b672      	cpsid	i
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	b662      	cpsie	i
 800e5a2:	607b      	str	r3, [r7, #4]
}
 800e5a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e5a6:	f7fe fdcd 	bl	800d144 <xTaskIncrementTick>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d003      	beq.n	800e5b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5b0:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <SysTick_Handler+0x44>)
 800e5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b6:	601a      	str	r2, [r3, #0]
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	f383 8811 	msr	BASEPRI, r3
}
 800e5c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5c4:	bf00      	nop
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	e000ed04 	.word	0xe000ed04

0800e5d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5d4:	4b0b      	ldr	r3, [pc, #44]	; (800e604 <vPortSetupTimerInterrupt+0x34>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5da:	4b0b      	ldr	r3, [pc, #44]	; (800e608 <vPortSetupTimerInterrupt+0x38>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5e0:	4b0a      	ldr	r3, [pc, #40]	; (800e60c <vPortSetupTimerInterrupt+0x3c>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a0a      	ldr	r2, [pc, #40]	; (800e610 <vPortSetupTimerInterrupt+0x40>)
 800e5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ea:	099b      	lsrs	r3, r3, #6
 800e5ec:	4a09      	ldr	r2, [pc, #36]	; (800e614 <vPortSetupTimerInterrupt+0x44>)
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5f2:	4b04      	ldr	r3, [pc, #16]	; (800e604 <vPortSetupTimerInterrupt+0x34>)
 800e5f4:	2207      	movs	r2, #7
 800e5f6:	601a      	str	r2, [r3, #0]
}
 800e5f8:	bf00      	nop
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	e000e010 	.word	0xe000e010
 800e608:	e000e018 	.word	0xe000e018
 800e60c:	20000058 	.word	0x20000058
 800e610:	10624dd3 	.word	0x10624dd3
 800e614:	e000e014 	.word	0xe000e014

0800e618 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e618:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e628 <vPortEnableVFP+0x10>
 800e61c:	6801      	ldr	r1, [r0, #0]
 800e61e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e622:	6001      	str	r1, [r0, #0]
 800e624:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e626:	bf00      	nop
 800e628:	e000ed88 	.word	0xe000ed88

0800e62c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e632:	f3ef 8305 	mrs	r3, IPSR
 800e636:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b0f      	cmp	r3, #15
 800e63c:	d916      	bls.n	800e66c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e63e:	4a19      	ldr	r2, [pc, #100]	; (800e6a4 <vPortValidateInterruptPriority+0x78>)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	4413      	add	r3, r2
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e648:	4b17      	ldr	r3, [pc, #92]	; (800e6a8 <vPortValidateInterruptPriority+0x7c>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	7afa      	ldrb	r2, [r7, #11]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d20c      	bcs.n	800e66c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e656:	b672      	cpsid	i
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	b662      	cpsie	i
 800e666:	607b      	str	r3, [r7, #4]
}
 800e668:	bf00      	nop
 800e66a:	e7fe      	b.n	800e66a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e66c:	4b0f      	ldr	r3, [pc, #60]	; (800e6ac <vPortValidateInterruptPriority+0x80>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e674:	4b0e      	ldr	r3, [pc, #56]	; (800e6b0 <vPortValidateInterruptPriority+0x84>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d90c      	bls.n	800e696 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e680:	b672      	cpsid	i
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	b662      	cpsie	i
 800e690:	603b      	str	r3, [r7, #0]
}
 800e692:	bf00      	nop
 800e694:	e7fe      	b.n	800e694 <vPortValidateInterruptPriority+0x68>
	}
 800e696:	bf00      	nop
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	e000e3f0 	.word	0xe000e3f0
 800e6a8:	200022f8 	.word	0x200022f8
 800e6ac:	e000ed0c 	.word	0xe000ed0c
 800e6b0:	200022fc 	.word	0x200022fc

0800e6b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	; 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e6c0:	f7fe fc82 	bl	800cfc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e6c4:	4b5b      	ldr	r3, [pc, #364]	; (800e834 <pvPortMalloc+0x180>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d101      	bne.n	800e6d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6cc:	f000 f91a 	bl	800e904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6d0:	4b59      	ldr	r3, [pc, #356]	; (800e838 <pvPortMalloc+0x184>)
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4013      	ands	r3, r2
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f040 8092 	bne.w	800e802 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d01f      	beq.n	800e724 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e6e4:	2208      	movs	r2, #8
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f003 0307 	and.w	r3, r3, #7
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d016      	beq.n	800e724 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f023 0307 	bic.w	r3, r3, #7
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f003 0307 	and.w	r3, r3, #7
 800e706:	2b00      	cmp	r3, #0
 800e708:	d00c      	beq.n	800e724 <pvPortMalloc+0x70>
	__asm volatile
 800e70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e70e:	b672      	cpsid	i
 800e710:	f383 8811 	msr	BASEPRI, r3
 800e714:	f3bf 8f6f 	isb	sy
 800e718:	f3bf 8f4f 	dsb	sy
 800e71c:	b662      	cpsie	i
 800e71e:	617b      	str	r3, [r7, #20]
}
 800e720:	bf00      	nop
 800e722:	e7fe      	b.n	800e722 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d06b      	beq.n	800e802 <pvPortMalloc+0x14e>
 800e72a:	4b44      	ldr	r3, [pc, #272]	; (800e83c <pvPortMalloc+0x188>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	429a      	cmp	r2, r3
 800e732:	d866      	bhi.n	800e802 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e734:	4b42      	ldr	r3, [pc, #264]	; (800e840 <pvPortMalloc+0x18c>)
 800e736:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e738:	4b41      	ldr	r3, [pc, #260]	; (800e840 <pvPortMalloc+0x18c>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e73e:	e004      	b.n	800e74a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e742:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	429a      	cmp	r2, r3
 800e752:	d903      	bls.n	800e75c <pvPortMalloc+0xa8>
 800e754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1f1      	bne.n	800e740 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e75c:	4b35      	ldr	r3, [pc, #212]	; (800e834 <pvPortMalloc+0x180>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e762:	429a      	cmp	r2, r3
 800e764:	d04d      	beq.n	800e802 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2208      	movs	r2, #8
 800e76c:	4413      	add	r3, r2
 800e76e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77a:	685a      	ldr	r2, [r3, #4]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	1ad2      	subs	r2, r2, r3
 800e780:	2308      	movs	r3, #8
 800e782:	005b      	lsls	r3, r3, #1
 800e784:	429a      	cmp	r2, r3
 800e786:	d921      	bls.n	800e7cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4413      	add	r3, r2
 800e78e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	f003 0307 	and.w	r3, r3, #7
 800e796:	2b00      	cmp	r3, #0
 800e798:	d00c      	beq.n	800e7b4 <pvPortMalloc+0x100>
	__asm volatile
 800e79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79e:	b672      	cpsid	i
 800e7a0:	f383 8811 	msr	BASEPRI, r3
 800e7a4:	f3bf 8f6f 	isb	sy
 800e7a8:	f3bf 8f4f 	dsb	sy
 800e7ac:	b662      	cpsie	i
 800e7ae:	613b      	str	r3, [r7, #16]
}
 800e7b0:	bf00      	nop
 800e7b2:	e7fe      	b.n	800e7b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	1ad2      	subs	r2, r2, r3
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e7c6:	69b8      	ldr	r0, [r7, #24]
 800e7c8:	f000 f8fe 	bl	800e9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e7cc:	4b1b      	ldr	r3, [pc, #108]	; (800e83c <pvPortMalloc+0x188>)
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	4a19      	ldr	r2, [pc, #100]	; (800e83c <pvPortMalloc+0x188>)
 800e7d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7da:	4b18      	ldr	r3, [pc, #96]	; (800e83c <pvPortMalloc+0x188>)
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	4b19      	ldr	r3, [pc, #100]	; (800e844 <pvPortMalloc+0x190>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d203      	bcs.n	800e7ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7e6:	4b15      	ldr	r3, [pc, #84]	; (800e83c <pvPortMalloc+0x188>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a16      	ldr	r2, [pc, #88]	; (800e844 <pvPortMalloc+0x190>)
 800e7ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	4b11      	ldr	r3, [pc, #68]	; (800e838 <pvPortMalloc+0x184>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fe:	2200      	movs	r2, #0
 800e800:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e802:	f7fe fbef 	bl	800cfe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	f003 0307 	and.w	r3, r3, #7
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d00c      	beq.n	800e82a <pvPortMalloc+0x176>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	b672      	cpsid	i
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	b662      	cpsie	i
 800e824:	60fb      	str	r3, [r7, #12]
}
 800e826:	bf00      	nop
 800e828:	e7fe      	b.n	800e828 <pvPortMalloc+0x174>
	return pvReturn;
 800e82a:	69fb      	ldr	r3, [r7, #28]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3728      	adds	r7, #40	; 0x28
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	20005f08 	.word	0x20005f08
 800e838:	20005f14 	.word	0x20005f14
 800e83c:	20005f0c 	.word	0x20005f0c
 800e840:	20005f00 	.word	0x20005f00
 800e844:	20005f10 	.word	0x20005f10

0800e848 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b086      	sub	sp, #24
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d04c      	beq.n	800e8f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e85a:	2308      	movs	r3, #8
 800e85c:	425b      	negs	r3, r3
 800e85e:	697a      	ldr	r2, [r7, #20]
 800e860:	4413      	add	r3, r2
 800e862:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	4b23      	ldr	r3, [pc, #140]	; (800e8fc <vPortFree+0xb4>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4013      	ands	r3, r2
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10c      	bne.n	800e890 <vPortFree+0x48>
	__asm volatile
 800e876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87a:	b672      	cpsid	i
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	b662      	cpsie	i
 800e88a:	60fb      	str	r3, [r7, #12]
}
 800e88c:	bf00      	nop
 800e88e:	e7fe      	b.n	800e88e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00c      	beq.n	800e8b2 <vPortFree+0x6a>
	__asm volatile
 800e898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89c:	b672      	cpsid	i
 800e89e:	f383 8811 	msr	BASEPRI, r3
 800e8a2:	f3bf 8f6f 	isb	sy
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	b662      	cpsie	i
 800e8ac:	60bb      	str	r3, [r7, #8]
}
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	685a      	ldr	r2, [r3, #4]
 800e8b6:	4b11      	ldr	r3, [pc, #68]	; (800e8fc <vPortFree+0xb4>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4013      	ands	r3, r2
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d019      	beq.n	800e8f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d115      	bne.n	800e8f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	685a      	ldr	r2, [r3, #4]
 800e8cc:	4b0b      	ldr	r3, [pc, #44]	; (800e8fc <vPortFree+0xb4>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	43db      	mvns	r3, r3
 800e8d2:	401a      	ands	r2, r3
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8d8:	f7fe fb76 	bl	800cfc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	685a      	ldr	r2, [r3, #4]
 800e8e0:	4b07      	ldr	r3, [pc, #28]	; (800e900 <vPortFree+0xb8>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	4a06      	ldr	r2, [pc, #24]	; (800e900 <vPortFree+0xb8>)
 800e8e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8ea:	6938      	ldr	r0, [r7, #16]
 800e8ec:	f000 f86c 	bl	800e9c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e8f0:	f7fe fb78 	bl	800cfe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e8f4:	bf00      	nop
 800e8f6:	3718      	adds	r7, #24
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	20005f14 	.word	0x20005f14
 800e900:	20005f0c 	.word	0x20005f0c

0800e904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e90a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e910:	4b27      	ldr	r3, [pc, #156]	; (800e9b0 <prvHeapInit+0xac>)
 800e912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f003 0307 	and.w	r3, r3, #7
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00c      	beq.n	800e938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3307      	adds	r3, #7
 800e922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f023 0307 	bic.w	r3, r3, #7
 800e92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	4a1f      	ldr	r2, [pc, #124]	; (800e9b0 <prvHeapInit+0xac>)
 800e934:	4413      	add	r3, r2
 800e936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e93c:	4a1d      	ldr	r2, [pc, #116]	; (800e9b4 <prvHeapInit+0xb0>)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e942:	4b1c      	ldr	r3, [pc, #112]	; (800e9b4 <prvHeapInit+0xb0>)
 800e944:	2200      	movs	r2, #0
 800e946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	4413      	add	r3, r2
 800e94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e950:	2208      	movs	r2, #8
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	1a9b      	subs	r3, r3, r2
 800e956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f023 0307 	bic.w	r3, r3, #7
 800e95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	4a15      	ldr	r2, [pc, #84]	; (800e9b8 <prvHeapInit+0xb4>)
 800e964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e966:	4b14      	ldr	r3, [pc, #80]	; (800e9b8 <prvHeapInit+0xb4>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2200      	movs	r2, #0
 800e96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e96e:	4b12      	ldr	r3, [pc, #72]	; (800e9b8 <prvHeapInit+0xb4>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	1ad2      	subs	r2, r2, r3
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e984:	4b0c      	ldr	r3, [pc, #48]	; (800e9b8 <prvHeapInit+0xb4>)
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	4a0a      	ldr	r2, [pc, #40]	; (800e9bc <prvHeapInit+0xb8>)
 800e992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	4a09      	ldr	r2, [pc, #36]	; (800e9c0 <prvHeapInit+0xbc>)
 800e99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e99c:	4b09      	ldr	r3, [pc, #36]	; (800e9c4 <prvHeapInit+0xc0>)
 800e99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e9a2:	601a      	str	r2, [r3, #0]
}
 800e9a4:	bf00      	nop
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	20002300 	.word	0x20002300
 800e9b4:	20005f00 	.word	0x20005f00
 800e9b8:	20005f08 	.word	0x20005f08
 800e9bc:	20005f10 	.word	0x20005f10
 800e9c0:	20005f0c 	.word	0x20005f0c
 800e9c4:	20005f14 	.word	0x20005f14

0800e9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9d0:	4b28      	ldr	r3, [pc, #160]	; (800ea74 <prvInsertBlockIntoFreeList+0xac>)
 800e9d2:	60fb      	str	r3, [r7, #12]
 800e9d4:	e002      	b.n	800e9dc <prvInsertBlockIntoFreeList+0x14>
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d8f7      	bhi.n	800e9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	68ba      	ldr	r2, [r7, #8]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d108      	bne.n	800ea0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	441a      	add	r2, r3
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	441a      	add	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d118      	bne.n	800ea50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	4b15      	ldr	r3, [pc, #84]	; (800ea78 <prvInsertBlockIntoFreeList+0xb0>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d00d      	beq.n	800ea46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685a      	ldr	r2, [r3, #4]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	441a      	add	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	e008      	b.n	800ea58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea46:	4b0c      	ldr	r3, [pc, #48]	; (800ea78 <prvInsertBlockIntoFreeList+0xb0>)
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	e003      	b.n	800ea58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d002      	beq.n	800ea66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea66:	bf00      	nop
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	20005f00 	.word	0x20005f00
 800ea78:	20005f08 	.word	0x20005f08

0800ea7c <__errno>:
 800ea7c:	4b01      	ldr	r3, [pc, #4]	; (800ea84 <__errno+0x8>)
 800ea7e:	6818      	ldr	r0, [r3, #0]
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	20000068 	.word	0x20000068

0800ea88 <std>:
 800ea88:	2300      	movs	r3, #0
 800ea8a:	b510      	push	{r4, lr}
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ea92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea96:	6083      	str	r3, [r0, #8]
 800ea98:	8181      	strh	r1, [r0, #12]
 800ea9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ea9c:	81c2      	strh	r2, [r0, #14]
 800ea9e:	6183      	str	r3, [r0, #24]
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	2208      	movs	r2, #8
 800eaa4:	305c      	adds	r0, #92	; 0x5c
 800eaa6:	f000 f91a 	bl	800ecde <memset>
 800eaaa:	4b05      	ldr	r3, [pc, #20]	; (800eac0 <std+0x38>)
 800eaac:	6263      	str	r3, [r4, #36]	; 0x24
 800eaae:	4b05      	ldr	r3, [pc, #20]	; (800eac4 <std+0x3c>)
 800eab0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eab2:	4b05      	ldr	r3, [pc, #20]	; (800eac8 <std+0x40>)
 800eab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eab6:	4b05      	ldr	r3, [pc, #20]	; (800eacc <std+0x44>)
 800eab8:	6224      	str	r4, [r4, #32]
 800eaba:	6323      	str	r3, [r4, #48]	; 0x30
 800eabc:	bd10      	pop	{r4, pc}
 800eabe:	bf00      	nop
 800eac0:	0800f7ed 	.word	0x0800f7ed
 800eac4:	0800f80f 	.word	0x0800f80f
 800eac8:	0800f847 	.word	0x0800f847
 800eacc:	0800f86b 	.word	0x0800f86b

0800ead0 <_cleanup_r>:
 800ead0:	4901      	ldr	r1, [pc, #4]	; (800ead8 <_cleanup_r+0x8>)
 800ead2:	f000 b8af 	b.w	800ec34 <_fwalk_reent>
 800ead6:	bf00      	nop
 800ead8:	080105b9 	.word	0x080105b9

0800eadc <__sfmoreglue>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	2268      	movs	r2, #104	; 0x68
 800eae0:	1e4d      	subs	r5, r1, #1
 800eae2:	4355      	muls	r5, r2
 800eae4:	460e      	mov	r6, r1
 800eae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eaea:	f000 f921 	bl	800ed30 <_malloc_r>
 800eaee:	4604      	mov	r4, r0
 800eaf0:	b140      	cbz	r0, 800eb04 <__sfmoreglue+0x28>
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	e9c0 1600 	strd	r1, r6, [r0]
 800eaf8:	300c      	adds	r0, #12
 800eafa:	60a0      	str	r0, [r4, #8]
 800eafc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb00:	f000 f8ed 	bl	800ecde <memset>
 800eb04:	4620      	mov	r0, r4
 800eb06:	bd70      	pop	{r4, r5, r6, pc}

0800eb08 <__sfp_lock_acquire>:
 800eb08:	4801      	ldr	r0, [pc, #4]	; (800eb10 <__sfp_lock_acquire+0x8>)
 800eb0a:	f000 b8d8 	b.w	800ecbe <__retarget_lock_acquire_recursive>
 800eb0e:	bf00      	nop
 800eb10:	20005f19 	.word	0x20005f19

0800eb14 <__sfp_lock_release>:
 800eb14:	4801      	ldr	r0, [pc, #4]	; (800eb1c <__sfp_lock_release+0x8>)
 800eb16:	f000 b8d3 	b.w	800ecc0 <__retarget_lock_release_recursive>
 800eb1a:	bf00      	nop
 800eb1c:	20005f19 	.word	0x20005f19

0800eb20 <__sinit_lock_acquire>:
 800eb20:	4801      	ldr	r0, [pc, #4]	; (800eb28 <__sinit_lock_acquire+0x8>)
 800eb22:	f000 b8cc 	b.w	800ecbe <__retarget_lock_acquire_recursive>
 800eb26:	bf00      	nop
 800eb28:	20005f1a 	.word	0x20005f1a

0800eb2c <__sinit_lock_release>:
 800eb2c:	4801      	ldr	r0, [pc, #4]	; (800eb34 <__sinit_lock_release+0x8>)
 800eb2e:	f000 b8c7 	b.w	800ecc0 <__retarget_lock_release_recursive>
 800eb32:	bf00      	nop
 800eb34:	20005f1a 	.word	0x20005f1a

0800eb38 <__sinit>:
 800eb38:	b510      	push	{r4, lr}
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	f7ff fff0 	bl	800eb20 <__sinit_lock_acquire>
 800eb40:	69a3      	ldr	r3, [r4, #24]
 800eb42:	b11b      	cbz	r3, 800eb4c <__sinit+0x14>
 800eb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb48:	f7ff bff0 	b.w	800eb2c <__sinit_lock_release>
 800eb4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb50:	6523      	str	r3, [r4, #80]	; 0x50
 800eb52:	4b13      	ldr	r3, [pc, #76]	; (800eba0 <__sinit+0x68>)
 800eb54:	4a13      	ldr	r2, [pc, #76]	; (800eba4 <__sinit+0x6c>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb5a:	42a3      	cmp	r3, r4
 800eb5c:	bf04      	itt	eq
 800eb5e:	2301      	moveq	r3, #1
 800eb60:	61a3      	streq	r3, [r4, #24]
 800eb62:	4620      	mov	r0, r4
 800eb64:	f000 f820 	bl	800eba8 <__sfp>
 800eb68:	6060      	str	r0, [r4, #4]
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f000 f81c 	bl	800eba8 <__sfp>
 800eb70:	60a0      	str	r0, [r4, #8]
 800eb72:	4620      	mov	r0, r4
 800eb74:	f000 f818 	bl	800eba8 <__sfp>
 800eb78:	2200      	movs	r2, #0
 800eb7a:	60e0      	str	r0, [r4, #12]
 800eb7c:	2104      	movs	r1, #4
 800eb7e:	6860      	ldr	r0, [r4, #4]
 800eb80:	f7ff ff82 	bl	800ea88 <std>
 800eb84:	68a0      	ldr	r0, [r4, #8]
 800eb86:	2201      	movs	r2, #1
 800eb88:	2109      	movs	r1, #9
 800eb8a:	f7ff ff7d 	bl	800ea88 <std>
 800eb8e:	68e0      	ldr	r0, [r4, #12]
 800eb90:	2202      	movs	r2, #2
 800eb92:	2112      	movs	r1, #18
 800eb94:	f7ff ff78 	bl	800ea88 <std>
 800eb98:	2301      	movs	r3, #1
 800eb9a:	61a3      	str	r3, [r4, #24]
 800eb9c:	e7d2      	b.n	800eb44 <__sinit+0xc>
 800eb9e:	bf00      	nop
 800eba0:	08011ec4 	.word	0x08011ec4
 800eba4:	0800ead1 	.word	0x0800ead1

0800eba8 <__sfp>:
 800eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebaa:	4607      	mov	r7, r0
 800ebac:	f7ff ffac 	bl	800eb08 <__sfp_lock_acquire>
 800ebb0:	4b1e      	ldr	r3, [pc, #120]	; (800ec2c <__sfp+0x84>)
 800ebb2:	681e      	ldr	r6, [r3, #0]
 800ebb4:	69b3      	ldr	r3, [r6, #24]
 800ebb6:	b913      	cbnz	r3, 800ebbe <__sfp+0x16>
 800ebb8:	4630      	mov	r0, r6
 800ebba:	f7ff ffbd 	bl	800eb38 <__sinit>
 800ebbe:	3648      	adds	r6, #72	; 0x48
 800ebc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	d503      	bpl.n	800ebd0 <__sfp+0x28>
 800ebc8:	6833      	ldr	r3, [r6, #0]
 800ebca:	b30b      	cbz	r3, 800ec10 <__sfp+0x68>
 800ebcc:	6836      	ldr	r6, [r6, #0]
 800ebce:	e7f7      	b.n	800ebc0 <__sfp+0x18>
 800ebd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebd4:	b9d5      	cbnz	r5, 800ec0c <__sfp+0x64>
 800ebd6:	4b16      	ldr	r3, [pc, #88]	; (800ec30 <__sfp+0x88>)
 800ebd8:	60e3      	str	r3, [r4, #12]
 800ebda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebde:	6665      	str	r5, [r4, #100]	; 0x64
 800ebe0:	f000 f86c 	bl	800ecbc <__retarget_lock_init_recursive>
 800ebe4:	f7ff ff96 	bl	800eb14 <__sfp_lock_release>
 800ebe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ebec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ebf0:	6025      	str	r5, [r4, #0]
 800ebf2:	61a5      	str	r5, [r4, #24]
 800ebf4:	2208      	movs	r2, #8
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ebfc:	f000 f86f 	bl	800ecde <memset>
 800ec00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec08:	4620      	mov	r0, r4
 800ec0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec0c:	3468      	adds	r4, #104	; 0x68
 800ec0e:	e7d9      	b.n	800ebc4 <__sfp+0x1c>
 800ec10:	2104      	movs	r1, #4
 800ec12:	4638      	mov	r0, r7
 800ec14:	f7ff ff62 	bl	800eadc <__sfmoreglue>
 800ec18:	4604      	mov	r4, r0
 800ec1a:	6030      	str	r0, [r6, #0]
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	d1d5      	bne.n	800ebcc <__sfp+0x24>
 800ec20:	f7ff ff78 	bl	800eb14 <__sfp_lock_release>
 800ec24:	230c      	movs	r3, #12
 800ec26:	603b      	str	r3, [r7, #0]
 800ec28:	e7ee      	b.n	800ec08 <__sfp+0x60>
 800ec2a:	bf00      	nop
 800ec2c:	08011ec4 	.word	0x08011ec4
 800ec30:	ffff0001 	.word	0xffff0001

0800ec34 <_fwalk_reent>:
 800ec34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec38:	4606      	mov	r6, r0
 800ec3a:	4688      	mov	r8, r1
 800ec3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec40:	2700      	movs	r7, #0
 800ec42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec46:	f1b9 0901 	subs.w	r9, r9, #1
 800ec4a:	d505      	bpl.n	800ec58 <_fwalk_reent+0x24>
 800ec4c:	6824      	ldr	r4, [r4, #0]
 800ec4e:	2c00      	cmp	r4, #0
 800ec50:	d1f7      	bne.n	800ec42 <_fwalk_reent+0xe>
 800ec52:	4638      	mov	r0, r7
 800ec54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec58:	89ab      	ldrh	r3, [r5, #12]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d907      	bls.n	800ec6e <_fwalk_reent+0x3a>
 800ec5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec62:	3301      	adds	r3, #1
 800ec64:	d003      	beq.n	800ec6e <_fwalk_reent+0x3a>
 800ec66:	4629      	mov	r1, r5
 800ec68:	4630      	mov	r0, r6
 800ec6a:	47c0      	blx	r8
 800ec6c:	4307      	orrs	r7, r0
 800ec6e:	3568      	adds	r5, #104	; 0x68
 800ec70:	e7e9      	b.n	800ec46 <_fwalk_reent+0x12>
	...

0800ec74 <__libc_init_array>:
 800ec74:	b570      	push	{r4, r5, r6, lr}
 800ec76:	4d0d      	ldr	r5, [pc, #52]	; (800ecac <__libc_init_array+0x38>)
 800ec78:	4c0d      	ldr	r4, [pc, #52]	; (800ecb0 <__libc_init_array+0x3c>)
 800ec7a:	1b64      	subs	r4, r4, r5
 800ec7c:	10a4      	asrs	r4, r4, #2
 800ec7e:	2600      	movs	r6, #0
 800ec80:	42a6      	cmp	r6, r4
 800ec82:	d109      	bne.n	800ec98 <__libc_init_array+0x24>
 800ec84:	4d0b      	ldr	r5, [pc, #44]	; (800ecb4 <__libc_init_array+0x40>)
 800ec86:	4c0c      	ldr	r4, [pc, #48]	; (800ecb8 <__libc_init_array+0x44>)
 800ec88:	f002 fe9c 	bl	80119c4 <_init>
 800ec8c:	1b64      	subs	r4, r4, r5
 800ec8e:	10a4      	asrs	r4, r4, #2
 800ec90:	2600      	movs	r6, #0
 800ec92:	42a6      	cmp	r6, r4
 800ec94:	d105      	bne.n	800eca2 <__libc_init_array+0x2e>
 800ec96:	bd70      	pop	{r4, r5, r6, pc}
 800ec98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec9c:	4798      	blx	r3
 800ec9e:	3601      	adds	r6, #1
 800eca0:	e7ee      	b.n	800ec80 <__libc_init_array+0xc>
 800eca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eca6:	4798      	blx	r3
 800eca8:	3601      	adds	r6, #1
 800ecaa:	e7f2      	b.n	800ec92 <__libc_init_array+0x1e>
 800ecac:	080124c0 	.word	0x080124c0
 800ecb0:	080124c0 	.word	0x080124c0
 800ecb4:	080124c0 	.word	0x080124c0
 800ecb8:	080124c4 	.word	0x080124c4

0800ecbc <__retarget_lock_init_recursive>:
 800ecbc:	4770      	bx	lr

0800ecbe <__retarget_lock_acquire_recursive>:
 800ecbe:	4770      	bx	lr

0800ecc0 <__retarget_lock_release_recursive>:
 800ecc0:	4770      	bx	lr

0800ecc2 <memcpy>:
 800ecc2:	440a      	add	r2, r1
 800ecc4:	4291      	cmp	r1, r2
 800ecc6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ecca:	d100      	bne.n	800ecce <memcpy+0xc>
 800eccc:	4770      	bx	lr
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecd8:	4291      	cmp	r1, r2
 800ecda:	d1f9      	bne.n	800ecd0 <memcpy+0xe>
 800ecdc:	bd10      	pop	{r4, pc}

0800ecde <memset>:
 800ecde:	4402      	add	r2, r0
 800ece0:	4603      	mov	r3, r0
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d100      	bne.n	800ece8 <memset+0xa>
 800ece6:	4770      	bx	lr
 800ece8:	f803 1b01 	strb.w	r1, [r3], #1
 800ecec:	e7f9      	b.n	800ece2 <memset+0x4>
	...

0800ecf0 <sbrk_aligned>:
 800ecf0:	b570      	push	{r4, r5, r6, lr}
 800ecf2:	4e0e      	ldr	r6, [pc, #56]	; (800ed2c <sbrk_aligned+0x3c>)
 800ecf4:	460c      	mov	r4, r1
 800ecf6:	6831      	ldr	r1, [r6, #0]
 800ecf8:	4605      	mov	r5, r0
 800ecfa:	b911      	cbnz	r1, 800ed02 <sbrk_aligned+0x12>
 800ecfc:	f000 fd66 	bl	800f7cc <_sbrk_r>
 800ed00:	6030      	str	r0, [r6, #0]
 800ed02:	4621      	mov	r1, r4
 800ed04:	4628      	mov	r0, r5
 800ed06:	f000 fd61 	bl	800f7cc <_sbrk_r>
 800ed0a:	1c43      	adds	r3, r0, #1
 800ed0c:	d00a      	beq.n	800ed24 <sbrk_aligned+0x34>
 800ed0e:	1cc4      	adds	r4, r0, #3
 800ed10:	f024 0403 	bic.w	r4, r4, #3
 800ed14:	42a0      	cmp	r0, r4
 800ed16:	d007      	beq.n	800ed28 <sbrk_aligned+0x38>
 800ed18:	1a21      	subs	r1, r4, r0
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f000 fd56 	bl	800f7cc <_sbrk_r>
 800ed20:	3001      	adds	r0, #1
 800ed22:	d101      	bne.n	800ed28 <sbrk_aligned+0x38>
 800ed24:	f04f 34ff 	mov.w	r4, #4294967295
 800ed28:	4620      	mov	r0, r4
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	20005f20 	.word	0x20005f20

0800ed30 <_malloc_r>:
 800ed30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed34:	1ccd      	adds	r5, r1, #3
 800ed36:	f025 0503 	bic.w	r5, r5, #3
 800ed3a:	3508      	adds	r5, #8
 800ed3c:	2d0c      	cmp	r5, #12
 800ed3e:	bf38      	it	cc
 800ed40:	250c      	movcc	r5, #12
 800ed42:	2d00      	cmp	r5, #0
 800ed44:	4607      	mov	r7, r0
 800ed46:	db01      	blt.n	800ed4c <_malloc_r+0x1c>
 800ed48:	42a9      	cmp	r1, r5
 800ed4a:	d905      	bls.n	800ed58 <_malloc_r+0x28>
 800ed4c:	230c      	movs	r3, #12
 800ed4e:	603b      	str	r3, [r7, #0]
 800ed50:	2600      	movs	r6, #0
 800ed52:	4630      	mov	r0, r6
 800ed54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed58:	4e2e      	ldr	r6, [pc, #184]	; (800ee14 <_malloc_r+0xe4>)
 800ed5a:	f001 fc87 	bl	801066c <__malloc_lock>
 800ed5e:	6833      	ldr	r3, [r6, #0]
 800ed60:	461c      	mov	r4, r3
 800ed62:	bb34      	cbnz	r4, 800edb2 <_malloc_r+0x82>
 800ed64:	4629      	mov	r1, r5
 800ed66:	4638      	mov	r0, r7
 800ed68:	f7ff ffc2 	bl	800ecf0 <sbrk_aligned>
 800ed6c:	1c43      	adds	r3, r0, #1
 800ed6e:	4604      	mov	r4, r0
 800ed70:	d14d      	bne.n	800ee0e <_malloc_r+0xde>
 800ed72:	6834      	ldr	r4, [r6, #0]
 800ed74:	4626      	mov	r6, r4
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	d140      	bne.n	800edfc <_malloc_r+0xcc>
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	4631      	mov	r1, r6
 800ed7e:	4638      	mov	r0, r7
 800ed80:	eb04 0803 	add.w	r8, r4, r3
 800ed84:	f000 fd22 	bl	800f7cc <_sbrk_r>
 800ed88:	4580      	cmp	r8, r0
 800ed8a:	d13a      	bne.n	800ee02 <_malloc_r+0xd2>
 800ed8c:	6821      	ldr	r1, [r4, #0]
 800ed8e:	3503      	adds	r5, #3
 800ed90:	1a6d      	subs	r5, r5, r1
 800ed92:	f025 0503 	bic.w	r5, r5, #3
 800ed96:	3508      	adds	r5, #8
 800ed98:	2d0c      	cmp	r5, #12
 800ed9a:	bf38      	it	cc
 800ed9c:	250c      	movcc	r5, #12
 800ed9e:	4629      	mov	r1, r5
 800eda0:	4638      	mov	r0, r7
 800eda2:	f7ff ffa5 	bl	800ecf0 <sbrk_aligned>
 800eda6:	3001      	adds	r0, #1
 800eda8:	d02b      	beq.n	800ee02 <_malloc_r+0xd2>
 800edaa:	6823      	ldr	r3, [r4, #0]
 800edac:	442b      	add	r3, r5
 800edae:	6023      	str	r3, [r4, #0]
 800edb0:	e00e      	b.n	800edd0 <_malloc_r+0xa0>
 800edb2:	6822      	ldr	r2, [r4, #0]
 800edb4:	1b52      	subs	r2, r2, r5
 800edb6:	d41e      	bmi.n	800edf6 <_malloc_r+0xc6>
 800edb8:	2a0b      	cmp	r2, #11
 800edba:	d916      	bls.n	800edea <_malloc_r+0xba>
 800edbc:	1961      	adds	r1, r4, r5
 800edbe:	42a3      	cmp	r3, r4
 800edc0:	6025      	str	r5, [r4, #0]
 800edc2:	bf18      	it	ne
 800edc4:	6059      	strne	r1, [r3, #4]
 800edc6:	6863      	ldr	r3, [r4, #4]
 800edc8:	bf08      	it	eq
 800edca:	6031      	streq	r1, [r6, #0]
 800edcc:	5162      	str	r2, [r4, r5]
 800edce:	604b      	str	r3, [r1, #4]
 800edd0:	4638      	mov	r0, r7
 800edd2:	f104 060b 	add.w	r6, r4, #11
 800edd6:	f001 fc4f 	bl	8010678 <__malloc_unlock>
 800edda:	f026 0607 	bic.w	r6, r6, #7
 800edde:	1d23      	adds	r3, r4, #4
 800ede0:	1af2      	subs	r2, r6, r3
 800ede2:	d0b6      	beq.n	800ed52 <_malloc_r+0x22>
 800ede4:	1b9b      	subs	r3, r3, r6
 800ede6:	50a3      	str	r3, [r4, r2]
 800ede8:	e7b3      	b.n	800ed52 <_malloc_r+0x22>
 800edea:	6862      	ldr	r2, [r4, #4]
 800edec:	42a3      	cmp	r3, r4
 800edee:	bf0c      	ite	eq
 800edf0:	6032      	streq	r2, [r6, #0]
 800edf2:	605a      	strne	r2, [r3, #4]
 800edf4:	e7ec      	b.n	800edd0 <_malloc_r+0xa0>
 800edf6:	4623      	mov	r3, r4
 800edf8:	6864      	ldr	r4, [r4, #4]
 800edfa:	e7b2      	b.n	800ed62 <_malloc_r+0x32>
 800edfc:	4634      	mov	r4, r6
 800edfe:	6876      	ldr	r6, [r6, #4]
 800ee00:	e7b9      	b.n	800ed76 <_malloc_r+0x46>
 800ee02:	230c      	movs	r3, #12
 800ee04:	603b      	str	r3, [r7, #0]
 800ee06:	4638      	mov	r0, r7
 800ee08:	f001 fc36 	bl	8010678 <__malloc_unlock>
 800ee0c:	e7a1      	b.n	800ed52 <_malloc_r+0x22>
 800ee0e:	6025      	str	r5, [r4, #0]
 800ee10:	e7de      	b.n	800edd0 <_malloc_r+0xa0>
 800ee12:	bf00      	nop
 800ee14:	20005f1c 	.word	0x20005f1c

0800ee18 <__cvt>:
 800ee18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee1a:	ed2d 8b02 	vpush	{d8}
 800ee1e:	eeb0 8b40 	vmov.f64	d8, d0
 800ee22:	b085      	sub	sp, #20
 800ee24:	4617      	mov	r7, r2
 800ee26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ee28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ee2a:	ee18 2a90 	vmov	r2, s17
 800ee2e:	f025 0520 	bic.w	r5, r5, #32
 800ee32:	2a00      	cmp	r2, #0
 800ee34:	bfb6      	itet	lt
 800ee36:	222d      	movlt	r2, #45	; 0x2d
 800ee38:	2200      	movge	r2, #0
 800ee3a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ee3e:	2d46      	cmp	r5, #70	; 0x46
 800ee40:	460c      	mov	r4, r1
 800ee42:	701a      	strb	r2, [r3, #0]
 800ee44:	d004      	beq.n	800ee50 <__cvt+0x38>
 800ee46:	2d45      	cmp	r5, #69	; 0x45
 800ee48:	d100      	bne.n	800ee4c <__cvt+0x34>
 800ee4a:	3401      	adds	r4, #1
 800ee4c:	2102      	movs	r1, #2
 800ee4e:	e000      	b.n	800ee52 <__cvt+0x3a>
 800ee50:	2103      	movs	r1, #3
 800ee52:	ab03      	add	r3, sp, #12
 800ee54:	9301      	str	r3, [sp, #4]
 800ee56:	ab02      	add	r3, sp, #8
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	4622      	mov	r2, r4
 800ee5c:	4633      	mov	r3, r6
 800ee5e:	eeb0 0b48 	vmov.f64	d0, d8
 800ee62:	f000 fdb5 	bl	800f9d0 <_dtoa_r>
 800ee66:	2d47      	cmp	r5, #71	; 0x47
 800ee68:	d101      	bne.n	800ee6e <__cvt+0x56>
 800ee6a:	07fb      	lsls	r3, r7, #31
 800ee6c:	d51a      	bpl.n	800eea4 <__cvt+0x8c>
 800ee6e:	2d46      	cmp	r5, #70	; 0x46
 800ee70:	eb00 0204 	add.w	r2, r0, r4
 800ee74:	d10c      	bne.n	800ee90 <__cvt+0x78>
 800ee76:	7803      	ldrb	r3, [r0, #0]
 800ee78:	2b30      	cmp	r3, #48	; 0x30
 800ee7a:	d107      	bne.n	800ee8c <__cvt+0x74>
 800ee7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ee80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee84:	bf1c      	itt	ne
 800ee86:	f1c4 0401 	rsbne	r4, r4, #1
 800ee8a:	6034      	strne	r4, [r6, #0]
 800ee8c:	6833      	ldr	r3, [r6, #0]
 800ee8e:	441a      	add	r2, r3
 800ee90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ee94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee98:	bf08      	it	eq
 800ee9a:	9203      	streq	r2, [sp, #12]
 800ee9c:	2130      	movs	r1, #48	; 0x30
 800ee9e:	9b03      	ldr	r3, [sp, #12]
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d307      	bcc.n	800eeb4 <__cvt+0x9c>
 800eea4:	9b03      	ldr	r3, [sp, #12]
 800eea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eea8:	1a1b      	subs	r3, r3, r0
 800eeaa:	6013      	str	r3, [r2, #0]
 800eeac:	b005      	add	sp, #20
 800eeae:	ecbd 8b02 	vpop	{d8}
 800eeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb4:	1c5c      	adds	r4, r3, #1
 800eeb6:	9403      	str	r4, [sp, #12]
 800eeb8:	7019      	strb	r1, [r3, #0]
 800eeba:	e7f0      	b.n	800ee9e <__cvt+0x86>

0800eebc <__exponent>:
 800eebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eebe:	4603      	mov	r3, r0
 800eec0:	2900      	cmp	r1, #0
 800eec2:	bfb8      	it	lt
 800eec4:	4249      	neglt	r1, r1
 800eec6:	f803 2b02 	strb.w	r2, [r3], #2
 800eeca:	bfb4      	ite	lt
 800eecc:	222d      	movlt	r2, #45	; 0x2d
 800eece:	222b      	movge	r2, #43	; 0x2b
 800eed0:	2909      	cmp	r1, #9
 800eed2:	7042      	strb	r2, [r0, #1]
 800eed4:	dd2a      	ble.n	800ef2c <__exponent+0x70>
 800eed6:	f10d 0407 	add.w	r4, sp, #7
 800eeda:	46a4      	mov	ip, r4
 800eedc:	270a      	movs	r7, #10
 800eede:	46a6      	mov	lr, r4
 800eee0:	460a      	mov	r2, r1
 800eee2:	fb91 f6f7 	sdiv	r6, r1, r7
 800eee6:	fb07 1516 	mls	r5, r7, r6, r1
 800eeea:	3530      	adds	r5, #48	; 0x30
 800eeec:	2a63      	cmp	r2, #99	; 0x63
 800eeee:	f104 34ff 	add.w	r4, r4, #4294967295
 800eef2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800eef6:	4631      	mov	r1, r6
 800eef8:	dcf1      	bgt.n	800eede <__exponent+0x22>
 800eefa:	3130      	adds	r1, #48	; 0x30
 800eefc:	f1ae 0502 	sub.w	r5, lr, #2
 800ef00:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ef04:	1c44      	adds	r4, r0, #1
 800ef06:	4629      	mov	r1, r5
 800ef08:	4561      	cmp	r1, ip
 800ef0a:	d30a      	bcc.n	800ef22 <__exponent+0x66>
 800ef0c:	f10d 0209 	add.w	r2, sp, #9
 800ef10:	eba2 020e 	sub.w	r2, r2, lr
 800ef14:	4565      	cmp	r5, ip
 800ef16:	bf88      	it	hi
 800ef18:	2200      	movhi	r2, #0
 800ef1a:	4413      	add	r3, r2
 800ef1c:	1a18      	subs	r0, r3, r0
 800ef1e:	b003      	add	sp, #12
 800ef20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef26:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ef2a:	e7ed      	b.n	800ef08 <__exponent+0x4c>
 800ef2c:	2330      	movs	r3, #48	; 0x30
 800ef2e:	3130      	adds	r1, #48	; 0x30
 800ef30:	7083      	strb	r3, [r0, #2]
 800ef32:	70c1      	strb	r1, [r0, #3]
 800ef34:	1d03      	adds	r3, r0, #4
 800ef36:	e7f1      	b.n	800ef1c <__exponent+0x60>

0800ef38 <_printf_float>:
 800ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef3c:	b08b      	sub	sp, #44	; 0x2c
 800ef3e:	460c      	mov	r4, r1
 800ef40:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ef44:	4616      	mov	r6, r2
 800ef46:	461f      	mov	r7, r3
 800ef48:	4605      	mov	r5, r0
 800ef4a:	f001 fb71 	bl	8010630 <_localeconv_r>
 800ef4e:	f8d0 b000 	ldr.w	fp, [r0]
 800ef52:	4658      	mov	r0, fp
 800ef54:	f7f1 f974 	bl	8000240 <strlen>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9308      	str	r3, [sp, #32]
 800ef5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ef60:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ef64:	6822      	ldr	r2, [r4, #0]
 800ef66:	3307      	adds	r3, #7
 800ef68:	f023 0307 	bic.w	r3, r3, #7
 800ef6c:	f103 0108 	add.w	r1, r3, #8
 800ef70:	f8c8 1000 	str.w	r1, [r8]
 800ef74:	4682      	mov	sl, r0
 800ef76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef7a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ef7e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800f1e0 <_printf_float+0x2a8>
 800ef82:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ef86:	eeb0 6bc0 	vabs.f64	d6, d0
 800ef8a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ef8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef92:	dd24      	ble.n	800efde <_printf_float+0xa6>
 800ef94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ef98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9c:	d502      	bpl.n	800efa4 <_printf_float+0x6c>
 800ef9e:	232d      	movs	r3, #45	; 0x2d
 800efa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efa4:	4b90      	ldr	r3, [pc, #576]	; (800f1e8 <_printf_float+0x2b0>)
 800efa6:	4891      	ldr	r0, [pc, #580]	; (800f1ec <_printf_float+0x2b4>)
 800efa8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800efac:	bf94      	ite	ls
 800efae:	4698      	movls	r8, r3
 800efb0:	4680      	movhi	r8, r0
 800efb2:	2303      	movs	r3, #3
 800efb4:	6123      	str	r3, [r4, #16]
 800efb6:	f022 0204 	bic.w	r2, r2, #4
 800efba:	2300      	movs	r3, #0
 800efbc:	6022      	str	r2, [r4, #0]
 800efbe:	9304      	str	r3, [sp, #16]
 800efc0:	9700      	str	r7, [sp, #0]
 800efc2:	4633      	mov	r3, r6
 800efc4:	aa09      	add	r2, sp, #36	; 0x24
 800efc6:	4621      	mov	r1, r4
 800efc8:	4628      	mov	r0, r5
 800efca:	f000 f9d3 	bl	800f374 <_printf_common>
 800efce:	3001      	adds	r0, #1
 800efd0:	f040 808a 	bne.w	800f0e8 <_printf_float+0x1b0>
 800efd4:	f04f 30ff 	mov.w	r0, #4294967295
 800efd8:	b00b      	add	sp, #44	; 0x2c
 800efda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efde:	eeb4 0b40 	vcmp.f64	d0, d0
 800efe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe6:	d709      	bvc.n	800effc <_printf_float+0xc4>
 800efe8:	ee10 3a90 	vmov	r3, s1
 800efec:	2b00      	cmp	r3, #0
 800efee:	bfbc      	itt	lt
 800eff0:	232d      	movlt	r3, #45	; 0x2d
 800eff2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eff6:	487e      	ldr	r0, [pc, #504]	; (800f1f0 <_printf_float+0x2b8>)
 800eff8:	4b7e      	ldr	r3, [pc, #504]	; (800f1f4 <_printf_float+0x2bc>)
 800effa:	e7d5      	b.n	800efa8 <_printf_float+0x70>
 800effc:	6863      	ldr	r3, [r4, #4]
 800effe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f002:	9104      	str	r1, [sp, #16]
 800f004:	1c59      	adds	r1, r3, #1
 800f006:	d13c      	bne.n	800f082 <_printf_float+0x14a>
 800f008:	2306      	movs	r3, #6
 800f00a:	6063      	str	r3, [r4, #4]
 800f00c:	2300      	movs	r3, #0
 800f00e:	9303      	str	r3, [sp, #12]
 800f010:	ab08      	add	r3, sp, #32
 800f012:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f016:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f01a:	ab07      	add	r3, sp, #28
 800f01c:	6861      	ldr	r1, [r4, #4]
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	6022      	str	r2, [r4, #0]
 800f022:	f10d 031b 	add.w	r3, sp, #27
 800f026:	4628      	mov	r0, r5
 800f028:	f7ff fef6 	bl	800ee18 <__cvt>
 800f02c:	9b04      	ldr	r3, [sp, #16]
 800f02e:	9907      	ldr	r1, [sp, #28]
 800f030:	2b47      	cmp	r3, #71	; 0x47
 800f032:	4680      	mov	r8, r0
 800f034:	d108      	bne.n	800f048 <_printf_float+0x110>
 800f036:	1cc8      	adds	r0, r1, #3
 800f038:	db02      	blt.n	800f040 <_printf_float+0x108>
 800f03a:	6863      	ldr	r3, [r4, #4]
 800f03c:	4299      	cmp	r1, r3
 800f03e:	dd41      	ble.n	800f0c4 <_printf_float+0x18c>
 800f040:	f1a9 0902 	sub.w	r9, r9, #2
 800f044:	fa5f f989 	uxtb.w	r9, r9
 800f048:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f04c:	d820      	bhi.n	800f090 <_printf_float+0x158>
 800f04e:	3901      	subs	r1, #1
 800f050:	464a      	mov	r2, r9
 800f052:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f056:	9107      	str	r1, [sp, #28]
 800f058:	f7ff ff30 	bl	800eebc <__exponent>
 800f05c:	9a08      	ldr	r2, [sp, #32]
 800f05e:	9004      	str	r0, [sp, #16]
 800f060:	1813      	adds	r3, r2, r0
 800f062:	2a01      	cmp	r2, #1
 800f064:	6123      	str	r3, [r4, #16]
 800f066:	dc02      	bgt.n	800f06e <_printf_float+0x136>
 800f068:	6822      	ldr	r2, [r4, #0]
 800f06a:	07d2      	lsls	r2, r2, #31
 800f06c:	d501      	bpl.n	800f072 <_printf_float+0x13a>
 800f06e:	3301      	adds	r3, #1
 800f070:	6123      	str	r3, [r4, #16]
 800f072:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d0a2      	beq.n	800efc0 <_printf_float+0x88>
 800f07a:	232d      	movs	r3, #45	; 0x2d
 800f07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f080:	e79e      	b.n	800efc0 <_printf_float+0x88>
 800f082:	9904      	ldr	r1, [sp, #16]
 800f084:	2947      	cmp	r1, #71	; 0x47
 800f086:	d1c1      	bne.n	800f00c <_printf_float+0xd4>
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1bf      	bne.n	800f00c <_printf_float+0xd4>
 800f08c:	2301      	movs	r3, #1
 800f08e:	e7bc      	b.n	800f00a <_printf_float+0xd2>
 800f090:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f094:	d118      	bne.n	800f0c8 <_printf_float+0x190>
 800f096:	2900      	cmp	r1, #0
 800f098:	6863      	ldr	r3, [r4, #4]
 800f09a:	dd0b      	ble.n	800f0b4 <_printf_float+0x17c>
 800f09c:	6121      	str	r1, [r4, #16]
 800f09e:	b913      	cbnz	r3, 800f0a6 <_printf_float+0x16e>
 800f0a0:	6822      	ldr	r2, [r4, #0]
 800f0a2:	07d0      	lsls	r0, r2, #31
 800f0a4:	d502      	bpl.n	800f0ac <_printf_float+0x174>
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	440b      	add	r3, r1
 800f0aa:	6123      	str	r3, [r4, #16]
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800f0b0:	9304      	str	r3, [sp, #16]
 800f0b2:	e7de      	b.n	800f072 <_printf_float+0x13a>
 800f0b4:	b913      	cbnz	r3, 800f0bc <_printf_float+0x184>
 800f0b6:	6822      	ldr	r2, [r4, #0]
 800f0b8:	07d2      	lsls	r2, r2, #31
 800f0ba:	d501      	bpl.n	800f0c0 <_printf_float+0x188>
 800f0bc:	3302      	adds	r3, #2
 800f0be:	e7f4      	b.n	800f0aa <_printf_float+0x172>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e7f2      	b.n	800f0aa <_printf_float+0x172>
 800f0c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f0c8:	9b08      	ldr	r3, [sp, #32]
 800f0ca:	4299      	cmp	r1, r3
 800f0cc:	db05      	blt.n	800f0da <_printf_float+0x1a2>
 800f0ce:	6823      	ldr	r3, [r4, #0]
 800f0d0:	6121      	str	r1, [r4, #16]
 800f0d2:	07d8      	lsls	r0, r3, #31
 800f0d4:	d5ea      	bpl.n	800f0ac <_printf_float+0x174>
 800f0d6:	1c4b      	adds	r3, r1, #1
 800f0d8:	e7e7      	b.n	800f0aa <_printf_float+0x172>
 800f0da:	2900      	cmp	r1, #0
 800f0dc:	bfd4      	ite	le
 800f0de:	f1c1 0202 	rsble	r2, r1, #2
 800f0e2:	2201      	movgt	r2, #1
 800f0e4:	4413      	add	r3, r2
 800f0e6:	e7e0      	b.n	800f0aa <_printf_float+0x172>
 800f0e8:	6823      	ldr	r3, [r4, #0]
 800f0ea:	055a      	lsls	r2, r3, #21
 800f0ec:	d407      	bmi.n	800f0fe <_printf_float+0x1c6>
 800f0ee:	6923      	ldr	r3, [r4, #16]
 800f0f0:	4642      	mov	r2, r8
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	4628      	mov	r0, r5
 800f0f6:	47b8      	blx	r7
 800f0f8:	3001      	adds	r0, #1
 800f0fa:	d12a      	bne.n	800f152 <_printf_float+0x21a>
 800f0fc:	e76a      	b.n	800efd4 <_printf_float+0x9c>
 800f0fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f102:	f240 80e2 	bls.w	800f2ca <_printf_float+0x392>
 800f106:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f10a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f112:	d133      	bne.n	800f17c <_printf_float+0x244>
 800f114:	4a38      	ldr	r2, [pc, #224]	; (800f1f8 <_printf_float+0x2c0>)
 800f116:	2301      	movs	r3, #1
 800f118:	4631      	mov	r1, r6
 800f11a:	4628      	mov	r0, r5
 800f11c:	47b8      	blx	r7
 800f11e:	3001      	adds	r0, #1
 800f120:	f43f af58 	beq.w	800efd4 <_printf_float+0x9c>
 800f124:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f128:	429a      	cmp	r2, r3
 800f12a:	db02      	blt.n	800f132 <_printf_float+0x1fa>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	07d8      	lsls	r0, r3, #31
 800f130:	d50f      	bpl.n	800f152 <_printf_float+0x21a>
 800f132:	4653      	mov	r3, sl
 800f134:	465a      	mov	r2, fp
 800f136:	4631      	mov	r1, r6
 800f138:	4628      	mov	r0, r5
 800f13a:	47b8      	blx	r7
 800f13c:	3001      	adds	r0, #1
 800f13e:	f43f af49 	beq.w	800efd4 <_printf_float+0x9c>
 800f142:	f04f 0800 	mov.w	r8, #0
 800f146:	f104 091a 	add.w	r9, r4, #26
 800f14a:	9b08      	ldr	r3, [sp, #32]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	4543      	cmp	r3, r8
 800f150:	dc09      	bgt.n	800f166 <_printf_float+0x22e>
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	079b      	lsls	r3, r3, #30
 800f156:	f100 8108 	bmi.w	800f36a <_printf_float+0x432>
 800f15a:	68e0      	ldr	r0, [r4, #12]
 800f15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f15e:	4298      	cmp	r0, r3
 800f160:	bfb8      	it	lt
 800f162:	4618      	movlt	r0, r3
 800f164:	e738      	b.n	800efd8 <_printf_float+0xa0>
 800f166:	2301      	movs	r3, #1
 800f168:	464a      	mov	r2, r9
 800f16a:	4631      	mov	r1, r6
 800f16c:	4628      	mov	r0, r5
 800f16e:	47b8      	blx	r7
 800f170:	3001      	adds	r0, #1
 800f172:	f43f af2f 	beq.w	800efd4 <_printf_float+0x9c>
 800f176:	f108 0801 	add.w	r8, r8, #1
 800f17a:	e7e6      	b.n	800f14a <_printf_float+0x212>
 800f17c:	9b07      	ldr	r3, [sp, #28]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	dc3c      	bgt.n	800f1fc <_printf_float+0x2c4>
 800f182:	4a1d      	ldr	r2, [pc, #116]	; (800f1f8 <_printf_float+0x2c0>)
 800f184:	2301      	movs	r3, #1
 800f186:	4631      	mov	r1, r6
 800f188:	4628      	mov	r0, r5
 800f18a:	47b8      	blx	r7
 800f18c:	3001      	adds	r0, #1
 800f18e:	f43f af21 	beq.w	800efd4 <_printf_float+0x9c>
 800f192:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f196:	4313      	orrs	r3, r2
 800f198:	d102      	bne.n	800f1a0 <_printf_float+0x268>
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	07d9      	lsls	r1, r3, #31
 800f19e:	d5d8      	bpl.n	800f152 <_printf_float+0x21a>
 800f1a0:	4653      	mov	r3, sl
 800f1a2:	465a      	mov	r2, fp
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	47b8      	blx	r7
 800f1aa:	3001      	adds	r0, #1
 800f1ac:	f43f af12 	beq.w	800efd4 <_printf_float+0x9c>
 800f1b0:	f04f 0900 	mov.w	r9, #0
 800f1b4:	f104 0a1a 	add.w	sl, r4, #26
 800f1b8:	9b07      	ldr	r3, [sp, #28]
 800f1ba:	425b      	negs	r3, r3
 800f1bc:	454b      	cmp	r3, r9
 800f1be:	dc01      	bgt.n	800f1c4 <_printf_float+0x28c>
 800f1c0:	9b08      	ldr	r3, [sp, #32]
 800f1c2:	e795      	b.n	800f0f0 <_printf_float+0x1b8>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	4652      	mov	r2, sl
 800f1c8:	4631      	mov	r1, r6
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	47b8      	blx	r7
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	f43f af00 	beq.w	800efd4 <_printf_float+0x9c>
 800f1d4:	f109 0901 	add.w	r9, r9, #1
 800f1d8:	e7ee      	b.n	800f1b8 <_printf_float+0x280>
 800f1da:	bf00      	nop
 800f1dc:	f3af 8000 	nop.w
 800f1e0:	ffffffff 	.word	0xffffffff
 800f1e4:	7fefffff 	.word	0x7fefffff
 800f1e8:	08011ec8 	.word	0x08011ec8
 800f1ec:	08011ecc 	.word	0x08011ecc
 800f1f0:	08011ed4 	.word	0x08011ed4
 800f1f4:	08011ed0 	.word	0x08011ed0
 800f1f8:	08011ed8 	.word	0x08011ed8
 800f1fc:	9a08      	ldr	r2, [sp, #32]
 800f1fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f200:	429a      	cmp	r2, r3
 800f202:	bfa8      	it	ge
 800f204:	461a      	movge	r2, r3
 800f206:	2a00      	cmp	r2, #0
 800f208:	4691      	mov	r9, r2
 800f20a:	dc38      	bgt.n	800f27e <_printf_float+0x346>
 800f20c:	2300      	movs	r3, #0
 800f20e:	9305      	str	r3, [sp, #20]
 800f210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f214:	f104 021a 	add.w	r2, r4, #26
 800f218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f21a:	9905      	ldr	r1, [sp, #20]
 800f21c:	9304      	str	r3, [sp, #16]
 800f21e:	eba3 0309 	sub.w	r3, r3, r9
 800f222:	428b      	cmp	r3, r1
 800f224:	dc33      	bgt.n	800f28e <_printf_float+0x356>
 800f226:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	db3c      	blt.n	800f2a8 <_printf_float+0x370>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	07da      	lsls	r2, r3, #31
 800f232:	d439      	bmi.n	800f2a8 <_printf_float+0x370>
 800f234:	9b08      	ldr	r3, [sp, #32]
 800f236:	9a04      	ldr	r2, [sp, #16]
 800f238:	9907      	ldr	r1, [sp, #28]
 800f23a:	1a9a      	subs	r2, r3, r2
 800f23c:	eba3 0901 	sub.w	r9, r3, r1
 800f240:	4591      	cmp	r9, r2
 800f242:	bfa8      	it	ge
 800f244:	4691      	movge	r9, r2
 800f246:	f1b9 0f00 	cmp.w	r9, #0
 800f24a:	dc35      	bgt.n	800f2b8 <_printf_float+0x380>
 800f24c:	f04f 0800 	mov.w	r8, #0
 800f250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f254:	f104 0a1a 	add.w	sl, r4, #26
 800f258:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f25c:	1a9b      	subs	r3, r3, r2
 800f25e:	eba3 0309 	sub.w	r3, r3, r9
 800f262:	4543      	cmp	r3, r8
 800f264:	f77f af75 	ble.w	800f152 <_printf_float+0x21a>
 800f268:	2301      	movs	r3, #1
 800f26a:	4652      	mov	r2, sl
 800f26c:	4631      	mov	r1, r6
 800f26e:	4628      	mov	r0, r5
 800f270:	47b8      	blx	r7
 800f272:	3001      	adds	r0, #1
 800f274:	f43f aeae 	beq.w	800efd4 <_printf_float+0x9c>
 800f278:	f108 0801 	add.w	r8, r8, #1
 800f27c:	e7ec      	b.n	800f258 <_printf_float+0x320>
 800f27e:	4613      	mov	r3, r2
 800f280:	4631      	mov	r1, r6
 800f282:	4642      	mov	r2, r8
 800f284:	4628      	mov	r0, r5
 800f286:	47b8      	blx	r7
 800f288:	3001      	adds	r0, #1
 800f28a:	d1bf      	bne.n	800f20c <_printf_float+0x2d4>
 800f28c:	e6a2      	b.n	800efd4 <_printf_float+0x9c>
 800f28e:	2301      	movs	r3, #1
 800f290:	4631      	mov	r1, r6
 800f292:	4628      	mov	r0, r5
 800f294:	9204      	str	r2, [sp, #16]
 800f296:	47b8      	blx	r7
 800f298:	3001      	adds	r0, #1
 800f29a:	f43f ae9b 	beq.w	800efd4 <_printf_float+0x9c>
 800f29e:	9b05      	ldr	r3, [sp, #20]
 800f2a0:	9a04      	ldr	r2, [sp, #16]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	9305      	str	r3, [sp, #20]
 800f2a6:	e7b7      	b.n	800f218 <_printf_float+0x2e0>
 800f2a8:	4653      	mov	r3, sl
 800f2aa:	465a      	mov	r2, fp
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	47b8      	blx	r7
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	d1be      	bne.n	800f234 <_printf_float+0x2fc>
 800f2b6:	e68d      	b.n	800efd4 <_printf_float+0x9c>
 800f2b8:	9a04      	ldr	r2, [sp, #16]
 800f2ba:	464b      	mov	r3, r9
 800f2bc:	4442      	add	r2, r8
 800f2be:	4631      	mov	r1, r6
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	47b8      	blx	r7
 800f2c4:	3001      	adds	r0, #1
 800f2c6:	d1c1      	bne.n	800f24c <_printf_float+0x314>
 800f2c8:	e684      	b.n	800efd4 <_printf_float+0x9c>
 800f2ca:	9a08      	ldr	r2, [sp, #32]
 800f2cc:	2a01      	cmp	r2, #1
 800f2ce:	dc01      	bgt.n	800f2d4 <_printf_float+0x39c>
 800f2d0:	07db      	lsls	r3, r3, #31
 800f2d2:	d537      	bpl.n	800f344 <_printf_float+0x40c>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	4642      	mov	r2, r8
 800f2d8:	4631      	mov	r1, r6
 800f2da:	4628      	mov	r0, r5
 800f2dc:	47b8      	blx	r7
 800f2de:	3001      	adds	r0, #1
 800f2e0:	f43f ae78 	beq.w	800efd4 <_printf_float+0x9c>
 800f2e4:	4653      	mov	r3, sl
 800f2e6:	465a      	mov	r2, fp
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	47b8      	blx	r7
 800f2ee:	3001      	adds	r0, #1
 800f2f0:	f43f ae70 	beq.w	800efd4 <_printf_float+0x9c>
 800f2f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f2f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f300:	d01b      	beq.n	800f33a <_printf_float+0x402>
 800f302:	9b08      	ldr	r3, [sp, #32]
 800f304:	f108 0201 	add.w	r2, r8, #1
 800f308:	3b01      	subs	r3, #1
 800f30a:	4631      	mov	r1, r6
 800f30c:	4628      	mov	r0, r5
 800f30e:	47b8      	blx	r7
 800f310:	3001      	adds	r0, #1
 800f312:	d10e      	bne.n	800f332 <_printf_float+0x3fa>
 800f314:	e65e      	b.n	800efd4 <_printf_float+0x9c>
 800f316:	2301      	movs	r3, #1
 800f318:	464a      	mov	r2, r9
 800f31a:	4631      	mov	r1, r6
 800f31c:	4628      	mov	r0, r5
 800f31e:	47b8      	blx	r7
 800f320:	3001      	adds	r0, #1
 800f322:	f43f ae57 	beq.w	800efd4 <_printf_float+0x9c>
 800f326:	f108 0801 	add.w	r8, r8, #1
 800f32a:	9b08      	ldr	r3, [sp, #32]
 800f32c:	3b01      	subs	r3, #1
 800f32e:	4543      	cmp	r3, r8
 800f330:	dcf1      	bgt.n	800f316 <_printf_float+0x3de>
 800f332:	9b04      	ldr	r3, [sp, #16]
 800f334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f338:	e6db      	b.n	800f0f2 <_printf_float+0x1ba>
 800f33a:	f04f 0800 	mov.w	r8, #0
 800f33e:	f104 091a 	add.w	r9, r4, #26
 800f342:	e7f2      	b.n	800f32a <_printf_float+0x3f2>
 800f344:	2301      	movs	r3, #1
 800f346:	4642      	mov	r2, r8
 800f348:	e7df      	b.n	800f30a <_printf_float+0x3d2>
 800f34a:	2301      	movs	r3, #1
 800f34c:	464a      	mov	r2, r9
 800f34e:	4631      	mov	r1, r6
 800f350:	4628      	mov	r0, r5
 800f352:	47b8      	blx	r7
 800f354:	3001      	adds	r0, #1
 800f356:	f43f ae3d 	beq.w	800efd4 <_printf_float+0x9c>
 800f35a:	f108 0801 	add.w	r8, r8, #1
 800f35e:	68e3      	ldr	r3, [r4, #12]
 800f360:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f362:	1a5b      	subs	r3, r3, r1
 800f364:	4543      	cmp	r3, r8
 800f366:	dcf0      	bgt.n	800f34a <_printf_float+0x412>
 800f368:	e6f7      	b.n	800f15a <_printf_float+0x222>
 800f36a:	f04f 0800 	mov.w	r8, #0
 800f36e:	f104 0919 	add.w	r9, r4, #25
 800f372:	e7f4      	b.n	800f35e <_printf_float+0x426>

0800f374 <_printf_common>:
 800f374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f378:	4616      	mov	r6, r2
 800f37a:	4699      	mov	r9, r3
 800f37c:	688a      	ldr	r2, [r1, #8]
 800f37e:	690b      	ldr	r3, [r1, #16]
 800f380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f384:	4293      	cmp	r3, r2
 800f386:	bfb8      	it	lt
 800f388:	4613      	movlt	r3, r2
 800f38a:	6033      	str	r3, [r6, #0]
 800f38c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f390:	4607      	mov	r7, r0
 800f392:	460c      	mov	r4, r1
 800f394:	b10a      	cbz	r2, 800f39a <_printf_common+0x26>
 800f396:	3301      	adds	r3, #1
 800f398:	6033      	str	r3, [r6, #0]
 800f39a:	6823      	ldr	r3, [r4, #0]
 800f39c:	0699      	lsls	r1, r3, #26
 800f39e:	bf42      	ittt	mi
 800f3a0:	6833      	ldrmi	r3, [r6, #0]
 800f3a2:	3302      	addmi	r3, #2
 800f3a4:	6033      	strmi	r3, [r6, #0]
 800f3a6:	6825      	ldr	r5, [r4, #0]
 800f3a8:	f015 0506 	ands.w	r5, r5, #6
 800f3ac:	d106      	bne.n	800f3bc <_printf_common+0x48>
 800f3ae:	f104 0a19 	add.w	sl, r4, #25
 800f3b2:	68e3      	ldr	r3, [r4, #12]
 800f3b4:	6832      	ldr	r2, [r6, #0]
 800f3b6:	1a9b      	subs	r3, r3, r2
 800f3b8:	42ab      	cmp	r3, r5
 800f3ba:	dc26      	bgt.n	800f40a <_printf_common+0x96>
 800f3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3c0:	1e13      	subs	r3, r2, #0
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	bf18      	it	ne
 800f3c6:	2301      	movne	r3, #1
 800f3c8:	0692      	lsls	r2, r2, #26
 800f3ca:	d42b      	bmi.n	800f424 <_printf_common+0xb0>
 800f3cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3d0:	4649      	mov	r1, r9
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	47c0      	blx	r8
 800f3d6:	3001      	adds	r0, #1
 800f3d8:	d01e      	beq.n	800f418 <_printf_common+0xa4>
 800f3da:	6823      	ldr	r3, [r4, #0]
 800f3dc:	68e5      	ldr	r5, [r4, #12]
 800f3de:	6832      	ldr	r2, [r6, #0]
 800f3e0:	f003 0306 	and.w	r3, r3, #6
 800f3e4:	2b04      	cmp	r3, #4
 800f3e6:	bf08      	it	eq
 800f3e8:	1aad      	subeq	r5, r5, r2
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	6922      	ldr	r2, [r4, #16]
 800f3ee:	bf0c      	ite	eq
 800f3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3f4:	2500      	movne	r5, #0
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	bfc4      	itt	gt
 800f3fa:	1a9b      	subgt	r3, r3, r2
 800f3fc:	18ed      	addgt	r5, r5, r3
 800f3fe:	2600      	movs	r6, #0
 800f400:	341a      	adds	r4, #26
 800f402:	42b5      	cmp	r5, r6
 800f404:	d11a      	bne.n	800f43c <_printf_common+0xc8>
 800f406:	2000      	movs	r0, #0
 800f408:	e008      	b.n	800f41c <_printf_common+0xa8>
 800f40a:	2301      	movs	r3, #1
 800f40c:	4652      	mov	r2, sl
 800f40e:	4649      	mov	r1, r9
 800f410:	4638      	mov	r0, r7
 800f412:	47c0      	blx	r8
 800f414:	3001      	adds	r0, #1
 800f416:	d103      	bne.n	800f420 <_printf_common+0xac>
 800f418:	f04f 30ff 	mov.w	r0, #4294967295
 800f41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f420:	3501      	adds	r5, #1
 800f422:	e7c6      	b.n	800f3b2 <_printf_common+0x3e>
 800f424:	18e1      	adds	r1, r4, r3
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	2030      	movs	r0, #48	; 0x30
 800f42a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f42e:	4422      	add	r2, r4
 800f430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f438:	3302      	adds	r3, #2
 800f43a:	e7c7      	b.n	800f3cc <_printf_common+0x58>
 800f43c:	2301      	movs	r3, #1
 800f43e:	4622      	mov	r2, r4
 800f440:	4649      	mov	r1, r9
 800f442:	4638      	mov	r0, r7
 800f444:	47c0      	blx	r8
 800f446:	3001      	adds	r0, #1
 800f448:	d0e6      	beq.n	800f418 <_printf_common+0xa4>
 800f44a:	3601      	adds	r6, #1
 800f44c:	e7d9      	b.n	800f402 <_printf_common+0x8e>
	...

0800f450 <_printf_i>:
 800f450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f454:	7e0f      	ldrb	r7, [r1, #24]
 800f456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f458:	2f78      	cmp	r7, #120	; 0x78
 800f45a:	4691      	mov	r9, r2
 800f45c:	4680      	mov	r8, r0
 800f45e:	460c      	mov	r4, r1
 800f460:	469a      	mov	sl, r3
 800f462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f466:	d807      	bhi.n	800f478 <_printf_i+0x28>
 800f468:	2f62      	cmp	r7, #98	; 0x62
 800f46a:	d80a      	bhi.n	800f482 <_printf_i+0x32>
 800f46c:	2f00      	cmp	r7, #0
 800f46e:	f000 80d8 	beq.w	800f622 <_printf_i+0x1d2>
 800f472:	2f58      	cmp	r7, #88	; 0x58
 800f474:	f000 80a3 	beq.w	800f5be <_printf_i+0x16e>
 800f478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f47c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f480:	e03a      	b.n	800f4f8 <_printf_i+0xa8>
 800f482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f486:	2b15      	cmp	r3, #21
 800f488:	d8f6      	bhi.n	800f478 <_printf_i+0x28>
 800f48a:	a101      	add	r1, pc, #4	; (adr r1, 800f490 <_printf_i+0x40>)
 800f48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f490:	0800f4e9 	.word	0x0800f4e9
 800f494:	0800f4fd 	.word	0x0800f4fd
 800f498:	0800f479 	.word	0x0800f479
 800f49c:	0800f479 	.word	0x0800f479
 800f4a0:	0800f479 	.word	0x0800f479
 800f4a4:	0800f479 	.word	0x0800f479
 800f4a8:	0800f4fd 	.word	0x0800f4fd
 800f4ac:	0800f479 	.word	0x0800f479
 800f4b0:	0800f479 	.word	0x0800f479
 800f4b4:	0800f479 	.word	0x0800f479
 800f4b8:	0800f479 	.word	0x0800f479
 800f4bc:	0800f609 	.word	0x0800f609
 800f4c0:	0800f52d 	.word	0x0800f52d
 800f4c4:	0800f5eb 	.word	0x0800f5eb
 800f4c8:	0800f479 	.word	0x0800f479
 800f4cc:	0800f479 	.word	0x0800f479
 800f4d0:	0800f62b 	.word	0x0800f62b
 800f4d4:	0800f479 	.word	0x0800f479
 800f4d8:	0800f52d 	.word	0x0800f52d
 800f4dc:	0800f479 	.word	0x0800f479
 800f4e0:	0800f479 	.word	0x0800f479
 800f4e4:	0800f5f3 	.word	0x0800f5f3
 800f4e8:	682b      	ldr	r3, [r5, #0]
 800f4ea:	1d1a      	adds	r2, r3, #4
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	602a      	str	r2, [r5, #0]
 800f4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e0a3      	b.n	800f644 <_printf_i+0x1f4>
 800f4fc:	6820      	ldr	r0, [r4, #0]
 800f4fe:	6829      	ldr	r1, [r5, #0]
 800f500:	0606      	lsls	r6, r0, #24
 800f502:	f101 0304 	add.w	r3, r1, #4
 800f506:	d50a      	bpl.n	800f51e <_printf_i+0xce>
 800f508:	680e      	ldr	r6, [r1, #0]
 800f50a:	602b      	str	r3, [r5, #0]
 800f50c:	2e00      	cmp	r6, #0
 800f50e:	da03      	bge.n	800f518 <_printf_i+0xc8>
 800f510:	232d      	movs	r3, #45	; 0x2d
 800f512:	4276      	negs	r6, r6
 800f514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f518:	485e      	ldr	r0, [pc, #376]	; (800f694 <_printf_i+0x244>)
 800f51a:	230a      	movs	r3, #10
 800f51c:	e019      	b.n	800f552 <_printf_i+0x102>
 800f51e:	680e      	ldr	r6, [r1, #0]
 800f520:	602b      	str	r3, [r5, #0]
 800f522:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f526:	bf18      	it	ne
 800f528:	b236      	sxthne	r6, r6
 800f52a:	e7ef      	b.n	800f50c <_printf_i+0xbc>
 800f52c:	682b      	ldr	r3, [r5, #0]
 800f52e:	6820      	ldr	r0, [r4, #0]
 800f530:	1d19      	adds	r1, r3, #4
 800f532:	6029      	str	r1, [r5, #0]
 800f534:	0601      	lsls	r1, r0, #24
 800f536:	d501      	bpl.n	800f53c <_printf_i+0xec>
 800f538:	681e      	ldr	r6, [r3, #0]
 800f53a:	e002      	b.n	800f542 <_printf_i+0xf2>
 800f53c:	0646      	lsls	r6, r0, #25
 800f53e:	d5fb      	bpl.n	800f538 <_printf_i+0xe8>
 800f540:	881e      	ldrh	r6, [r3, #0]
 800f542:	4854      	ldr	r0, [pc, #336]	; (800f694 <_printf_i+0x244>)
 800f544:	2f6f      	cmp	r7, #111	; 0x6f
 800f546:	bf0c      	ite	eq
 800f548:	2308      	moveq	r3, #8
 800f54a:	230a      	movne	r3, #10
 800f54c:	2100      	movs	r1, #0
 800f54e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f552:	6865      	ldr	r5, [r4, #4]
 800f554:	60a5      	str	r5, [r4, #8]
 800f556:	2d00      	cmp	r5, #0
 800f558:	bfa2      	ittt	ge
 800f55a:	6821      	ldrge	r1, [r4, #0]
 800f55c:	f021 0104 	bicge.w	r1, r1, #4
 800f560:	6021      	strge	r1, [r4, #0]
 800f562:	b90e      	cbnz	r6, 800f568 <_printf_i+0x118>
 800f564:	2d00      	cmp	r5, #0
 800f566:	d04d      	beq.n	800f604 <_printf_i+0x1b4>
 800f568:	4615      	mov	r5, r2
 800f56a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f56e:	fb03 6711 	mls	r7, r3, r1, r6
 800f572:	5dc7      	ldrb	r7, [r0, r7]
 800f574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f578:	4637      	mov	r7, r6
 800f57a:	42bb      	cmp	r3, r7
 800f57c:	460e      	mov	r6, r1
 800f57e:	d9f4      	bls.n	800f56a <_printf_i+0x11a>
 800f580:	2b08      	cmp	r3, #8
 800f582:	d10b      	bne.n	800f59c <_printf_i+0x14c>
 800f584:	6823      	ldr	r3, [r4, #0]
 800f586:	07de      	lsls	r6, r3, #31
 800f588:	d508      	bpl.n	800f59c <_printf_i+0x14c>
 800f58a:	6923      	ldr	r3, [r4, #16]
 800f58c:	6861      	ldr	r1, [r4, #4]
 800f58e:	4299      	cmp	r1, r3
 800f590:	bfde      	ittt	le
 800f592:	2330      	movle	r3, #48	; 0x30
 800f594:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f59c:	1b52      	subs	r2, r2, r5
 800f59e:	6122      	str	r2, [r4, #16]
 800f5a0:	f8cd a000 	str.w	sl, [sp]
 800f5a4:	464b      	mov	r3, r9
 800f5a6:	aa03      	add	r2, sp, #12
 800f5a8:	4621      	mov	r1, r4
 800f5aa:	4640      	mov	r0, r8
 800f5ac:	f7ff fee2 	bl	800f374 <_printf_common>
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	d14c      	bne.n	800f64e <_printf_i+0x1fe>
 800f5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b8:	b004      	add	sp, #16
 800f5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5be:	4835      	ldr	r0, [pc, #212]	; (800f694 <_printf_i+0x244>)
 800f5c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f5c4:	6829      	ldr	r1, [r5, #0]
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5cc:	6029      	str	r1, [r5, #0]
 800f5ce:	061d      	lsls	r5, r3, #24
 800f5d0:	d514      	bpl.n	800f5fc <_printf_i+0x1ac>
 800f5d2:	07df      	lsls	r7, r3, #31
 800f5d4:	bf44      	itt	mi
 800f5d6:	f043 0320 	orrmi.w	r3, r3, #32
 800f5da:	6023      	strmi	r3, [r4, #0]
 800f5dc:	b91e      	cbnz	r6, 800f5e6 <_printf_i+0x196>
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	f023 0320 	bic.w	r3, r3, #32
 800f5e4:	6023      	str	r3, [r4, #0]
 800f5e6:	2310      	movs	r3, #16
 800f5e8:	e7b0      	b.n	800f54c <_printf_i+0xfc>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	f043 0320 	orr.w	r3, r3, #32
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	2378      	movs	r3, #120	; 0x78
 800f5f4:	4828      	ldr	r0, [pc, #160]	; (800f698 <_printf_i+0x248>)
 800f5f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f5fa:	e7e3      	b.n	800f5c4 <_printf_i+0x174>
 800f5fc:	0659      	lsls	r1, r3, #25
 800f5fe:	bf48      	it	mi
 800f600:	b2b6      	uxthmi	r6, r6
 800f602:	e7e6      	b.n	800f5d2 <_printf_i+0x182>
 800f604:	4615      	mov	r5, r2
 800f606:	e7bb      	b.n	800f580 <_printf_i+0x130>
 800f608:	682b      	ldr	r3, [r5, #0]
 800f60a:	6826      	ldr	r6, [r4, #0]
 800f60c:	6961      	ldr	r1, [r4, #20]
 800f60e:	1d18      	adds	r0, r3, #4
 800f610:	6028      	str	r0, [r5, #0]
 800f612:	0635      	lsls	r5, r6, #24
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	d501      	bpl.n	800f61c <_printf_i+0x1cc>
 800f618:	6019      	str	r1, [r3, #0]
 800f61a:	e002      	b.n	800f622 <_printf_i+0x1d2>
 800f61c:	0670      	lsls	r0, r6, #25
 800f61e:	d5fb      	bpl.n	800f618 <_printf_i+0x1c8>
 800f620:	8019      	strh	r1, [r3, #0]
 800f622:	2300      	movs	r3, #0
 800f624:	6123      	str	r3, [r4, #16]
 800f626:	4615      	mov	r5, r2
 800f628:	e7ba      	b.n	800f5a0 <_printf_i+0x150>
 800f62a:	682b      	ldr	r3, [r5, #0]
 800f62c:	1d1a      	adds	r2, r3, #4
 800f62e:	602a      	str	r2, [r5, #0]
 800f630:	681d      	ldr	r5, [r3, #0]
 800f632:	6862      	ldr	r2, [r4, #4]
 800f634:	2100      	movs	r1, #0
 800f636:	4628      	mov	r0, r5
 800f638:	f7f0 fe0a 	bl	8000250 <memchr>
 800f63c:	b108      	cbz	r0, 800f642 <_printf_i+0x1f2>
 800f63e:	1b40      	subs	r0, r0, r5
 800f640:	6060      	str	r0, [r4, #4]
 800f642:	6863      	ldr	r3, [r4, #4]
 800f644:	6123      	str	r3, [r4, #16]
 800f646:	2300      	movs	r3, #0
 800f648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f64c:	e7a8      	b.n	800f5a0 <_printf_i+0x150>
 800f64e:	6923      	ldr	r3, [r4, #16]
 800f650:	462a      	mov	r2, r5
 800f652:	4649      	mov	r1, r9
 800f654:	4640      	mov	r0, r8
 800f656:	47d0      	blx	sl
 800f658:	3001      	adds	r0, #1
 800f65a:	d0ab      	beq.n	800f5b4 <_printf_i+0x164>
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	079b      	lsls	r3, r3, #30
 800f660:	d413      	bmi.n	800f68a <_printf_i+0x23a>
 800f662:	68e0      	ldr	r0, [r4, #12]
 800f664:	9b03      	ldr	r3, [sp, #12]
 800f666:	4298      	cmp	r0, r3
 800f668:	bfb8      	it	lt
 800f66a:	4618      	movlt	r0, r3
 800f66c:	e7a4      	b.n	800f5b8 <_printf_i+0x168>
 800f66e:	2301      	movs	r3, #1
 800f670:	4632      	mov	r2, r6
 800f672:	4649      	mov	r1, r9
 800f674:	4640      	mov	r0, r8
 800f676:	47d0      	blx	sl
 800f678:	3001      	adds	r0, #1
 800f67a:	d09b      	beq.n	800f5b4 <_printf_i+0x164>
 800f67c:	3501      	adds	r5, #1
 800f67e:	68e3      	ldr	r3, [r4, #12]
 800f680:	9903      	ldr	r1, [sp, #12]
 800f682:	1a5b      	subs	r3, r3, r1
 800f684:	42ab      	cmp	r3, r5
 800f686:	dcf2      	bgt.n	800f66e <_printf_i+0x21e>
 800f688:	e7eb      	b.n	800f662 <_printf_i+0x212>
 800f68a:	2500      	movs	r5, #0
 800f68c:	f104 0619 	add.w	r6, r4, #25
 800f690:	e7f5      	b.n	800f67e <_printf_i+0x22e>
 800f692:	bf00      	nop
 800f694:	08011eda 	.word	0x08011eda
 800f698:	08011eeb 	.word	0x08011eeb

0800f69c <iprintf>:
 800f69c:	b40f      	push	{r0, r1, r2, r3}
 800f69e:	4b0a      	ldr	r3, [pc, #40]	; (800f6c8 <iprintf+0x2c>)
 800f6a0:	b513      	push	{r0, r1, r4, lr}
 800f6a2:	681c      	ldr	r4, [r3, #0]
 800f6a4:	b124      	cbz	r4, 800f6b0 <iprintf+0x14>
 800f6a6:	69a3      	ldr	r3, [r4, #24]
 800f6a8:	b913      	cbnz	r3, 800f6b0 <iprintf+0x14>
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	f7ff fa44 	bl	800eb38 <__sinit>
 800f6b0:	ab05      	add	r3, sp, #20
 800f6b2:	9a04      	ldr	r2, [sp, #16]
 800f6b4:	68a1      	ldr	r1, [r4, #8]
 800f6b6:	9301      	str	r3, [sp, #4]
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f001 fbf3 	bl	8010ea4 <_vfiprintf_r>
 800f6be:	b002      	add	sp, #8
 800f6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6c4:	b004      	add	sp, #16
 800f6c6:	4770      	bx	lr
 800f6c8:	20000068 	.word	0x20000068

0800f6cc <putchar>:
 800f6cc:	4b09      	ldr	r3, [pc, #36]	; (800f6f4 <putchar+0x28>)
 800f6ce:	b513      	push	{r0, r1, r4, lr}
 800f6d0:	681c      	ldr	r4, [r3, #0]
 800f6d2:	4601      	mov	r1, r0
 800f6d4:	b134      	cbz	r4, 800f6e4 <putchar+0x18>
 800f6d6:	69a3      	ldr	r3, [r4, #24]
 800f6d8:	b923      	cbnz	r3, 800f6e4 <putchar+0x18>
 800f6da:	9001      	str	r0, [sp, #4]
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f7ff fa2b 	bl	800eb38 <__sinit>
 800f6e2:	9901      	ldr	r1, [sp, #4]
 800f6e4:	68a2      	ldr	r2, [r4, #8]
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	b002      	add	sp, #8
 800f6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6ee:	f001 bd09 	b.w	8011104 <_putc_r>
 800f6f2:	bf00      	nop
 800f6f4:	20000068 	.word	0x20000068

0800f6f8 <cleanup_glue>:
 800f6f8:	b538      	push	{r3, r4, r5, lr}
 800f6fa:	460c      	mov	r4, r1
 800f6fc:	6809      	ldr	r1, [r1, #0]
 800f6fe:	4605      	mov	r5, r0
 800f700:	b109      	cbz	r1, 800f706 <cleanup_glue+0xe>
 800f702:	f7ff fff9 	bl	800f6f8 <cleanup_glue>
 800f706:	4621      	mov	r1, r4
 800f708:	4628      	mov	r0, r5
 800f70a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f70e:	f001 bb53 	b.w	8010db8 <_free_r>
	...

0800f714 <_reclaim_reent>:
 800f714:	4b2c      	ldr	r3, [pc, #176]	; (800f7c8 <_reclaim_reent+0xb4>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4283      	cmp	r3, r0
 800f71a:	b570      	push	{r4, r5, r6, lr}
 800f71c:	4604      	mov	r4, r0
 800f71e:	d051      	beq.n	800f7c4 <_reclaim_reent+0xb0>
 800f720:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f722:	b143      	cbz	r3, 800f736 <_reclaim_reent+0x22>
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d14a      	bne.n	800f7c0 <_reclaim_reent+0xac>
 800f72a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f72c:	6819      	ldr	r1, [r3, #0]
 800f72e:	b111      	cbz	r1, 800f736 <_reclaim_reent+0x22>
 800f730:	4620      	mov	r0, r4
 800f732:	f001 fb41 	bl	8010db8 <_free_r>
 800f736:	6961      	ldr	r1, [r4, #20]
 800f738:	b111      	cbz	r1, 800f740 <_reclaim_reent+0x2c>
 800f73a:	4620      	mov	r0, r4
 800f73c:	f001 fb3c 	bl	8010db8 <_free_r>
 800f740:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f742:	b111      	cbz	r1, 800f74a <_reclaim_reent+0x36>
 800f744:	4620      	mov	r0, r4
 800f746:	f001 fb37 	bl	8010db8 <_free_r>
 800f74a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f74c:	b111      	cbz	r1, 800f754 <_reclaim_reent+0x40>
 800f74e:	4620      	mov	r0, r4
 800f750:	f001 fb32 	bl	8010db8 <_free_r>
 800f754:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f756:	b111      	cbz	r1, 800f75e <_reclaim_reent+0x4a>
 800f758:	4620      	mov	r0, r4
 800f75a:	f001 fb2d 	bl	8010db8 <_free_r>
 800f75e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f760:	b111      	cbz	r1, 800f768 <_reclaim_reent+0x54>
 800f762:	4620      	mov	r0, r4
 800f764:	f001 fb28 	bl	8010db8 <_free_r>
 800f768:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f76a:	b111      	cbz	r1, 800f772 <_reclaim_reent+0x5e>
 800f76c:	4620      	mov	r0, r4
 800f76e:	f001 fb23 	bl	8010db8 <_free_r>
 800f772:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f774:	b111      	cbz	r1, 800f77c <_reclaim_reent+0x68>
 800f776:	4620      	mov	r0, r4
 800f778:	f001 fb1e 	bl	8010db8 <_free_r>
 800f77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f77e:	b111      	cbz	r1, 800f786 <_reclaim_reent+0x72>
 800f780:	4620      	mov	r0, r4
 800f782:	f001 fb19 	bl	8010db8 <_free_r>
 800f786:	69a3      	ldr	r3, [r4, #24]
 800f788:	b1e3      	cbz	r3, 800f7c4 <_reclaim_reent+0xb0>
 800f78a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f78c:	4620      	mov	r0, r4
 800f78e:	4798      	blx	r3
 800f790:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f792:	b1b9      	cbz	r1, 800f7c4 <_reclaim_reent+0xb0>
 800f794:	4620      	mov	r0, r4
 800f796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f79a:	f7ff bfad 	b.w	800f6f8 <cleanup_glue>
 800f79e:	5949      	ldr	r1, [r1, r5]
 800f7a0:	b941      	cbnz	r1, 800f7b4 <_reclaim_reent+0xa0>
 800f7a2:	3504      	adds	r5, #4
 800f7a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7a6:	2d80      	cmp	r5, #128	; 0x80
 800f7a8:	68d9      	ldr	r1, [r3, #12]
 800f7aa:	d1f8      	bne.n	800f79e <_reclaim_reent+0x8a>
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f001 fb03 	bl	8010db8 <_free_r>
 800f7b2:	e7ba      	b.n	800f72a <_reclaim_reent+0x16>
 800f7b4:	680e      	ldr	r6, [r1, #0]
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	f001 fafe 	bl	8010db8 <_free_r>
 800f7bc:	4631      	mov	r1, r6
 800f7be:	e7ef      	b.n	800f7a0 <_reclaim_reent+0x8c>
 800f7c0:	2500      	movs	r5, #0
 800f7c2:	e7ef      	b.n	800f7a4 <_reclaim_reent+0x90>
 800f7c4:	bd70      	pop	{r4, r5, r6, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20000068 	.word	0x20000068

0800f7cc <_sbrk_r>:
 800f7cc:	b538      	push	{r3, r4, r5, lr}
 800f7ce:	4d06      	ldr	r5, [pc, #24]	; (800f7e8 <_sbrk_r+0x1c>)
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	4608      	mov	r0, r1
 800f7d6:	602b      	str	r3, [r5, #0]
 800f7d8:	f7f7 fe0c 	bl	80073f4 <_sbrk>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	d102      	bne.n	800f7e6 <_sbrk_r+0x1a>
 800f7e0:	682b      	ldr	r3, [r5, #0]
 800f7e2:	b103      	cbz	r3, 800f7e6 <_sbrk_r+0x1a>
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	20005f24 	.word	0x20005f24

0800f7ec <__sread>:
 800f7ec:	b510      	push	{r4, lr}
 800f7ee:	460c      	mov	r4, r1
 800f7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f4:	f001 fcce 	bl	8011194 <_read_r>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	bfab      	itete	ge
 800f7fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7fe:	89a3      	ldrhlt	r3, [r4, #12]
 800f800:	181b      	addge	r3, r3, r0
 800f802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f806:	bfac      	ite	ge
 800f808:	6563      	strge	r3, [r4, #84]	; 0x54
 800f80a:	81a3      	strhlt	r3, [r4, #12]
 800f80c:	bd10      	pop	{r4, pc}

0800f80e <__swrite>:
 800f80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f812:	461f      	mov	r7, r3
 800f814:	898b      	ldrh	r3, [r1, #12]
 800f816:	05db      	lsls	r3, r3, #23
 800f818:	4605      	mov	r5, r0
 800f81a:	460c      	mov	r4, r1
 800f81c:	4616      	mov	r6, r2
 800f81e:	d505      	bpl.n	800f82c <__swrite+0x1e>
 800f820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f824:	2302      	movs	r3, #2
 800f826:	2200      	movs	r2, #0
 800f828:	f000 ff06 	bl	8010638 <_lseek_r>
 800f82c:	89a3      	ldrh	r3, [r4, #12]
 800f82e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f836:	81a3      	strh	r3, [r4, #12]
 800f838:	4632      	mov	r2, r6
 800f83a:	463b      	mov	r3, r7
 800f83c:	4628      	mov	r0, r5
 800f83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f842:	f000 b817 	b.w	800f874 <_write_r>

0800f846 <__sseek>:
 800f846:	b510      	push	{r4, lr}
 800f848:	460c      	mov	r4, r1
 800f84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f84e:	f000 fef3 	bl	8010638 <_lseek_r>
 800f852:	1c43      	adds	r3, r0, #1
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	bf15      	itete	ne
 800f858:	6560      	strne	r0, [r4, #84]	; 0x54
 800f85a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f85e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f862:	81a3      	strheq	r3, [r4, #12]
 800f864:	bf18      	it	ne
 800f866:	81a3      	strhne	r3, [r4, #12]
 800f868:	bd10      	pop	{r4, pc}

0800f86a <__sclose>:
 800f86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f86e:	f000 b813 	b.w	800f898 <_close_r>
	...

0800f874 <_write_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d07      	ldr	r5, [pc, #28]	; (800f894 <_write_r+0x20>)
 800f878:	4604      	mov	r4, r0
 800f87a:	4608      	mov	r0, r1
 800f87c:	4611      	mov	r1, r2
 800f87e:	2200      	movs	r2, #0
 800f880:	602a      	str	r2, [r5, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	f7f2 f8ff 	bl	8001a86 <_write>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_write_r+0x1e>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_write_r+0x1e>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	20005f24 	.word	0x20005f24

0800f898 <_close_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d06      	ldr	r5, [pc, #24]	; (800f8b4 <_close_r+0x1c>)
 800f89c:	2300      	movs	r3, #0
 800f89e:	4604      	mov	r4, r0
 800f8a0:	4608      	mov	r0, r1
 800f8a2:	602b      	str	r3, [r5, #0]
 800f8a4:	f7f7 fd71 	bl	800738a <_close>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	d102      	bne.n	800f8b2 <_close_r+0x1a>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	b103      	cbz	r3, 800f8b2 <_close_r+0x1a>
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	20005f24 	.word	0x20005f24

0800f8b8 <quorem>:
 800f8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8bc:	6903      	ldr	r3, [r0, #16]
 800f8be:	690c      	ldr	r4, [r1, #16]
 800f8c0:	42a3      	cmp	r3, r4
 800f8c2:	4607      	mov	r7, r0
 800f8c4:	f2c0 8081 	blt.w	800f9ca <quorem+0x112>
 800f8c8:	3c01      	subs	r4, #1
 800f8ca:	f101 0814 	add.w	r8, r1, #20
 800f8ce:	f100 0514 	add.w	r5, r0, #20
 800f8d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8d6:	9301      	str	r3, [sp, #4]
 800f8d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f8e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8f0:	d331      	bcc.n	800f956 <quorem+0x9e>
 800f8f2:	f04f 0e00 	mov.w	lr, #0
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	46ac      	mov	ip, r5
 800f8fa:	46f2      	mov	sl, lr
 800f8fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800f900:	b293      	uxth	r3, r2
 800f902:	fb06 e303 	mla	r3, r6, r3, lr
 800f906:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	ebaa 0303 	sub.w	r3, sl, r3
 800f910:	f8dc a000 	ldr.w	sl, [ip]
 800f914:	0c12      	lsrs	r2, r2, #16
 800f916:	fa13 f38a 	uxtah	r3, r3, sl
 800f91a:	fb06 e202 	mla	r2, r6, r2, lr
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	9b00      	ldr	r3, [sp, #0]
 800f922:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f926:	b292      	uxth	r2, r2
 800f928:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f92c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f930:	f8bd 3000 	ldrh.w	r3, [sp]
 800f934:	4581      	cmp	r9, r0
 800f936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f93a:	f84c 3b04 	str.w	r3, [ip], #4
 800f93e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f942:	d2db      	bcs.n	800f8fc <quorem+0x44>
 800f944:	f855 300b 	ldr.w	r3, [r5, fp]
 800f948:	b92b      	cbnz	r3, 800f956 <quorem+0x9e>
 800f94a:	9b01      	ldr	r3, [sp, #4]
 800f94c:	3b04      	subs	r3, #4
 800f94e:	429d      	cmp	r5, r3
 800f950:	461a      	mov	r2, r3
 800f952:	d32e      	bcc.n	800f9b2 <quorem+0xfa>
 800f954:	613c      	str	r4, [r7, #16]
 800f956:	4638      	mov	r0, r7
 800f958:	f001 f916 	bl	8010b88 <__mcmp>
 800f95c:	2800      	cmp	r0, #0
 800f95e:	db24      	blt.n	800f9aa <quorem+0xf2>
 800f960:	3601      	adds	r6, #1
 800f962:	4628      	mov	r0, r5
 800f964:	f04f 0c00 	mov.w	ip, #0
 800f968:	f858 2b04 	ldr.w	r2, [r8], #4
 800f96c:	f8d0 e000 	ldr.w	lr, [r0]
 800f970:	b293      	uxth	r3, r2
 800f972:	ebac 0303 	sub.w	r3, ip, r3
 800f976:	0c12      	lsrs	r2, r2, #16
 800f978:	fa13 f38e 	uxtah	r3, r3, lr
 800f97c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f984:	b29b      	uxth	r3, r3
 800f986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f98a:	45c1      	cmp	r9, r8
 800f98c:	f840 3b04 	str.w	r3, [r0], #4
 800f990:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f994:	d2e8      	bcs.n	800f968 <quorem+0xb0>
 800f996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f99a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f99e:	b922      	cbnz	r2, 800f9aa <quorem+0xf2>
 800f9a0:	3b04      	subs	r3, #4
 800f9a2:	429d      	cmp	r5, r3
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	d30a      	bcc.n	800f9be <quorem+0x106>
 800f9a8:	613c      	str	r4, [r7, #16]
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	b003      	add	sp, #12
 800f9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b2:	6812      	ldr	r2, [r2, #0]
 800f9b4:	3b04      	subs	r3, #4
 800f9b6:	2a00      	cmp	r2, #0
 800f9b8:	d1cc      	bne.n	800f954 <quorem+0x9c>
 800f9ba:	3c01      	subs	r4, #1
 800f9bc:	e7c7      	b.n	800f94e <quorem+0x96>
 800f9be:	6812      	ldr	r2, [r2, #0]
 800f9c0:	3b04      	subs	r3, #4
 800f9c2:	2a00      	cmp	r2, #0
 800f9c4:	d1f0      	bne.n	800f9a8 <quorem+0xf0>
 800f9c6:	3c01      	subs	r4, #1
 800f9c8:	e7eb      	b.n	800f9a2 <quorem+0xea>
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	e7ee      	b.n	800f9ac <quorem+0xf4>
	...

0800f9d0 <_dtoa_r>:
 800f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	ed2d 8b02 	vpush	{d8}
 800f9d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f9da:	b091      	sub	sp, #68	; 0x44
 800f9dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f9e0:	ec59 8b10 	vmov	r8, r9, d0
 800f9e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f9e6:	9106      	str	r1, [sp, #24]
 800f9e8:	4606      	mov	r6, r0
 800f9ea:	9208      	str	r2, [sp, #32]
 800f9ec:	930c      	str	r3, [sp, #48]	; 0x30
 800f9ee:	b975      	cbnz	r5, 800fa0e <_dtoa_r+0x3e>
 800f9f0:	2010      	movs	r0, #16
 800f9f2:	f000 fe33 	bl	801065c <malloc>
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	6270      	str	r0, [r6, #36]	; 0x24
 800f9fa:	b920      	cbnz	r0, 800fa06 <_dtoa_r+0x36>
 800f9fc:	4baa      	ldr	r3, [pc, #680]	; (800fca8 <_dtoa_r+0x2d8>)
 800f9fe:	21ea      	movs	r1, #234	; 0xea
 800fa00:	48aa      	ldr	r0, [pc, #680]	; (800fcac <_dtoa_r+0x2dc>)
 800fa02:	f001 fc99 	bl	8011338 <__assert_func>
 800fa06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa0a:	6005      	str	r5, [r0, #0]
 800fa0c:	60c5      	str	r5, [r0, #12]
 800fa0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fa10:	6819      	ldr	r1, [r3, #0]
 800fa12:	b151      	cbz	r1, 800fa2a <_dtoa_r+0x5a>
 800fa14:	685a      	ldr	r2, [r3, #4]
 800fa16:	604a      	str	r2, [r1, #4]
 800fa18:	2301      	movs	r3, #1
 800fa1a:	4093      	lsls	r3, r2
 800fa1c:	608b      	str	r3, [r1, #8]
 800fa1e:	4630      	mov	r0, r6
 800fa20:	f000 fe70 	bl	8010704 <_Bfree>
 800fa24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fa26:	2200      	movs	r2, #0
 800fa28:	601a      	str	r2, [r3, #0]
 800fa2a:	f1b9 0300 	subs.w	r3, r9, #0
 800fa2e:	bfbb      	ittet	lt
 800fa30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fa34:	9303      	strlt	r3, [sp, #12]
 800fa36:	2300      	movge	r3, #0
 800fa38:	2201      	movlt	r2, #1
 800fa3a:	bfac      	ite	ge
 800fa3c:	6023      	strge	r3, [r4, #0]
 800fa3e:	6022      	strlt	r2, [r4, #0]
 800fa40:	4b9b      	ldr	r3, [pc, #620]	; (800fcb0 <_dtoa_r+0x2e0>)
 800fa42:	9c03      	ldr	r4, [sp, #12]
 800fa44:	43a3      	bics	r3, r4
 800fa46:	d11c      	bne.n	800fa82 <_dtoa_r+0xb2>
 800fa48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa4a:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa4e:	6013      	str	r3, [r2, #0]
 800fa50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800fa54:	ea53 0308 	orrs.w	r3, r3, r8
 800fa58:	f000 84fd 	beq.w	8010456 <_dtoa_r+0xa86>
 800fa5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa5e:	b963      	cbnz	r3, 800fa7a <_dtoa_r+0xaa>
 800fa60:	4b94      	ldr	r3, [pc, #592]	; (800fcb4 <_dtoa_r+0x2e4>)
 800fa62:	e01f      	b.n	800faa4 <_dtoa_r+0xd4>
 800fa64:	4b94      	ldr	r3, [pc, #592]	; (800fcb8 <_dtoa_r+0x2e8>)
 800fa66:	9301      	str	r3, [sp, #4]
 800fa68:	3308      	adds	r3, #8
 800fa6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fa6c:	6013      	str	r3, [r2, #0]
 800fa6e:	9801      	ldr	r0, [sp, #4]
 800fa70:	b011      	add	sp, #68	; 0x44
 800fa72:	ecbd 8b02 	vpop	{d8}
 800fa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa7a:	4b8e      	ldr	r3, [pc, #568]	; (800fcb4 <_dtoa_r+0x2e4>)
 800fa7c:	9301      	str	r3, [sp, #4]
 800fa7e:	3303      	adds	r3, #3
 800fa80:	e7f3      	b.n	800fa6a <_dtoa_r+0x9a>
 800fa82:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fa86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8e:	d10b      	bne.n	800faa8 <_dtoa_r+0xd8>
 800fa90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa92:	2301      	movs	r3, #1
 800fa94:	6013      	str	r3, [r2, #0]
 800fa96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 84d9 	beq.w	8010450 <_dtoa_r+0xa80>
 800fa9e:	4887      	ldr	r0, [pc, #540]	; (800fcbc <_dtoa_r+0x2ec>)
 800faa0:	6018      	str	r0, [r3, #0]
 800faa2:	1e43      	subs	r3, r0, #1
 800faa4:	9301      	str	r3, [sp, #4]
 800faa6:	e7e2      	b.n	800fa6e <_dtoa_r+0x9e>
 800faa8:	a90f      	add	r1, sp, #60	; 0x3c
 800faaa:	aa0e      	add	r2, sp, #56	; 0x38
 800faac:	4630      	mov	r0, r6
 800faae:	eeb0 0b48 	vmov.f64	d0, d8
 800fab2:	f001 f90f 	bl	8010cd4 <__d2b>
 800fab6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800faba:	4605      	mov	r5, r0
 800fabc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800fabe:	2900      	cmp	r1, #0
 800fac0:	d046      	beq.n	800fb50 <_dtoa_r+0x180>
 800fac2:	ee18 4a90 	vmov	r4, s17
 800fac6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800faca:	ec53 2b18 	vmov	r2, r3, d8
 800face:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800fad2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fad6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800fada:	2400      	movs	r4, #0
 800fadc:	ec43 2b16 	vmov	d6, r2, r3
 800fae0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800fae4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800fc90 <_dtoa_r+0x2c0>
 800fae8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800faec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800fc98 <_dtoa_r+0x2c8>
 800faf0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800faf4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800fca0 <_dtoa_r+0x2d0>
 800faf8:	ee07 1a90 	vmov	s15, r1
 800fafc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fb00:	eeb0 7b46 	vmov.f64	d7, d6
 800fb04:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fb08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fb0c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb14:	ee16 ba90 	vmov	fp, s13
 800fb18:	940a      	str	r4, [sp, #40]	; 0x28
 800fb1a:	d508      	bpl.n	800fb2e <_dtoa_r+0x15e>
 800fb1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fb20:	eeb4 6b47 	vcmp.f64	d6, d7
 800fb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb28:	bf18      	it	ne
 800fb2a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800fb2e:	f1bb 0f16 	cmp.w	fp, #22
 800fb32:	d82f      	bhi.n	800fb94 <_dtoa_r+0x1c4>
 800fb34:	4b62      	ldr	r3, [pc, #392]	; (800fcc0 <_dtoa_r+0x2f0>)
 800fb36:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fb3a:	ed93 7b00 	vldr	d7, [r3]
 800fb3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb46:	d501      	bpl.n	800fb4c <_dtoa_r+0x17c>
 800fb48:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	e022      	b.n	800fb96 <_dtoa_r+0x1c6>
 800fb50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fb52:	4401      	add	r1, r0
 800fb54:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800fb58:	2b20      	cmp	r3, #32
 800fb5a:	bfc1      	itttt	gt
 800fb5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fb60:	fa04 f303 	lslgt.w	r3, r4, r3
 800fb64:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800fb68:	fa28 f804 	lsrgt.w	r8, r8, r4
 800fb6c:	bfd6      	itet	le
 800fb6e:	f1c3 0320 	rsble	r3, r3, #32
 800fb72:	ea43 0808 	orrgt.w	r8, r3, r8
 800fb76:	fa08 f803 	lslle.w	r8, r8, r3
 800fb7a:	ee07 8a90 	vmov	s15, r8
 800fb7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fb82:	3901      	subs	r1, #1
 800fb84:	ee17 4a90 	vmov	r4, s15
 800fb88:	ec53 2b17 	vmov	r2, r3, d7
 800fb8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800fb90:	2401      	movs	r4, #1
 800fb92:	e7a3      	b.n	800fadc <_dtoa_r+0x10c>
 800fb94:	2301      	movs	r3, #1
 800fb96:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb98:	1a43      	subs	r3, r0, r1
 800fb9a:	1e5a      	subs	r2, r3, #1
 800fb9c:	bf45      	ittet	mi
 800fb9e:	f1c3 0301 	rsbmi	r3, r3, #1
 800fba2:	9304      	strmi	r3, [sp, #16]
 800fba4:	2300      	movpl	r3, #0
 800fba6:	2300      	movmi	r3, #0
 800fba8:	9205      	str	r2, [sp, #20]
 800fbaa:	bf54      	ite	pl
 800fbac:	9304      	strpl	r3, [sp, #16]
 800fbae:	9305      	strmi	r3, [sp, #20]
 800fbb0:	f1bb 0f00 	cmp.w	fp, #0
 800fbb4:	db18      	blt.n	800fbe8 <_dtoa_r+0x218>
 800fbb6:	9b05      	ldr	r3, [sp, #20]
 800fbb8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800fbbc:	445b      	add	r3, fp
 800fbbe:	9305      	str	r3, [sp, #20]
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	9a06      	ldr	r2, [sp, #24]
 800fbc4:	2a09      	cmp	r2, #9
 800fbc6:	d849      	bhi.n	800fc5c <_dtoa_r+0x28c>
 800fbc8:	2a05      	cmp	r2, #5
 800fbca:	bfc4      	itt	gt
 800fbcc:	3a04      	subgt	r2, #4
 800fbce:	9206      	strgt	r2, [sp, #24]
 800fbd0:	9a06      	ldr	r2, [sp, #24]
 800fbd2:	f1a2 0202 	sub.w	r2, r2, #2
 800fbd6:	bfcc      	ite	gt
 800fbd8:	2400      	movgt	r4, #0
 800fbda:	2401      	movle	r4, #1
 800fbdc:	2a03      	cmp	r2, #3
 800fbde:	d848      	bhi.n	800fc72 <_dtoa_r+0x2a2>
 800fbe0:	e8df f002 	tbb	[pc, r2]
 800fbe4:	3a2c2e0b 	.word	0x3a2c2e0b
 800fbe8:	9b04      	ldr	r3, [sp, #16]
 800fbea:	2200      	movs	r2, #0
 800fbec:	eba3 030b 	sub.w	r3, r3, fp
 800fbf0:	9304      	str	r3, [sp, #16]
 800fbf2:	9209      	str	r2, [sp, #36]	; 0x24
 800fbf4:	f1cb 0300 	rsb	r3, fp, #0
 800fbf8:	e7e3      	b.n	800fbc2 <_dtoa_r+0x1f2>
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	9207      	str	r2, [sp, #28]
 800fbfe:	9a08      	ldr	r2, [sp, #32]
 800fc00:	2a00      	cmp	r2, #0
 800fc02:	dc39      	bgt.n	800fc78 <_dtoa_r+0x2a8>
 800fc04:	f04f 0a01 	mov.w	sl, #1
 800fc08:	46d1      	mov	r9, sl
 800fc0a:	4652      	mov	r2, sl
 800fc0c:	f8cd a020 	str.w	sl, [sp, #32]
 800fc10:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800fc12:	2100      	movs	r1, #0
 800fc14:	6079      	str	r1, [r7, #4]
 800fc16:	2004      	movs	r0, #4
 800fc18:	f100 0c14 	add.w	ip, r0, #20
 800fc1c:	4594      	cmp	ip, r2
 800fc1e:	6879      	ldr	r1, [r7, #4]
 800fc20:	d92f      	bls.n	800fc82 <_dtoa_r+0x2b2>
 800fc22:	4630      	mov	r0, r6
 800fc24:	930d      	str	r3, [sp, #52]	; 0x34
 800fc26:	f000 fd2d 	bl	8010684 <_Balloc>
 800fc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc2c:	9001      	str	r0, [sp, #4]
 800fc2e:	4602      	mov	r2, r0
 800fc30:	2800      	cmp	r0, #0
 800fc32:	d149      	bne.n	800fcc8 <_dtoa_r+0x2f8>
 800fc34:	4b23      	ldr	r3, [pc, #140]	; (800fcc4 <_dtoa_r+0x2f4>)
 800fc36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc3a:	e6e1      	b.n	800fa00 <_dtoa_r+0x30>
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	e7dd      	b.n	800fbfc <_dtoa_r+0x22c>
 800fc40:	2200      	movs	r2, #0
 800fc42:	9207      	str	r2, [sp, #28]
 800fc44:	9a08      	ldr	r2, [sp, #32]
 800fc46:	eb0b 0a02 	add.w	sl, fp, r2
 800fc4a:	f10a 0901 	add.w	r9, sl, #1
 800fc4e:	464a      	mov	r2, r9
 800fc50:	2a01      	cmp	r2, #1
 800fc52:	bfb8      	it	lt
 800fc54:	2201      	movlt	r2, #1
 800fc56:	e7db      	b.n	800fc10 <_dtoa_r+0x240>
 800fc58:	2201      	movs	r2, #1
 800fc5a:	e7f2      	b.n	800fc42 <_dtoa_r+0x272>
 800fc5c:	2401      	movs	r4, #1
 800fc5e:	2200      	movs	r2, #0
 800fc60:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800fc64:	f04f 3aff 	mov.w	sl, #4294967295
 800fc68:	2100      	movs	r1, #0
 800fc6a:	46d1      	mov	r9, sl
 800fc6c:	2212      	movs	r2, #18
 800fc6e:	9108      	str	r1, [sp, #32]
 800fc70:	e7ce      	b.n	800fc10 <_dtoa_r+0x240>
 800fc72:	2201      	movs	r2, #1
 800fc74:	9207      	str	r2, [sp, #28]
 800fc76:	e7f5      	b.n	800fc64 <_dtoa_r+0x294>
 800fc78:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fc7c:	46d1      	mov	r9, sl
 800fc7e:	4652      	mov	r2, sl
 800fc80:	e7c6      	b.n	800fc10 <_dtoa_r+0x240>
 800fc82:	3101      	adds	r1, #1
 800fc84:	6079      	str	r1, [r7, #4]
 800fc86:	0040      	lsls	r0, r0, #1
 800fc88:	e7c6      	b.n	800fc18 <_dtoa_r+0x248>
 800fc8a:	bf00      	nop
 800fc8c:	f3af 8000 	nop.w
 800fc90:	636f4361 	.word	0x636f4361
 800fc94:	3fd287a7 	.word	0x3fd287a7
 800fc98:	8b60c8b3 	.word	0x8b60c8b3
 800fc9c:	3fc68a28 	.word	0x3fc68a28
 800fca0:	509f79fb 	.word	0x509f79fb
 800fca4:	3fd34413 	.word	0x3fd34413
 800fca8:	08011f09 	.word	0x08011f09
 800fcac:	08011f20 	.word	0x08011f20
 800fcb0:	7ff00000 	.word	0x7ff00000
 800fcb4:	08011f05 	.word	0x08011f05
 800fcb8:	08011efc 	.word	0x08011efc
 800fcbc:	08011ed9 	.word	0x08011ed9
 800fcc0:	08012010 	.word	0x08012010
 800fcc4:	08011f7b 	.word	0x08011f7b
 800fcc8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800fcca:	9901      	ldr	r1, [sp, #4]
 800fccc:	6011      	str	r1, [r2, #0]
 800fcce:	f1b9 0f0e 	cmp.w	r9, #14
 800fcd2:	d86c      	bhi.n	800fdae <_dtoa_r+0x3de>
 800fcd4:	2c00      	cmp	r4, #0
 800fcd6:	d06a      	beq.n	800fdae <_dtoa_r+0x3de>
 800fcd8:	f1bb 0f00 	cmp.w	fp, #0
 800fcdc:	f340 80a0 	ble.w	800fe20 <_dtoa_r+0x450>
 800fce0:	49c1      	ldr	r1, [pc, #772]	; (800ffe8 <_dtoa_r+0x618>)
 800fce2:	f00b 020f 	and.w	r2, fp, #15
 800fce6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800fcea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fcee:	ed92 7b00 	vldr	d7, [r2]
 800fcf2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800fcf6:	f000 8087 	beq.w	800fe08 <_dtoa_r+0x438>
 800fcfa:	4abc      	ldr	r2, [pc, #752]	; (800ffec <_dtoa_r+0x61c>)
 800fcfc:	ed92 6b08 	vldr	d6, [r2, #32]
 800fd00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fd04:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fd08:	f001 010f 	and.w	r1, r1, #15
 800fd0c:	2203      	movs	r2, #3
 800fd0e:	48b7      	ldr	r0, [pc, #732]	; (800ffec <_dtoa_r+0x61c>)
 800fd10:	2900      	cmp	r1, #0
 800fd12:	d17b      	bne.n	800fe0c <_dtoa_r+0x43c>
 800fd14:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fd18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fd1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fd20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd22:	2900      	cmp	r1, #0
 800fd24:	f000 80a2 	beq.w	800fe6c <_dtoa_r+0x49c>
 800fd28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fd2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd38:	f140 8098 	bpl.w	800fe6c <_dtoa_r+0x49c>
 800fd3c:	f1b9 0f00 	cmp.w	r9, #0
 800fd40:	f000 8094 	beq.w	800fe6c <_dtoa_r+0x49c>
 800fd44:	f1ba 0f00 	cmp.w	sl, #0
 800fd48:	dd2f      	ble.n	800fdaa <_dtoa_r+0x3da>
 800fd4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800fd4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fd52:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fd56:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fd5a:	3201      	adds	r2, #1
 800fd5c:	4650      	mov	r0, sl
 800fd5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fd62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800fd66:	ee07 2a90 	vmov	s15, r2
 800fd6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fd6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fd72:	ee15 4a90 	vmov	r4, s11
 800fd76:	ec52 1b15 	vmov	r1, r2, d5
 800fd7a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d177      	bne.n	800fe72 <_dtoa_r+0x4a2>
 800fd82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800fd86:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fd8a:	ec42 1b17 	vmov	d7, r1, r2
 800fd8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd96:	f300 8263 	bgt.w	8010260 <_dtoa_r+0x890>
 800fd9a:	eeb1 7b47 	vneg.f64	d7, d7
 800fd9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda6:	f100 8258 	bmi.w	801025a <_dtoa_r+0x88a>
 800fdaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fdae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	f2c0 811d 	blt.w	800fff0 <_dtoa_r+0x620>
 800fdb6:	f1bb 0f0e 	cmp.w	fp, #14
 800fdba:	f300 8119 	bgt.w	800fff0 <_dtoa_r+0x620>
 800fdbe:	4b8a      	ldr	r3, [pc, #552]	; (800ffe8 <_dtoa_r+0x618>)
 800fdc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fdc4:	ed93 6b00 	vldr	d6, [r3]
 800fdc8:	9b08      	ldr	r3, [sp, #32]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f280 80b7 	bge.w	800ff3e <_dtoa_r+0x56e>
 800fdd0:	f1b9 0f00 	cmp.w	r9, #0
 800fdd4:	f300 80b3 	bgt.w	800ff3e <_dtoa_r+0x56e>
 800fdd8:	f040 823f 	bne.w	801025a <_dtoa_r+0x88a>
 800fddc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800fde0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fde4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fde8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf0:	464c      	mov	r4, r9
 800fdf2:	464f      	mov	r7, r9
 800fdf4:	f280 8215 	bge.w	8010222 <_dtoa_r+0x852>
 800fdf8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fdfc:	2331      	movs	r3, #49	; 0x31
 800fdfe:	f808 3b01 	strb.w	r3, [r8], #1
 800fe02:	f10b 0b01 	add.w	fp, fp, #1
 800fe06:	e211      	b.n	801022c <_dtoa_r+0x85c>
 800fe08:	2202      	movs	r2, #2
 800fe0a:	e780      	b.n	800fd0e <_dtoa_r+0x33e>
 800fe0c:	07cc      	lsls	r4, r1, #31
 800fe0e:	d504      	bpl.n	800fe1a <_dtoa_r+0x44a>
 800fe10:	ed90 6b00 	vldr	d6, [r0]
 800fe14:	3201      	adds	r2, #1
 800fe16:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fe1a:	1049      	asrs	r1, r1, #1
 800fe1c:	3008      	adds	r0, #8
 800fe1e:	e777      	b.n	800fd10 <_dtoa_r+0x340>
 800fe20:	d022      	beq.n	800fe68 <_dtoa_r+0x498>
 800fe22:	f1cb 0100 	rsb	r1, fp, #0
 800fe26:	4a70      	ldr	r2, [pc, #448]	; (800ffe8 <_dtoa_r+0x618>)
 800fe28:	f001 000f 	and.w	r0, r1, #15
 800fe2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fe30:	ed92 7b00 	vldr	d7, [r2]
 800fe34:	ee28 7b07 	vmul.f64	d7, d8, d7
 800fe38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe3c:	486b      	ldr	r0, [pc, #428]	; (800ffec <_dtoa_r+0x61c>)
 800fe3e:	1109      	asrs	r1, r1, #4
 800fe40:	2400      	movs	r4, #0
 800fe42:	2202      	movs	r2, #2
 800fe44:	b929      	cbnz	r1, 800fe52 <_dtoa_r+0x482>
 800fe46:	2c00      	cmp	r4, #0
 800fe48:	f43f af6a 	beq.w	800fd20 <_dtoa_r+0x350>
 800fe4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fe50:	e766      	b.n	800fd20 <_dtoa_r+0x350>
 800fe52:	07cf      	lsls	r7, r1, #31
 800fe54:	d505      	bpl.n	800fe62 <_dtoa_r+0x492>
 800fe56:	ed90 6b00 	vldr	d6, [r0]
 800fe5a:	3201      	adds	r2, #1
 800fe5c:	2401      	movs	r4, #1
 800fe5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fe62:	1049      	asrs	r1, r1, #1
 800fe64:	3008      	adds	r0, #8
 800fe66:	e7ed      	b.n	800fe44 <_dtoa_r+0x474>
 800fe68:	2202      	movs	r2, #2
 800fe6a:	e759      	b.n	800fd20 <_dtoa_r+0x350>
 800fe6c:	465f      	mov	r7, fp
 800fe6e:	4648      	mov	r0, r9
 800fe70:	e775      	b.n	800fd5e <_dtoa_r+0x38e>
 800fe72:	ec42 1b17 	vmov	d7, r1, r2
 800fe76:	4a5c      	ldr	r2, [pc, #368]	; (800ffe8 <_dtoa_r+0x618>)
 800fe78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800fe7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800fe80:	9a01      	ldr	r2, [sp, #4]
 800fe82:	1814      	adds	r4, r2, r0
 800fe84:	9a07      	ldr	r2, [sp, #28]
 800fe86:	b352      	cbz	r2, 800fede <_dtoa_r+0x50e>
 800fe88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800fe8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800fe90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fe94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800fe98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800fe9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fea0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fea4:	ee14 2a90 	vmov	r2, s9
 800fea8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800feac:	3230      	adds	r2, #48	; 0x30
 800feae:	ee36 6b45 	vsub.f64	d6, d6, d5
 800feb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800feb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feba:	f808 2b01 	strb.w	r2, [r8], #1
 800febe:	d439      	bmi.n	800ff34 <_dtoa_r+0x564>
 800fec0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800fec4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800fec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fecc:	d472      	bmi.n	800ffb4 <_dtoa_r+0x5e4>
 800fece:	45a0      	cmp	r8, r4
 800fed0:	f43f af6b 	beq.w	800fdaa <_dtoa_r+0x3da>
 800fed4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800fed8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800fedc:	e7e0      	b.n	800fea0 <_dtoa_r+0x4d0>
 800fede:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fee2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fee6:	4621      	mov	r1, r4
 800fee8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800feec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800fef0:	ee14 2a90 	vmov	r2, s9
 800fef4:	3230      	adds	r2, #48	; 0x30
 800fef6:	f808 2b01 	strb.w	r2, [r8], #1
 800fefa:	45a0      	cmp	r8, r4
 800fefc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ff00:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ff04:	d118      	bne.n	800ff38 <_dtoa_r+0x568>
 800ff06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ff0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ff0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ff12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff16:	dc4d      	bgt.n	800ffb4 <_dtoa_r+0x5e4>
 800ff18:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ff1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff24:	f57f af41 	bpl.w	800fdaa <_dtoa_r+0x3da>
 800ff28:	4688      	mov	r8, r1
 800ff2a:	3901      	subs	r1, #1
 800ff2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ff30:	2b30      	cmp	r3, #48	; 0x30
 800ff32:	d0f9      	beq.n	800ff28 <_dtoa_r+0x558>
 800ff34:	46bb      	mov	fp, r7
 800ff36:	e02a      	b.n	800ff8e <_dtoa_r+0x5be>
 800ff38:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ff3c:	e7d6      	b.n	800feec <_dtoa_r+0x51c>
 800ff3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ff46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ff4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ff4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ff52:	ee15 3a10 	vmov	r3, s10
 800ff56:	3330      	adds	r3, #48	; 0x30
 800ff58:	f808 3b01 	strb.w	r3, [r8], #1
 800ff5c:	9b01      	ldr	r3, [sp, #4]
 800ff5e:	eba8 0303 	sub.w	r3, r8, r3
 800ff62:	4599      	cmp	r9, r3
 800ff64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ff68:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ff6c:	d133      	bne.n	800ffd6 <_dtoa_r+0x606>
 800ff6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ff72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ff76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff7a:	dc1a      	bgt.n	800ffb2 <_dtoa_r+0x5e2>
 800ff7c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ff80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff84:	d103      	bne.n	800ff8e <_dtoa_r+0x5be>
 800ff86:	ee15 3a10 	vmov	r3, s10
 800ff8a:	07d9      	lsls	r1, r3, #31
 800ff8c:	d411      	bmi.n	800ffb2 <_dtoa_r+0x5e2>
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4630      	mov	r0, r6
 800ff92:	f000 fbb7 	bl	8010704 <_Bfree>
 800ff96:	2300      	movs	r3, #0
 800ff98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ff9a:	f888 3000 	strb.w	r3, [r8]
 800ff9e:	f10b 0301 	add.w	r3, fp, #1
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f43f ad61 	beq.w	800fa6e <_dtoa_r+0x9e>
 800ffac:	f8c3 8000 	str.w	r8, [r3]
 800ffb0:	e55d      	b.n	800fa6e <_dtoa_r+0x9e>
 800ffb2:	465f      	mov	r7, fp
 800ffb4:	4643      	mov	r3, r8
 800ffb6:	4698      	mov	r8, r3
 800ffb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ffbc:	2a39      	cmp	r2, #57	; 0x39
 800ffbe:	d106      	bne.n	800ffce <_dtoa_r+0x5fe>
 800ffc0:	9a01      	ldr	r2, [sp, #4]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d1f7      	bne.n	800ffb6 <_dtoa_r+0x5e6>
 800ffc6:	9901      	ldr	r1, [sp, #4]
 800ffc8:	2230      	movs	r2, #48	; 0x30
 800ffca:	3701      	adds	r7, #1
 800ffcc:	700a      	strb	r2, [r1, #0]
 800ffce:	781a      	ldrb	r2, [r3, #0]
 800ffd0:	3201      	adds	r2, #1
 800ffd2:	701a      	strb	r2, [r3, #0]
 800ffd4:	e7ae      	b.n	800ff34 <_dtoa_r+0x564>
 800ffd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ffda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ffde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe2:	d1b2      	bne.n	800ff4a <_dtoa_r+0x57a>
 800ffe4:	e7d3      	b.n	800ff8e <_dtoa_r+0x5be>
 800ffe6:	bf00      	nop
 800ffe8:	08012010 	.word	0x08012010
 800ffec:	08011fe8 	.word	0x08011fe8
 800fff0:	9907      	ldr	r1, [sp, #28]
 800fff2:	2900      	cmp	r1, #0
 800fff4:	f000 80d0 	beq.w	8010198 <_dtoa_r+0x7c8>
 800fff8:	9906      	ldr	r1, [sp, #24]
 800fffa:	2901      	cmp	r1, #1
 800fffc:	f300 80b4 	bgt.w	8010168 <_dtoa_r+0x798>
 8010000:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010002:	2900      	cmp	r1, #0
 8010004:	f000 80ac 	beq.w	8010160 <_dtoa_r+0x790>
 8010008:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801000c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010010:	461c      	mov	r4, r3
 8010012:	930a      	str	r3, [sp, #40]	; 0x28
 8010014:	9b04      	ldr	r3, [sp, #16]
 8010016:	4413      	add	r3, r2
 8010018:	9304      	str	r3, [sp, #16]
 801001a:	9b05      	ldr	r3, [sp, #20]
 801001c:	2101      	movs	r1, #1
 801001e:	4413      	add	r3, r2
 8010020:	4630      	mov	r0, r6
 8010022:	9305      	str	r3, [sp, #20]
 8010024:	f000 fc26 	bl	8010874 <__i2b>
 8010028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801002a:	4607      	mov	r7, r0
 801002c:	f1b8 0f00 	cmp.w	r8, #0
 8010030:	dd0d      	ble.n	801004e <_dtoa_r+0x67e>
 8010032:	9a05      	ldr	r2, [sp, #20]
 8010034:	2a00      	cmp	r2, #0
 8010036:	dd0a      	ble.n	801004e <_dtoa_r+0x67e>
 8010038:	4542      	cmp	r2, r8
 801003a:	9904      	ldr	r1, [sp, #16]
 801003c:	bfa8      	it	ge
 801003e:	4642      	movge	r2, r8
 8010040:	1a89      	subs	r1, r1, r2
 8010042:	9104      	str	r1, [sp, #16]
 8010044:	9905      	ldr	r1, [sp, #20]
 8010046:	eba8 0802 	sub.w	r8, r8, r2
 801004a:	1a8a      	subs	r2, r1, r2
 801004c:	9205      	str	r2, [sp, #20]
 801004e:	b303      	cbz	r3, 8010092 <_dtoa_r+0x6c2>
 8010050:	9a07      	ldr	r2, [sp, #28]
 8010052:	2a00      	cmp	r2, #0
 8010054:	f000 80a5 	beq.w	80101a2 <_dtoa_r+0x7d2>
 8010058:	2c00      	cmp	r4, #0
 801005a:	dd13      	ble.n	8010084 <_dtoa_r+0x6b4>
 801005c:	4639      	mov	r1, r7
 801005e:	4622      	mov	r2, r4
 8010060:	4630      	mov	r0, r6
 8010062:	930d      	str	r3, [sp, #52]	; 0x34
 8010064:	f000 fcc6 	bl	80109f4 <__pow5mult>
 8010068:	462a      	mov	r2, r5
 801006a:	4601      	mov	r1, r0
 801006c:	4607      	mov	r7, r0
 801006e:	4630      	mov	r0, r6
 8010070:	f000 fc16 	bl	80108a0 <__multiply>
 8010074:	4629      	mov	r1, r5
 8010076:	900a      	str	r0, [sp, #40]	; 0x28
 8010078:	4630      	mov	r0, r6
 801007a:	f000 fb43 	bl	8010704 <_Bfree>
 801007e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010082:	4615      	mov	r5, r2
 8010084:	1b1a      	subs	r2, r3, r4
 8010086:	d004      	beq.n	8010092 <_dtoa_r+0x6c2>
 8010088:	4629      	mov	r1, r5
 801008a:	4630      	mov	r0, r6
 801008c:	f000 fcb2 	bl	80109f4 <__pow5mult>
 8010090:	4605      	mov	r5, r0
 8010092:	2101      	movs	r1, #1
 8010094:	4630      	mov	r0, r6
 8010096:	f000 fbed 	bl	8010874 <__i2b>
 801009a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801009c:	2b00      	cmp	r3, #0
 801009e:	4604      	mov	r4, r0
 80100a0:	f340 8081 	ble.w	80101a6 <_dtoa_r+0x7d6>
 80100a4:	461a      	mov	r2, r3
 80100a6:	4601      	mov	r1, r0
 80100a8:	4630      	mov	r0, r6
 80100aa:	f000 fca3 	bl	80109f4 <__pow5mult>
 80100ae:	9b06      	ldr	r3, [sp, #24]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	4604      	mov	r4, r0
 80100b4:	dd7a      	ble.n	80101ac <_dtoa_r+0x7dc>
 80100b6:	2300      	movs	r3, #0
 80100b8:	930a      	str	r3, [sp, #40]	; 0x28
 80100ba:	6922      	ldr	r2, [r4, #16]
 80100bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80100c0:	6910      	ldr	r0, [r2, #16]
 80100c2:	f000 fb87 	bl	80107d4 <__hi0bits>
 80100c6:	f1c0 0020 	rsb	r0, r0, #32
 80100ca:	9b05      	ldr	r3, [sp, #20]
 80100cc:	4418      	add	r0, r3
 80100ce:	f010 001f 	ands.w	r0, r0, #31
 80100d2:	f000 808c 	beq.w	80101ee <_dtoa_r+0x81e>
 80100d6:	f1c0 0220 	rsb	r2, r0, #32
 80100da:	2a04      	cmp	r2, #4
 80100dc:	f340 8085 	ble.w	80101ea <_dtoa_r+0x81a>
 80100e0:	f1c0 001c 	rsb	r0, r0, #28
 80100e4:	9b04      	ldr	r3, [sp, #16]
 80100e6:	4403      	add	r3, r0
 80100e8:	9304      	str	r3, [sp, #16]
 80100ea:	9b05      	ldr	r3, [sp, #20]
 80100ec:	4403      	add	r3, r0
 80100ee:	4480      	add	r8, r0
 80100f0:	9305      	str	r3, [sp, #20]
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	dd05      	ble.n	8010104 <_dtoa_r+0x734>
 80100f8:	4629      	mov	r1, r5
 80100fa:	461a      	mov	r2, r3
 80100fc:	4630      	mov	r0, r6
 80100fe:	f000 fcd3 	bl	8010aa8 <__lshift>
 8010102:	4605      	mov	r5, r0
 8010104:	9b05      	ldr	r3, [sp, #20]
 8010106:	2b00      	cmp	r3, #0
 8010108:	dd05      	ble.n	8010116 <_dtoa_r+0x746>
 801010a:	4621      	mov	r1, r4
 801010c:	461a      	mov	r2, r3
 801010e:	4630      	mov	r0, r6
 8010110:	f000 fcca 	bl	8010aa8 <__lshift>
 8010114:	4604      	mov	r4, r0
 8010116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010118:	2b00      	cmp	r3, #0
 801011a:	d06a      	beq.n	80101f2 <_dtoa_r+0x822>
 801011c:	4621      	mov	r1, r4
 801011e:	4628      	mov	r0, r5
 8010120:	f000 fd32 	bl	8010b88 <__mcmp>
 8010124:	2800      	cmp	r0, #0
 8010126:	da64      	bge.n	80101f2 <_dtoa_r+0x822>
 8010128:	2300      	movs	r3, #0
 801012a:	4629      	mov	r1, r5
 801012c:	220a      	movs	r2, #10
 801012e:	4630      	mov	r0, r6
 8010130:	f000 fb0a 	bl	8010748 <__multadd>
 8010134:	9b07      	ldr	r3, [sp, #28]
 8010136:	f10b 3bff 	add.w	fp, fp, #4294967295
 801013a:	4605      	mov	r5, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 8191 	beq.w	8010464 <_dtoa_r+0xa94>
 8010142:	4639      	mov	r1, r7
 8010144:	2300      	movs	r3, #0
 8010146:	220a      	movs	r2, #10
 8010148:	4630      	mov	r0, r6
 801014a:	f000 fafd 	bl	8010748 <__multadd>
 801014e:	f1ba 0f00 	cmp.w	sl, #0
 8010152:	4607      	mov	r7, r0
 8010154:	f300 808d 	bgt.w	8010272 <_dtoa_r+0x8a2>
 8010158:	9b06      	ldr	r3, [sp, #24]
 801015a:	2b02      	cmp	r3, #2
 801015c:	dc50      	bgt.n	8010200 <_dtoa_r+0x830>
 801015e:	e088      	b.n	8010272 <_dtoa_r+0x8a2>
 8010160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010162:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010166:	e751      	b.n	801000c <_dtoa_r+0x63c>
 8010168:	f109 34ff 	add.w	r4, r9, #4294967295
 801016c:	42a3      	cmp	r3, r4
 801016e:	bfbf      	itttt	lt
 8010170:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8010172:	1ae3      	sublt	r3, r4, r3
 8010174:	18d2      	addlt	r2, r2, r3
 8010176:	9209      	strlt	r2, [sp, #36]	; 0x24
 8010178:	bfb6      	itet	lt
 801017a:	4623      	movlt	r3, r4
 801017c:	1b1c      	subge	r4, r3, r4
 801017e:	2400      	movlt	r4, #0
 8010180:	f1b9 0f00 	cmp.w	r9, #0
 8010184:	bfb5      	itete	lt
 8010186:	9a04      	ldrlt	r2, [sp, #16]
 8010188:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801018c:	eba2 0809 	sublt.w	r8, r2, r9
 8010190:	464a      	movge	r2, r9
 8010192:	bfb8      	it	lt
 8010194:	2200      	movlt	r2, #0
 8010196:	e73c      	b.n	8010012 <_dtoa_r+0x642>
 8010198:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801019c:	9f07      	ldr	r7, [sp, #28]
 801019e:	461c      	mov	r4, r3
 80101a0:	e744      	b.n	801002c <_dtoa_r+0x65c>
 80101a2:	461a      	mov	r2, r3
 80101a4:	e770      	b.n	8010088 <_dtoa_r+0x6b8>
 80101a6:	9b06      	ldr	r3, [sp, #24]
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	dc18      	bgt.n	80101de <_dtoa_r+0x80e>
 80101ac:	9b02      	ldr	r3, [sp, #8]
 80101ae:	b9b3      	cbnz	r3, 80101de <_dtoa_r+0x80e>
 80101b0:	9b03      	ldr	r3, [sp, #12]
 80101b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80101b6:	b9a2      	cbnz	r2, 80101e2 <_dtoa_r+0x812>
 80101b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80101bc:	0d12      	lsrs	r2, r2, #20
 80101be:	0512      	lsls	r2, r2, #20
 80101c0:	b18a      	cbz	r2, 80101e6 <_dtoa_r+0x816>
 80101c2:	9b04      	ldr	r3, [sp, #16]
 80101c4:	3301      	adds	r3, #1
 80101c6:	9304      	str	r3, [sp, #16]
 80101c8:	9b05      	ldr	r3, [sp, #20]
 80101ca:	3301      	adds	r3, #1
 80101cc:	9305      	str	r3, [sp, #20]
 80101ce:	2301      	movs	r3, #1
 80101d0:	930a      	str	r3, [sp, #40]	; 0x28
 80101d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f47f af70 	bne.w	80100ba <_dtoa_r+0x6ea>
 80101da:	2001      	movs	r0, #1
 80101dc:	e775      	b.n	80100ca <_dtoa_r+0x6fa>
 80101de:	2300      	movs	r3, #0
 80101e0:	e7f6      	b.n	80101d0 <_dtoa_r+0x800>
 80101e2:	9b02      	ldr	r3, [sp, #8]
 80101e4:	e7f4      	b.n	80101d0 <_dtoa_r+0x800>
 80101e6:	920a      	str	r2, [sp, #40]	; 0x28
 80101e8:	e7f3      	b.n	80101d2 <_dtoa_r+0x802>
 80101ea:	d082      	beq.n	80100f2 <_dtoa_r+0x722>
 80101ec:	4610      	mov	r0, r2
 80101ee:	301c      	adds	r0, #28
 80101f0:	e778      	b.n	80100e4 <_dtoa_r+0x714>
 80101f2:	f1b9 0f00 	cmp.w	r9, #0
 80101f6:	dc37      	bgt.n	8010268 <_dtoa_r+0x898>
 80101f8:	9b06      	ldr	r3, [sp, #24]
 80101fa:	2b02      	cmp	r3, #2
 80101fc:	dd34      	ble.n	8010268 <_dtoa_r+0x898>
 80101fe:	46ca      	mov	sl, r9
 8010200:	f1ba 0f00 	cmp.w	sl, #0
 8010204:	d10d      	bne.n	8010222 <_dtoa_r+0x852>
 8010206:	4621      	mov	r1, r4
 8010208:	4653      	mov	r3, sl
 801020a:	2205      	movs	r2, #5
 801020c:	4630      	mov	r0, r6
 801020e:	f000 fa9b 	bl	8010748 <__multadd>
 8010212:	4601      	mov	r1, r0
 8010214:	4604      	mov	r4, r0
 8010216:	4628      	mov	r0, r5
 8010218:	f000 fcb6 	bl	8010b88 <__mcmp>
 801021c:	2800      	cmp	r0, #0
 801021e:	f73f adeb 	bgt.w	800fdf8 <_dtoa_r+0x428>
 8010222:	9b08      	ldr	r3, [sp, #32]
 8010224:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010228:	ea6f 0b03 	mvn.w	fp, r3
 801022c:	f04f 0900 	mov.w	r9, #0
 8010230:	4621      	mov	r1, r4
 8010232:	4630      	mov	r0, r6
 8010234:	f000 fa66 	bl	8010704 <_Bfree>
 8010238:	2f00      	cmp	r7, #0
 801023a:	f43f aea8 	beq.w	800ff8e <_dtoa_r+0x5be>
 801023e:	f1b9 0f00 	cmp.w	r9, #0
 8010242:	d005      	beq.n	8010250 <_dtoa_r+0x880>
 8010244:	45b9      	cmp	r9, r7
 8010246:	d003      	beq.n	8010250 <_dtoa_r+0x880>
 8010248:	4649      	mov	r1, r9
 801024a:	4630      	mov	r0, r6
 801024c:	f000 fa5a 	bl	8010704 <_Bfree>
 8010250:	4639      	mov	r1, r7
 8010252:	4630      	mov	r0, r6
 8010254:	f000 fa56 	bl	8010704 <_Bfree>
 8010258:	e699      	b.n	800ff8e <_dtoa_r+0x5be>
 801025a:	2400      	movs	r4, #0
 801025c:	4627      	mov	r7, r4
 801025e:	e7e0      	b.n	8010222 <_dtoa_r+0x852>
 8010260:	46bb      	mov	fp, r7
 8010262:	4604      	mov	r4, r0
 8010264:	4607      	mov	r7, r0
 8010266:	e5c7      	b.n	800fdf8 <_dtoa_r+0x428>
 8010268:	9b07      	ldr	r3, [sp, #28]
 801026a:	46ca      	mov	sl, r9
 801026c:	2b00      	cmp	r3, #0
 801026e:	f000 8100 	beq.w	8010472 <_dtoa_r+0xaa2>
 8010272:	f1b8 0f00 	cmp.w	r8, #0
 8010276:	dd05      	ble.n	8010284 <_dtoa_r+0x8b4>
 8010278:	4639      	mov	r1, r7
 801027a:	4642      	mov	r2, r8
 801027c:	4630      	mov	r0, r6
 801027e:	f000 fc13 	bl	8010aa8 <__lshift>
 8010282:	4607      	mov	r7, r0
 8010284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010286:	2b00      	cmp	r3, #0
 8010288:	d05d      	beq.n	8010346 <_dtoa_r+0x976>
 801028a:	6879      	ldr	r1, [r7, #4]
 801028c:	4630      	mov	r0, r6
 801028e:	f000 f9f9 	bl	8010684 <_Balloc>
 8010292:	4680      	mov	r8, r0
 8010294:	b928      	cbnz	r0, 80102a2 <_dtoa_r+0x8d2>
 8010296:	4b82      	ldr	r3, [pc, #520]	; (80104a0 <_dtoa_r+0xad0>)
 8010298:	4602      	mov	r2, r0
 801029a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801029e:	f7ff bbaf 	b.w	800fa00 <_dtoa_r+0x30>
 80102a2:	693a      	ldr	r2, [r7, #16]
 80102a4:	3202      	adds	r2, #2
 80102a6:	0092      	lsls	r2, r2, #2
 80102a8:	f107 010c 	add.w	r1, r7, #12
 80102ac:	300c      	adds	r0, #12
 80102ae:	f7fe fd08 	bl	800ecc2 <memcpy>
 80102b2:	2201      	movs	r2, #1
 80102b4:	4641      	mov	r1, r8
 80102b6:	4630      	mov	r0, r6
 80102b8:	f000 fbf6 	bl	8010aa8 <__lshift>
 80102bc:	9b01      	ldr	r3, [sp, #4]
 80102be:	3301      	adds	r3, #1
 80102c0:	9304      	str	r3, [sp, #16]
 80102c2:	9b01      	ldr	r3, [sp, #4]
 80102c4:	4453      	add	r3, sl
 80102c6:	9308      	str	r3, [sp, #32]
 80102c8:	9b02      	ldr	r3, [sp, #8]
 80102ca:	f003 0301 	and.w	r3, r3, #1
 80102ce:	46b9      	mov	r9, r7
 80102d0:	9307      	str	r3, [sp, #28]
 80102d2:	4607      	mov	r7, r0
 80102d4:	9b04      	ldr	r3, [sp, #16]
 80102d6:	4621      	mov	r1, r4
 80102d8:	3b01      	subs	r3, #1
 80102da:	4628      	mov	r0, r5
 80102dc:	9302      	str	r3, [sp, #8]
 80102de:	f7ff faeb 	bl	800f8b8 <quorem>
 80102e2:	4603      	mov	r3, r0
 80102e4:	3330      	adds	r3, #48	; 0x30
 80102e6:	9005      	str	r0, [sp, #20]
 80102e8:	4649      	mov	r1, r9
 80102ea:	4628      	mov	r0, r5
 80102ec:	9309      	str	r3, [sp, #36]	; 0x24
 80102ee:	f000 fc4b 	bl	8010b88 <__mcmp>
 80102f2:	463a      	mov	r2, r7
 80102f4:	4682      	mov	sl, r0
 80102f6:	4621      	mov	r1, r4
 80102f8:	4630      	mov	r0, r6
 80102fa:	f000 fc61 	bl	8010bc0 <__mdiff>
 80102fe:	68c2      	ldr	r2, [r0, #12]
 8010300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010302:	4680      	mov	r8, r0
 8010304:	bb0a      	cbnz	r2, 801034a <_dtoa_r+0x97a>
 8010306:	4601      	mov	r1, r0
 8010308:	4628      	mov	r0, r5
 801030a:	f000 fc3d 	bl	8010b88 <__mcmp>
 801030e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010310:	4602      	mov	r2, r0
 8010312:	4641      	mov	r1, r8
 8010314:	4630      	mov	r0, r6
 8010316:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801031a:	f000 f9f3 	bl	8010704 <_Bfree>
 801031e:	9b06      	ldr	r3, [sp, #24]
 8010320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010322:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010326:	ea43 0102 	orr.w	r1, r3, r2
 801032a:	9b07      	ldr	r3, [sp, #28]
 801032c:	430b      	orrs	r3, r1
 801032e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010330:	d10d      	bne.n	801034e <_dtoa_r+0x97e>
 8010332:	2b39      	cmp	r3, #57	; 0x39
 8010334:	d029      	beq.n	801038a <_dtoa_r+0x9ba>
 8010336:	f1ba 0f00 	cmp.w	sl, #0
 801033a:	dd01      	ble.n	8010340 <_dtoa_r+0x970>
 801033c:	9b05      	ldr	r3, [sp, #20]
 801033e:	3331      	adds	r3, #49	; 0x31
 8010340:	9a02      	ldr	r2, [sp, #8]
 8010342:	7013      	strb	r3, [r2, #0]
 8010344:	e774      	b.n	8010230 <_dtoa_r+0x860>
 8010346:	4638      	mov	r0, r7
 8010348:	e7b8      	b.n	80102bc <_dtoa_r+0x8ec>
 801034a:	2201      	movs	r2, #1
 801034c:	e7e1      	b.n	8010312 <_dtoa_r+0x942>
 801034e:	f1ba 0f00 	cmp.w	sl, #0
 8010352:	db06      	blt.n	8010362 <_dtoa_r+0x992>
 8010354:	9906      	ldr	r1, [sp, #24]
 8010356:	ea41 0a0a 	orr.w	sl, r1, sl
 801035a:	9907      	ldr	r1, [sp, #28]
 801035c:	ea5a 0101 	orrs.w	r1, sl, r1
 8010360:	d120      	bne.n	80103a4 <_dtoa_r+0x9d4>
 8010362:	2a00      	cmp	r2, #0
 8010364:	ddec      	ble.n	8010340 <_dtoa_r+0x970>
 8010366:	4629      	mov	r1, r5
 8010368:	2201      	movs	r2, #1
 801036a:	4630      	mov	r0, r6
 801036c:	9304      	str	r3, [sp, #16]
 801036e:	f000 fb9b 	bl	8010aa8 <__lshift>
 8010372:	4621      	mov	r1, r4
 8010374:	4605      	mov	r5, r0
 8010376:	f000 fc07 	bl	8010b88 <__mcmp>
 801037a:	2800      	cmp	r0, #0
 801037c:	9b04      	ldr	r3, [sp, #16]
 801037e:	dc02      	bgt.n	8010386 <_dtoa_r+0x9b6>
 8010380:	d1de      	bne.n	8010340 <_dtoa_r+0x970>
 8010382:	07da      	lsls	r2, r3, #31
 8010384:	d5dc      	bpl.n	8010340 <_dtoa_r+0x970>
 8010386:	2b39      	cmp	r3, #57	; 0x39
 8010388:	d1d8      	bne.n	801033c <_dtoa_r+0x96c>
 801038a:	9a02      	ldr	r2, [sp, #8]
 801038c:	2339      	movs	r3, #57	; 0x39
 801038e:	7013      	strb	r3, [r2, #0]
 8010390:	4643      	mov	r3, r8
 8010392:	4698      	mov	r8, r3
 8010394:	3b01      	subs	r3, #1
 8010396:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801039a:	2a39      	cmp	r2, #57	; 0x39
 801039c:	d051      	beq.n	8010442 <_dtoa_r+0xa72>
 801039e:	3201      	adds	r2, #1
 80103a0:	701a      	strb	r2, [r3, #0]
 80103a2:	e745      	b.n	8010230 <_dtoa_r+0x860>
 80103a4:	2a00      	cmp	r2, #0
 80103a6:	dd03      	ble.n	80103b0 <_dtoa_r+0x9e0>
 80103a8:	2b39      	cmp	r3, #57	; 0x39
 80103aa:	d0ee      	beq.n	801038a <_dtoa_r+0x9ba>
 80103ac:	3301      	adds	r3, #1
 80103ae:	e7c7      	b.n	8010340 <_dtoa_r+0x970>
 80103b0:	9a04      	ldr	r2, [sp, #16]
 80103b2:	9908      	ldr	r1, [sp, #32]
 80103b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80103b8:	428a      	cmp	r2, r1
 80103ba:	d02b      	beq.n	8010414 <_dtoa_r+0xa44>
 80103bc:	4629      	mov	r1, r5
 80103be:	2300      	movs	r3, #0
 80103c0:	220a      	movs	r2, #10
 80103c2:	4630      	mov	r0, r6
 80103c4:	f000 f9c0 	bl	8010748 <__multadd>
 80103c8:	45b9      	cmp	r9, r7
 80103ca:	4605      	mov	r5, r0
 80103cc:	f04f 0300 	mov.w	r3, #0
 80103d0:	f04f 020a 	mov.w	r2, #10
 80103d4:	4649      	mov	r1, r9
 80103d6:	4630      	mov	r0, r6
 80103d8:	d107      	bne.n	80103ea <_dtoa_r+0xa1a>
 80103da:	f000 f9b5 	bl	8010748 <__multadd>
 80103de:	4681      	mov	r9, r0
 80103e0:	4607      	mov	r7, r0
 80103e2:	9b04      	ldr	r3, [sp, #16]
 80103e4:	3301      	adds	r3, #1
 80103e6:	9304      	str	r3, [sp, #16]
 80103e8:	e774      	b.n	80102d4 <_dtoa_r+0x904>
 80103ea:	f000 f9ad 	bl	8010748 <__multadd>
 80103ee:	4639      	mov	r1, r7
 80103f0:	4681      	mov	r9, r0
 80103f2:	2300      	movs	r3, #0
 80103f4:	220a      	movs	r2, #10
 80103f6:	4630      	mov	r0, r6
 80103f8:	f000 f9a6 	bl	8010748 <__multadd>
 80103fc:	4607      	mov	r7, r0
 80103fe:	e7f0      	b.n	80103e2 <_dtoa_r+0xa12>
 8010400:	f1ba 0f00 	cmp.w	sl, #0
 8010404:	9a01      	ldr	r2, [sp, #4]
 8010406:	bfcc      	ite	gt
 8010408:	46d0      	movgt	r8, sl
 801040a:	f04f 0801 	movle.w	r8, #1
 801040e:	4490      	add	r8, r2
 8010410:	f04f 0900 	mov.w	r9, #0
 8010414:	4629      	mov	r1, r5
 8010416:	2201      	movs	r2, #1
 8010418:	4630      	mov	r0, r6
 801041a:	9302      	str	r3, [sp, #8]
 801041c:	f000 fb44 	bl	8010aa8 <__lshift>
 8010420:	4621      	mov	r1, r4
 8010422:	4605      	mov	r5, r0
 8010424:	f000 fbb0 	bl	8010b88 <__mcmp>
 8010428:	2800      	cmp	r0, #0
 801042a:	dcb1      	bgt.n	8010390 <_dtoa_r+0x9c0>
 801042c:	d102      	bne.n	8010434 <_dtoa_r+0xa64>
 801042e:	9b02      	ldr	r3, [sp, #8]
 8010430:	07db      	lsls	r3, r3, #31
 8010432:	d4ad      	bmi.n	8010390 <_dtoa_r+0x9c0>
 8010434:	4643      	mov	r3, r8
 8010436:	4698      	mov	r8, r3
 8010438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801043c:	2a30      	cmp	r2, #48	; 0x30
 801043e:	d0fa      	beq.n	8010436 <_dtoa_r+0xa66>
 8010440:	e6f6      	b.n	8010230 <_dtoa_r+0x860>
 8010442:	9a01      	ldr	r2, [sp, #4]
 8010444:	429a      	cmp	r2, r3
 8010446:	d1a4      	bne.n	8010392 <_dtoa_r+0x9c2>
 8010448:	f10b 0b01 	add.w	fp, fp, #1
 801044c:	2331      	movs	r3, #49	; 0x31
 801044e:	e778      	b.n	8010342 <_dtoa_r+0x972>
 8010450:	4b14      	ldr	r3, [pc, #80]	; (80104a4 <_dtoa_r+0xad4>)
 8010452:	f7ff bb27 	b.w	800faa4 <_dtoa_r+0xd4>
 8010456:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010458:	2b00      	cmp	r3, #0
 801045a:	f47f ab03 	bne.w	800fa64 <_dtoa_r+0x94>
 801045e:	4b12      	ldr	r3, [pc, #72]	; (80104a8 <_dtoa_r+0xad8>)
 8010460:	f7ff bb20 	b.w	800faa4 <_dtoa_r+0xd4>
 8010464:	f1ba 0f00 	cmp.w	sl, #0
 8010468:	dc03      	bgt.n	8010472 <_dtoa_r+0xaa2>
 801046a:	9b06      	ldr	r3, [sp, #24]
 801046c:	2b02      	cmp	r3, #2
 801046e:	f73f aec7 	bgt.w	8010200 <_dtoa_r+0x830>
 8010472:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010476:	4621      	mov	r1, r4
 8010478:	4628      	mov	r0, r5
 801047a:	f7ff fa1d 	bl	800f8b8 <quorem>
 801047e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010482:	f808 3b01 	strb.w	r3, [r8], #1
 8010486:	9a01      	ldr	r2, [sp, #4]
 8010488:	eba8 0202 	sub.w	r2, r8, r2
 801048c:	4592      	cmp	sl, r2
 801048e:	ddb7      	ble.n	8010400 <_dtoa_r+0xa30>
 8010490:	4629      	mov	r1, r5
 8010492:	2300      	movs	r3, #0
 8010494:	220a      	movs	r2, #10
 8010496:	4630      	mov	r0, r6
 8010498:	f000 f956 	bl	8010748 <__multadd>
 801049c:	4605      	mov	r5, r0
 801049e:	e7ea      	b.n	8010476 <_dtoa_r+0xaa6>
 80104a0:	08011f7b 	.word	0x08011f7b
 80104a4:	08011ed8 	.word	0x08011ed8
 80104a8:	08011efc 	.word	0x08011efc

080104ac <__sflush_r>:
 80104ac:	898a      	ldrh	r2, [r1, #12]
 80104ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b2:	4605      	mov	r5, r0
 80104b4:	0710      	lsls	r0, r2, #28
 80104b6:	460c      	mov	r4, r1
 80104b8:	d458      	bmi.n	801056c <__sflush_r+0xc0>
 80104ba:	684b      	ldr	r3, [r1, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	dc05      	bgt.n	80104cc <__sflush_r+0x20>
 80104c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	dc02      	bgt.n	80104cc <__sflush_r+0x20>
 80104c6:	2000      	movs	r0, #0
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104ce:	2e00      	cmp	r6, #0
 80104d0:	d0f9      	beq.n	80104c6 <__sflush_r+0x1a>
 80104d2:	2300      	movs	r3, #0
 80104d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104d8:	682f      	ldr	r7, [r5, #0]
 80104da:	602b      	str	r3, [r5, #0]
 80104dc:	d032      	beq.n	8010544 <__sflush_r+0x98>
 80104de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104e0:	89a3      	ldrh	r3, [r4, #12]
 80104e2:	075a      	lsls	r2, r3, #29
 80104e4:	d505      	bpl.n	80104f2 <__sflush_r+0x46>
 80104e6:	6863      	ldr	r3, [r4, #4]
 80104e8:	1ac0      	subs	r0, r0, r3
 80104ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104ec:	b10b      	cbz	r3, 80104f2 <__sflush_r+0x46>
 80104ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104f0:	1ac0      	subs	r0, r0, r3
 80104f2:	2300      	movs	r3, #0
 80104f4:	4602      	mov	r2, r0
 80104f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104f8:	6a21      	ldr	r1, [r4, #32]
 80104fa:	4628      	mov	r0, r5
 80104fc:	47b0      	blx	r6
 80104fe:	1c43      	adds	r3, r0, #1
 8010500:	89a3      	ldrh	r3, [r4, #12]
 8010502:	d106      	bne.n	8010512 <__sflush_r+0x66>
 8010504:	6829      	ldr	r1, [r5, #0]
 8010506:	291d      	cmp	r1, #29
 8010508:	d82c      	bhi.n	8010564 <__sflush_r+0xb8>
 801050a:	4a2a      	ldr	r2, [pc, #168]	; (80105b4 <__sflush_r+0x108>)
 801050c:	40ca      	lsrs	r2, r1
 801050e:	07d6      	lsls	r6, r2, #31
 8010510:	d528      	bpl.n	8010564 <__sflush_r+0xb8>
 8010512:	2200      	movs	r2, #0
 8010514:	6062      	str	r2, [r4, #4]
 8010516:	04d9      	lsls	r1, r3, #19
 8010518:	6922      	ldr	r2, [r4, #16]
 801051a:	6022      	str	r2, [r4, #0]
 801051c:	d504      	bpl.n	8010528 <__sflush_r+0x7c>
 801051e:	1c42      	adds	r2, r0, #1
 8010520:	d101      	bne.n	8010526 <__sflush_r+0x7a>
 8010522:	682b      	ldr	r3, [r5, #0]
 8010524:	b903      	cbnz	r3, 8010528 <__sflush_r+0x7c>
 8010526:	6560      	str	r0, [r4, #84]	; 0x54
 8010528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801052a:	602f      	str	r7, [r5, #0]
 801052c:	2900      	cmp	r1, #0
 801052e:	d0ca      	beq.n	80104c6 <__sflush_r+0x1a>
 8010530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010534:	4299      	cmp	r1, r3
 8010536:	d002      	beq.n	801053e <__sflush_r+0x92>
 8010538:	4628      	mov	r0, r5
 801053a:	f000 fc3d 	bl	8010db8 <_free_r>
 801053e:	2000      	movs	r0, #0
 8010540:	6360      	str	r0, [r4, #52]	; 0x34
 8010542:	e7c1      	b.n	80104c8 <__sflush_r+0x1c>
 8010544:	6a21      	ldr	r1, [r4, #32]
 8010546:	2301      	movs	r3, #1
 8010548:	4628      	mov	r0, r5
 801054a:	47b0      	blx	r6
 801054c:	1c41      	adds	r1, r0, #1
 801054e:	d1c7      	bne.n	80104e0 <__sflush_r+0x34>
 8010550:	682b      	ldr	r3, [r5, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d0c4      	beq.n	80104e0 <__sflush_r+0x34>
 8010556:	2b1d      	cmp	r3, #29
 8010558:	d001      	beq.n	801055e <__sflush_r+0xb2>
 801055a:	2b16      	cmp	r3, #22
 801055c:	d101      	bne.n	8010562 <__sflush_r+0xb6>
 801055e:	602f      	str	r7, [r5, #0]
 8010560:	e7b1      	b.n	80104c6 <__sflush_r+0x1a>
 8010562:	89a3      	ldrh	r3, [r4, #12]
 8010564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010568:	81a3      	strh	r3, [r4, #12]
 801056a:	e7ad      	b.n	80104c8 <__sflush_r+0x1c>
 801056c:	690f      	ldr	r7, [r1, #16]
 801056e:	2f00      	cmp	r7, #0
 8010570:	d0a9      	beq.n	80104c6 <__sflush_r+0x1a>
 8010572:	0793      	lsls	r3, r2, #30
 8010574:	680e      	ldr	r6, [r1, #0]
 8010576:	bf08      	it	eq
 8010578:	694b      	ldreq	r3, [r1, #20]
 801057a:	600f      	str	r7, [r1, #0]
 801057c:	bf18      	it	ne
 801057e:	2300      	movne	r3, #0
 8010580:	eba6 0807 	sub.w	r8, r6, r7
 8010584:	608b      	str	r3, [r1, #8]
 8010586:	f1b8 0f00 	cmp.w	r8, #0
 801058a:	dd9c      	ble.n	80104c6 <__sflush_r+0x1a>
 801058c:	6a21      	ldr	r1, [r4, #32]
 801058e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010590:	4643      	mov	r3, r8
 8010592:	463a      	mov	r2, r7
 8010594:	4628      	mov	r0, r5
 8010596:	47b0      	blx	r6
 8010598:	2800      	cmp	r0, #0
 801059a:	dc06      	bgt.n	80105aa <__sflush_r+0xfe>
 801059c:	89a3      	ldrh	r3, [r4, #12]
 801059e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105a2:	81a3      	strh	r3, [r4, #12]
 80105a4:	f04f 30ff 	mov.w	r0, #4294967295
 80105a8:	e78e      	b.n	80104c8 <__sflush_r+0x1c>
 80105aa:	4407      	add	r7, r0
 80105ac:	eba8 0800 	sub.w	r8, r8, r0
 80105b0:	e7e9      	b.n	8010586 <__sflush_r+0xda>
 80105b2:	bf00      	nop
 80105b4:	20400001 	.word	0x20400001

080105b8 <_fflush_r>:
 80105b8:	b538      	push	{r3, r4, r5, lr}
 80105ba:	690b      	ldr	r3, [r1, #16]
 80105bc:	4605      	mov	r5, r0
 80105be:	460c      	mov	r4, r1
 80105c0:	b913      	cbnz	r3, 80105c8 <_fflush_r+0x10>
 80105c2:	2500      	movs	r5, #0
 80105c4:	4628      	mov	r0, r5
 80105c6:	bd38      	pop	{r3, r4, r5, pc}
 80105c8:	b118      	cbz	r0, 80105d2 <_fflush_r+0x1a>
 80105ca:	6983      	ldr	r3, [r0, #24]
 80105cc:	b90b      	cbnz	r3, 80105d2 <_fflush_r+0x1a>
 80105ce:	f7fe fab3 	bl	800eb38 <__sinit>
 80105d2:	4b14      	ldr	r3, [pc, #80]	; (8010624 <_fflush_r+0x6c>)
 80105d4:	429c      	cmp	r4, r3
 80105d6:	d11b      	bne.n	8010610 <_fflush_r+0x58>
 80105d8:	686c      	ldr	r4, [r5, #4]
 80105da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d0ef      	beq.n	80105c2 <_fflush_r+0xa>
 80105e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105e4:	07d0      	lsls	r0, r2, #31
 80105e6:	d404      	bmi.n	80105f2 <_fflush_r+0x3a>
 80105e8:	0599      	lsls	r1, r3, #22
 80105ea:	d402      	bmi.n	80105f2 <_fflush_r+0x3a>
 80105ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105ee:	f7fe fb66 	bl	800ecbe <__retarget_lock_acquire_recursive>
 80105f2:	4628      	mov	r0, r5
 80105f4:	4621      	mov	r1, r4
 80105f6:	f7ff ff59 	bl	80104ac <__sflush_r>
 80105fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105fc:	07da      	lsls	r2, r3, #31
 80105fe:	4605      	mov	r5, r0
 8010600:	d4e0      	bmi.n	80105c4 <_fflush_r+0xc>
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	059b      	lsls	r3, r3, #22
 8010606:	d4dd      	bmi.n	80105c4 <_fflush_r+0xc>
 8010608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801060a:	f7fe fb59 	bl	800ecc0 <__retarget_lock_release_recursive>
 801060e:	e7d9      	b.n	80105c4 <_fflush_r+0xc>
 8010610:	4b05      	ldr	r3, [pc, #20]	; (8010628 <_fflush_r+0x70>)
 8010612:	429c      	cmp	r4, r3
 8010614:	d101      	bne.n	801061a <_fflush_r+0x62>
 8010616:	68ac      	ldr	r4, [r5, #8]
 8010618:	e7df      	b.n	80105da <_fflush_r+0x22>
 801061a:	4b04      	ldr	r3, [pc, #16]	; (801062c <_fflush_r+0x74>)
 801061c:	429c      	cmp	r4, r3
 801061e:	bf08      	it	eq
 8010620:	68ec      	ldreq	r4, [r5, #12]
 8010622:	e7da      	b.n	80105da <_fflush_r+0x22>
 8010624:	08011e84 	.word	0x08011e84
 8010628:	08011ea4 	.word	0x08011ea4
 801062c:	08011e64 	.word	0x08011e64

08010630 <_localeconv_r>:
 8010630:	4800      	ldr	r0, [pc, #0]	; (8010634 <_localeconv_r+0x4>)
 8010632:	4770      	bx	lr
 8010634:	200001bc 	.word	0x200001bc

08010638 <_lseek_r>:
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4d07      	ldr	r5, [pc, #28]	; (8010658 <_lseek_r+0x20>)
 801063c:	4604      	mov	r4, r0
 801063e:	4608      	mov	r0, r1
 8010640:	4611      	mov	r1, r2
 8010642:	2200      	movs	r2, #0
 8010644:	602a      	str	r2, [r5, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	f7f6 fec6 	bl	80073d8 <_lseek>
 801064c:	1c43      	adds	r3, r0, #1
 801064e:	d102      	bne.n	8010656 <_lseek_r+0x1e>
 8010650:	682b      	ldr	r3, [r5, #0]
 8010652:	b103      	cbz	r3, 8010656 <_lseek_r+0x1e>
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	bd38      	pop	{r3, r4, r5, pc}
 8010658:	20005f24 	.word	0x20005f24

0801065c <malloc>:
 801065c:	4b02      	ldr	r3, [pc, #8]	; (8010668 <malloc+0xc>)
 801065e:	4601      	mov	r1, r0
 8010660:	6818      	ldr	r0, [r3, #0]
 8010662:	f7fe bb65 	b.w	800ed30 <_malloc_r>
 8010666:	bf00      	nop
 8010668:	20000068 	.word	0x20000068

0801066c <__malloc_lock>:
 801066c:	4801      	ldr	r0, [pc, #4]	; (8010674 <__malloc_lock+0x8>)
 801066e:	f7fe bb26 	b.w	800ecbe <__retarget_lock_acquire_recursive>
 8010672:	bf00      	nop
 8010674:	20005f18 	.word	0x20005f18

08010678 <__malloc_unlock>:
 8010678:	4801      	ldr	r0, [pc, #4]	; (8010680 <__malloc_unlock+0x8>)
 801067a:	f7fe bb21 	b.w	800ecc0 <__retarget_lock_release_recursive>
 801067e:	bf00      	nop
 8010680:	20005f18 	.word	0x20005f18

08010684 <_Balloc>:
 8010684:	b570      	push	{r4, r5, r6, lr}
 8010686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010688:	4604      	mov	r4, r0
 801068a:	460d      	mov	r5, r1
 801068c:	b976      	cbnz	r6, 80106ac <_Balloc+0x28>
 801068e:	2010      	movs	r0, #16
 8010690:	f7ff ffe4 	bl	801065c <malloc>
 8010694:	4602      	mov	r2, r0
 8010696:	6260      	str	r0, [r4, #36]	; 0x24
 8010698:	b920      	cbnz	r0, 80106a4 <_Balloc+0x20>
 801069a:	4b18      	ldr	r3, [pc, #96]	; (80106fc <_Balloc+0x78>)
 801069c:	4818      	ldr	r0, [pc, #96]	; (8010700 <_Balloc+0x7c>)
 801069e:	2166      	movs	r1, #102	; 0x66
 80106a0:	f000 fe4a 	bl	8011338 <__assert_func>
 80106a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106a8:	6006      	str	r6, [r0, #0]
 80106aa:	60c6      	str	r6, [r0, #12]
 80106ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80106ae:	68f3      	ldr	r3, [r6, #12]
 80106b0:	b183      	cbz	r3, 80106d4 <_Balloc+0x50>
 80106b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106ba:	b9b8      	cbnz	r0, 80106ec <_Balloc+0x68>
 80106bc:	2101      	movs	r1, #1
 80106be:	fa01 f605 	lsl.w	r6, r1, r5
 80106c2:	1d72      	adds	r2, r6, #5
 80106c4:	0092      	lsls	r2, r2, #2
 80106c6:	4620      	mov	r0, r4
 80106c8:	f000 fb60 	bl	8010d8c <_calloc_r>
 80106cc:	b160      	cbz	r0, 80106e8 <_Balloc+0x64>
 80106ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80106d2:	e00e      	b.n	80106f2 <_Balloc+0x6e>
 80106d4:	2221      	movs	r2, #33	; 0x21
 80106d6:	2104      	movs	r1, #4
 80106d8:	4620      	mov	r0, r4
 80106da:	f000 fb57 	bl	8010d8c <_calloc_r>
 80106de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106e0:	60f0      	str	r0, [r6, #12]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d1e4      	bne.n	80106b2 <_Balloc+0x2e>
 80106e8:	2000      	movs	r0, #0
 80106ea:	bd70      	pop	{r4, r5, r6, pc}
 80106ec:	6802      	ldr	r2, [r0, #0]
 80106ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106f2:	2300      	movs	r3, #0
 80106f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106f8:	e7f7      	b.n	80106ea <_Balloc+0x66>
 80106fa:	bf00      	nop
 80106fc:	08011f09 	.word	0x08011f09
 8010700:	08011f8c 	.word	0x08011f8c

08010704 <_Bfree>:
 8010704:	b570      	push	{r4, r5, r6, lr}
 8010706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010708:	4605      	mov	r5, r0
 801070a:	460c      	mov	r4, r1
 801070c:	b976      	cbnz	r6, 801072c <_Bfree+0x28>
 801070e:	2010      	movs	r0, #16
 8010710:	f7ff ffa4 	bl	801065c <malloc>
 8010714:	4602      	mov	r2, r0
 8010716:	6268      	str	r0, [r5, #36]	; 0x24
 8010718:	b920      	cbnz	r0, 8010724 <_Bfree+0x20>
 801071a:	4b09      	ldr	r3, [pc, #36]	; (8010740 <_Bfree+0x3c>)
 801071c:	4809      	ldr	r0, [pc, #36]	; (8010744 <_Bfree+0x40>)
 801071e:	218a      	movs	r1, #138	; 0x8a
 8010720:	f000 fe0a 	bl	8011338 <__assert_func>
 8010724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010728:	6006      	str	r6, [r0, #0]
 801072a:	60c6      	str	r6, [r0, #12]
 801072c:	b13c      	cbz	r4, 801073e <_Bfree+0x3a>
 801072e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010730:	6862      	ldr	r2, [r4, #4]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010738:	6021      	str	r1, [r4, #0]
 801073a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801073e:	bd70      	pop	{r4, r5, r6, pc}
 8010740:	08011f09 	.word	0x08011f09
 8010744:	08011f8c 	.word	0x08011f8c

08010748 <__multadd>:
 8010748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074c:	690d      	ldr	r5, [r1, #16]
 801074e:	4607      	mov	r7, r0
 8010750:	460c      	mov	r4, r1
 8010752:	461e      	mov	r6, r3
 8010754:	f101 0c14 	add.w	ip, r1, #20
 8010758:	2000      	movs	r0, #0
 801075a:	f8dc 3000 	ldr.w	r3, [ip]
 801075e:	b299      	uxth	r1, r3
 8010760:	fb02 6101 	mla	r1, r2, r1, r6
 8010764:	0c1e      	lsrs	r6, r3, #16
 8010766:	0c0b      	lsrs	r3, r1, #16
 8010768:	fb02 3306 	mla	r3, r2, r6, r3
 801076c:	b289      	uxth	r1, r1
 801076e:	3001      	adds	r0, #1
 8010770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010774:	4285      	cmp	r5, r0
 8010776:	f84c 1b04 	str.w	r1, [ip], #4
 801077a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801077e:	dcec      	bgt.n	801075a <__multadd+0x12>
 8010780:	b30e      	cbz	r6, 80107c6 <__multadd+0x7e>
 8010782:	68a3      	ldr	r3, [r4, #8]
 8010784:	42ab      	cmp	r3, r5
 8010786:	dc19      	bgt.n	80107bc <__multadd+0x74>
 8010788:	6861      	ldr	r1, [r4, #4]
 801078a:	4638      	mov	r0, r7
 801078c:	3101      	adds	r1, #1
 801078e:	f7ff ff79 	bl	8010684 <_Balloc>
 8010792:	4680      	mov	r8, r0
 8010794:	b928      	cbnz	r0, 80107a2 <__multadd+0x5a>
 8010796:	4602      	mov	r2, r0
 8010798:	4b0c      	ldr	r3, [pc, #48]	; (80107cc <__multadd+0x84>)
 801079a:	480d      	ldr	r0, [pc, #52]	; (80107d0 <__multadd+0x88>)
 801079c:	21b5      	movs	r1, #181	; 0xb5
 801079e:	f000 fdcb 	bl	8011338 <__assert_func>
 80107a2:	6922      	ldr	r2, [r4, #16]
 80107a4:	3202      	adds	r2, #2
 80107a6:	f104 010c 	add.w	r1, r4, #12
 80107aa:	0092      	lsls	r2, r2, #2
 80107ac:	300c      	adds	r0, #12
 80107ae:	f7fe fa88 	bl	800ecc2 <memcpy>
 80107b2:	4621      	mov	r1, r4
 80107b4:	4638      	mov	r0, r7
 80107b6:	f7ff ffa5 	bl	8010704 <_Bfree>
 80107ba:	4644      	mov	r4, r8
 80107bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80107c0:	3501      	adds	r5, #1
 80107c2:	615e      	str	r6, [r3, #20]
 80107c4:	6125      	str	r5, [r4, #16]
 80107c6:	4620      	mov	r0, r4
 80107c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107cc:	08011f7b 	.word	0x08011f7b
 80107d0:	08011f8c 	.word	0x08011f8c

080107d4 <__hi0bits>:
 80107d4:	0c03      	lsrs	r3, r0, #16
 80107d6:	041b      	lsls	r3, r3, #16
 80107d8:	b9d3      	cbnz	r3, 8010810 <__hi0bits+0x3c>
 80107da:	0400      	lsls	r0, r0, #16
 80107dc:	2310      	movs	r3, #16
 80107de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80107e2:	bf04      	itt	eq
 80107e4:	0200      	lsleq	r0, r0, #8
 80107e6:	3308      	addeq	r3, #8
 80107e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80107ec:	bf04      	itt	eq
 80107ee:	0100      	lsleq	r0, r0, #4
 80107f0:	3304      	addeq	r3, #4
 80107f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80107f6:	bf04      	itt	eq
 80107f8:	0080      	lsleq	r0, r0, #2
 80107fa:	3302      	addeq	r3, #2
 80107fc:	2800      	cmp	r0, #0
 80107fe:	db05      	blt.n	801080c <__hi0bits+0x38>
 8010800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010804:	f103 0301 	add.w	r3, r3, #1
 8010808:	bf08      	it	eq
 801080a:	2320      	moveq	r3, #32
 801080c:	4618      	mov	r0, r3
 801080e:	4770      	bx	lr
 8010810:	2300      	movs	r3, #0
 8010812:	e7e4      	b.n	80107de <__hi0bits+0xa>

08010814 <__lo0bits>:
 8010814:	6803      	ldr	r3, [r0, #0]
 8010816:	f013 0207 	ands.w	r2, r3, #7
 801081a:	4601      	mov	r1, r0
 801081c:	d00b      	beq.n	8010836 <__lo0bits+0x22>
 801081e:	07da      	lsls	r2, r3, #31
 8010820:	d423      	bmi.n	801086a <__lo0bits+0x56>
 8010822:	0798      	lsls	r0, r3, #30
 8010824:	bf49      	itett	mi
 8010826:	085b      	lsrmi	r3, r3, #1
 8010828:	089b      	lsrpl	r3, r3, #2
 801082a:	2001      	movmi	r0, #1
 801082c:	600b      	strmi	r3, [r1, #0]
 801082e:	bf5c      	itt	pl
 8010830:	600b      	strpl	r3, [r1, #0]
 8010832:	2002      	movpl	r0, #2
 8010834:	4770      	bx	lr
 8010836:	b298      	uxth	r0, r3
 8010838:	b9a8      	cbnz	r0, 8010866 <__lo0bits+0x52>
 801083a:	0c1b      	lsrs	r3, r3, #16
 801083c:	2010      	movs	r0, #16
 801083e:	b2da      	uxtb	r2, r3
 8010840:	b90a      	cbnz	r2, 8010846 <__lo0bits+0x32>
 8010842:	3008      	adds	r0, #8
 8010844:	0a1b      	lsrs	r3, r3, #8
 8010846:	071a      	lsls	r2, r3, #28
 8010848:	bf04      	itt	eq
 801084a:	091b      	lsreq	r3, r3, #4
 801084c:	3004      	addeq	r0, #4
 801084e:	079a      	lsls	r2, r3, #30
 8010850:	bf04      	itt	eq
 8010852:	089b      	lsreq	r3, r3, #2
 8010854:	3002      	addeq	r0, #2
 8010856:	07da      	lsls	r2, r3, #31
 8010858:	d403      	bmi.n	8010862 <__lo0bits+0x4e>
 801085a:	085b      	lsrs	r3, r3, #1
 801085c:	f100 0001 	add.w	r0, r0, #1
 8010860:	d005      	beq.n	801086e <__lo0bits+0x5a>
 8010862:	600b      	str	r3, [r1, #0]
 8010864:	4770      	bx	lr
 8010866:	4610      	mov	r0, r2
 8010868:	e7e9      	b.n	801083e <__lo0bits+0x2a>
 801086a:	2000      	movs	r0, #0
 801086c:	4770      	bx	lr
 801086e:	2020      	movs	r0, #32
 8010870:	4770      	bx	lr
	...

08010874 <__i2b>:
 8010874:	b510      	push	{r4, lr}
 8010876:	460c      	mov	r4, r1
 8010878:	2101      	movs	r1, #1
 801087a:	f7ff ff03 	bl	8010684 <_Balloc>
 801087e:	4602      	mov	r2, r0
 8010880:	b928      	cbnz	r0, 801088e <__i2b+0x1a>
 8010882:	4b05      	ldr	r3, [pc, #20]	; (8010898 <__i2b+0x24>)
 8010884:	4805      	ldr	r0, [pc, #20]	; (801089c <__i2b+0x28>)
 8010886:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801088a:	f000 fd55 	bl	8011338 <__assert_func>
 801088e:	2301      	movs	r3, #1
 8010890:	6144      	str	r4, [r0, #20]
 8010892:	6103      	str	r3, [r0, #16]
 8010894:	bd10      	pop	{r4, pc}
 8010896:	bf00      	nop
 8010898:	08011f7b 	.word	0x08011f7b
 801089c:	08011f8c 	.word	0x08011f8c

080108a0 <__multiply>:
 80108a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a4:	4691      	mov	r9, r2
 80108a6:	690a      	ldr	r2, [r1, #16]
 80108a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	bfb8      	it	lt
 80108b0:	460b      	movlt	r3, r1
 80108b2:	460c      	mov	r4, r1
 80108b4:	bfbc      	itt	lt
 80108b6:	464c      	movlt	r4, r9
 80108b8:	4699      	movlt	r9, r3
 80108ba:	6927      	ldr	r7, [r4, #16]
 80108bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80108c0:	68a3      	ldr	r3, [r4, #8]
 80108c2:	6861      	ldr	r1, [r4, #4]
 80108c4:	eb07 060a 	add.w	r6, r7, sl
 80108c8:	42b3      	cmp	r3, r6
 80108ca:	b085      	sub	sp, #20
 80108cc:	bfb8      	it	lt
 80108ce:	3101      	addlt	r1, #1
 80108d0:	f7ff fed8 	bl	8010684 <_Balloc>
 80108d4:	b930      	cbnz	r0, 80108e4 <__multiply+0x44>
 80108d6:	4602      	mov	r2, r0
 80108d8:	4b44      	ldr	r3, [pc, #272]	; (80109ec <__multiply+0x14c>)
 80108da:	4845      	ldr	r0, [pc, #276]	; (80109f0 <__multiply+0x150>)
 80108dc:	f240 115d 	movw	r1, #349	; 0x15d
 80108e0:	f000 fd2a 	bl	8011338 <__assert_func>
 80108e4:	f100 0514 	add.w	r5, r0, #20
 80108e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80108ec:	462b      	mov	r3, r5
 80108ee:	2200      	movs	r2, #0
 80108f0:	4543      	cmp	r3, r8
 80108f2:	d321      	bcc.n	8010938 <__multiply+0x98>
 80108f4:	f104 0314 	add.w	r3, r4, #20
 80108f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80108fc:	f109 0314 	add.w	r3, r9, #20
 8010900:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010904:	9202      	str	r2, [sp, #8]
 8010906:	1b3a      	subs	r2, r7, r4
 8010908:	3a15      	subs	r2, #21
 801090a:	f022 0203 	bic.w	r2, r2, #3
 801090e:	3204      	adds	r2, #4
 8010910:	f104 0115 	add.w	r1, r4, #21
 8010914:	428f      	cmp	r7, r1
 8010916:	bf38      	it	cc
 8010918:	2204      	movcc	r2, #4
 801091a:	9201      	str	r2, [sp, #4]
 801091c:	9a02      	ldr	r2, [sp, #8]
 801091e:	9303      	str	r3, [sp, #12]
 8010920:	429a      	cmp	r2, r3
 8010922:	d80c      	bhi.n	801093e <__multiply+0x9e>
 8010924:	2e00      	cmp	r6, #0
 8010926:	dd03      	ble.n	8010930 <__multiply+0x90>
 8010928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801092c:	2b00      	cmp	r3, #0
 801092e:	d05a      	beq.n	80109e6 <__multiply+0x146>
 8010930:	6106      	str	r6, [r0, #16]
 8010932:	b005      	add	sp, #20
 8010934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010938:	f843 2b04 	str.w	r2, [r3], #4
 801093c:	e7d8      	b.n	80108f0 <__multiply+0x50>
 801093e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010942:	f1ba 0f00 	cmp.w	sl, #0
 8010946:	d024      	beq.n	8010992 <__multiply+0xf2>
 8010948:	f104 0e14 	add.w	lr, r4, #20
 801094c:	46a9      	mov	r9, r5
 801094e:	f04f 0c00 	mov.w	ip, #0
 8010952:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010956:	f8d9 1000 	ldr.w	r1, [r9]
 801095a:	fa1f fb82 	uxth.w	fp, r2
 801095e:	b289      	uxth	r1, r1
 8010960:	fb0a 110b 	mla	r1, sl, fp, r1
 8010964:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010968:	f8d9 2000 	ldr.w	r2, [r9]
 801096c:	4461      	add	r1, ip
 801096e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010972:	fb0a c20b 	mla	r2, sl, fp, ip
 8010976:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801097a:	b289      	uxth	r1, r1
 801097c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010980:	4577      	cmp	r7, lr
 8010982:	f849 1b04 	str.w	r1, [r9], #4
 8010986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801098a:	d8e2      	bhi.n	8010952 <__multiply+0xb2>
 801098c:	9a01      	ldr	r2, [sp, #4]
 801098e:	f845 c002 	str.w	ip, [r5, r2]
 8010992:	9a03      	ldr	r2, [sp, #12]
 8010994:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010998:	3304      	adds	r3, #4
 801099a:	f1b9 0f00 	cmp.w	r9, #0
 801099e:	d020      	beq.n	80109e2 <__multiply+0x142>
 80109a0:	6829      	ldr	r1, [r5, #0]
 80109a2:	f104 0c14 	add.w	ip, r4, #20
 80109a6:	46ae      	mov	lr, r5
 80109a8:	f04f 0a00 	mov.w	sl, #0
 80109ac:	f8bc b000 	ldrh.w	fp, [ip]
 80109b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80109b4:	fb09 220b 	mla	r2, r9, fp, r2
 80109b8:	4492      	add	sl, r2
 80109ba:	b289      	uxth	r1, r1
 80109bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80109c0:	f84e 1b04 	str.w	r1, [lr], #4
 80109c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80109c8:	f8be 1000 	ldrh.w	r1, [lr]
 80109cc:	0c12      	lsrs	r2, r2, #16
 80109ce:	fb09 1102 	mla	r1, r9, r2, r1
 80109d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80109d6:	4567      	cmp	r7, ip
 80109d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80109dc:	d8e6      	bhi.n	80109ac <__multiply+0x10c>
 80109de:	9a01      	ldr	r2, [sp, #4]
 80109e0:	50a9      	str	r1, [r5, r2]
 80109e2:	3504      	adds	r5, #4
 80109e4:	e79a      	b.n	801091c <__multiply+0x7c>
 80109e6:	3e01      	subs	r6, #1
 80109e8:	e79c      	b.n	8010924 <__multiply+0x84>
 80109ea:	bf00      	nop
 80109ec:	08011f7b 	.word	0x08011f7b
 80109f0:	08011f8c 	.word	0x08011f8c

080109f4 <__pow5mult>:
 80109f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109f8:	4615      	mov	r5, r2
 80109fa:	f012 0203 	ands.w	r2, r2, #3
 80109fe:	4606      	mov	r6, r0
 8010a00:	460f      	mov	r7, r1
 8010a02:	d007      	beq.n	8010a14 <__pow5mult+0x20>
 8010a04:	4c25      	ldr	r4, [pc, #148]	; (8010a9c <__pow5mult+0xa8>)
 8010a06:	3a01      	subs	r2, #1
 8010a08:	2300      	movs	r3, #0
 8010a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a0e:	f7ff fe9b 	bl	8010748 <__multadd>
 8010a12:	4607      	mov	r7, r0
 8010a14:	10ad      	asrs	r5, r5, #2
 8010a16:	d03d      	beq.n	8010a94 <__pow5mult+0xa0>
 8010a18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010a1a:	b97c      	cbnz	r4, 8010a3c <__pow5mult+0x48>
 8010a1c:	2010      	movs	r0, #16
 8010a1e:	f7ff fe1d 	bl	801065c <malloc>
 8010a22:	4602      	mov	r2, r0
 8010a24:	6270      	str	r0, [r6, #36]	; 0x24
 8010a26:	b928      	cbnz	r0, 8010a34 <__pow5mult+0x40>
 8010a28:	4b1d      	ldr	r3, [pc, #116]	; (8010aa0 <__pow5mult+0xac>)
 8010a2a:	481e      	ldr	r0, [pc, #120]	; (8010aa4 <__pow5mult+0xb0>)
 8010a2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010a30:	f000 fc82 	bl	8011338 <__assert_func>
 8010a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a38:	6004      	str	r4, [r0, #0]
 8010a3a:	60c4      	str	r4, [r0, #12]
 8010a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a44:	b94c      	cbnz	r4, 8010a5a <__pow5mult+0x66>
 8010a46:	f240 2171 	movw	r1, #625	; 0x271
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f7ff ff12 	bl	8010874 <__i2b>
 8010a50:	2300      	movs	r3, #0
 8010a52:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a56:	4604      	mov	r4, r0
 8010a58:	6003      	str	r3, [r0, #0]
 8010a5a:	f04f 0900 	mov.w	r9, #0
 8010a5e:	07eb      	lsls	r3, r5, #31
 8010a60:	d50a      	bpl.n	8010a78 <__pow5mult+0x84>
 8010a62:	4639      	mov	r1, r7
 8010a64:	4622      	mov	r2, r4
 8010a66:	4630      	mov	r0, r6
 8010a68:	f7ff ff1a 	bl	80108a0 <__multiply>
 8010a6c:	4639      	mov	r1, r7
 8010a6e:	4680      	mov	r8, r0
 8010a70:	4630      	mov	r0, r6
 8010a72:	f7ff fe47 	bl	8010704 <_Bfree>
 8010a76:	4647      	mov	r7, r8
 8010a78:	106d      	asrs	r5, r5, #1
 8010a7a:	d00b      	beq.n	8010a94 <__pow5mult+0xa0>
 8010a7c:	6820      	ldr	r0, [r4, #0]
 8010a7e:	b938      	cbnz	r0, 8010a90 <__pow5mult+0x9c>
 8010a80:	4622      	mov	r2, r4
 8010a82:	4621      	mov	r1, r4
 8010a84:	4630      	mov	r0, r6
 8010a86:	f7ff ff0b 	bl	80108a0 <__multiply>
 8010a8a:	6020      	str	r0, [r4, #0]
 8010a8c:	f8c0 9000 	str.w	r9, [r0]
 8010a90:	4604      	mov	r4, r0
 8010a92:	e7e4      	b.n	8010a5e <__pow5mult+0x6a>
 8010a94:	4638      	mov	r0, r7
 8010a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a9a:	bf00      	nop
 8010a9c:	080120d8 	.word	0x080120d8
 8010aa0:	08011f09 	.word	0x08011f09
 8010aa4:	08011f8c 	.word	0x08011f8c

08010aa8 <__lshift>:
 8010aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aac:	460c      	mov	r4, r1
 8010aae:	6849      	ldr	r1, [r1, #4]
 8010ab0:	6923      	ldr	r3, [r4, #16]
 8010ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ab6:	68a3      	ldr	r3, [r4, #8]
 8010ab8:	4607      	mov	r7, r0
 8010aba:	4691      	mov	r9, r2
 8010abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ac0:	f108 0601 	add.w	r6, r8, #1
 8010ac4:	42b3      	cmp	r3, r6
 8010ac6:	db0b      	blt.n	8010ae0 <__lshift+0x38>
 8010ac8:	4638      	mov	r0, r7
 8010aca:	f7ff fddb 	bl	8010684 <_Balloc>
 8010ace:	4605      	mov	r5, r0
 8010ad0:	b948      	cbnz	r0, 8010ae6 <__lshift+0x3e>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	4b2a      	ldr	r3, [pc, #168]	; (8010b80 <__lshift+0xd8>)
 8010ad6:	482b      	ldr	r0, [pc, #172]	; (8010b84 <__lshift+0xdc>)
 8010ad8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010adc:	f000 fc2c 	bl	8011338 <__assert_func>
 8010ae0:	3101      	adds	r1, #1
 8010ae2:	005b      	lsls	r3, r3, #1
 8010ae4:	e7ee      	b.n	8010ac4 <__lshift+0x1c>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	f100 0114 	add.w	r1, r0, #20
 8010aec:	f100 0210 	add.w	r2, r0, #16
 8010af0:	4618      	mov	r0, r3
 8010af2:	4553      	cmp	r3, sl
 8010af4:	db37      	blt.n	8010b66 <__lshift+0xbe>
 8010af6:	6920      	ldr	r0, [r4, #16]
 8010af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010afc:	f104 0314 	add.w	r3, r4, #20
 8010b00:	f019 091f 	ands.w	r9, r9, #31
 8010b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010b0c:	d02f      	beq.n	8010b6e <__lshift+0xc6>
 8010b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8010b12:	468a      	mov	sl, r1
 8010b14:	f04f 0c00 	mov.w	ip, #0
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	fa02 f209 	lsl.w	r2, r2, r9
 8010b1e:	ea42 020c 	orr.w	r2, r2, ip
 8010b22:	f84a 2b04 	str.w	r2, [sl], #4
 8010b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b2a:	4298      	cmp	r0, r3
 8010b2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010b30:	d8f2      	bhi.n	8010b18 <__lshift+0x70>
 8010b32:	1b03      	subs	r3, r0, r4
 8010b34:	3b15      	subs	r3, #21
 8010b36:	f023 0303 	bic.w	r3, r3, #3
 8010b3a:	3304      	adds	r3, #4
 8010b3c:	f104 0215 	add.w	r2, r4, #21
 8010b40:	4290      	cmp	r0, r2
 8010b42:	bf38      	it	cc
 8010b44:	2304      	movcc	r3, #4
 8010b46:	f841 c003 	str.w	ip, [r1, r3]
 8010b4a:	f1bc 0f00 	cmp.w	ip, #0
 8010b4e:	d001      	beq.n	8010b54 <__lshift+0xac>
 8010b50:	f108 0602 	add.w	r6, r8, #2
 8010b54:	3e01      	subs	r6, #1
 8010b56:	4638      	mov	r0, r7
 8010b58:	612e      	str	r6, [r5, #16]
 8010b5a:	4621      	mov	r1, r4
 8010b5c:	f7ff fdd2 	bl	8010704 <_Bfree>
 8010b60:	4628      	mov	r0, r5
 8010b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b6a:	3301      	adds	r3, #1
 8010b6c:	e7c1      	b.n	8010af2 <__lshift+0x4a>
 8010b6e:	3904      	subs	r1, #4
 8010b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b74:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b78:	4298      	cmp	r0, r3
 8010b7a:	d8f9      	bhi.n	8010b70 <__lshift+0xc8>
 8010b7c:	e7ea      	b.n	8010b54 <__lshift+0xac>
 8010b7e:	bf00      	nop
 8010b80:	08011f7b 	.word	0x08011f7b
 8010b84:	08011f8c 	.word	0x08011f8c

08010b88 <__mcmp>:
 8010b88:	b530      	push	{r4, r5, lr}
 8010b8a:	6902      	ldr	r2, [r0, #16]
 8010b8c:	690c      	ldr	r4, [r1, #16]
 8010b8e:	1b12      	subs	r2, r2, r4
 8010b90:	d10e      	bne.n	8010bb0 <__mcmp+0x28>
 8010b92:	f100 0314 	add.w	r3, r0, #20
 8010b96:	3114      	adds	r1, #20
 8010b98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010b9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ba0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010ba4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010ba8:	42a5      	cmp	r5, r4
 8010baa:	d003      	beq.n	8010bb4 <__mcmp+0x2c>
 8010bac:	d305      	bcc.n	8010bba <__mcmp+0x32>
 8010bae:	2201      	movs	r2, #1
 8010bb0:	4610      	mov	r0, r2
 8010bb2:	bd30      	pop	{r4, r5, pc}
 8010bb4:	4283      	cmp	r3, r0
 8010bb6:	d3f3      	bcc.n	8010ba0 <__mcmp+0x18>
 8010bb8:	e7fa      	b.n	8010bb0 <__mcmp+0x28>
 8010bba:	f04f 32ff 	mov.w	r2, #4294967295
 8010bbe:	e7f7      	b.n	8010bb0 <__mcmp+0x28>

08010bc0 <__mdiff>:
 8010bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	4611      	mov	r1, r2
 8010bca:	4620      	mov	r0, r4
 8010bcc:	4690      	mov	r8, r2
 8010bce:	f7ff ffdb 	bl	8010b88 <__mcmp>
 8010bd2:	1e05      	subs	r5, r0, #0
 8010bd4:	d110      	bne.n	8010bf8 <__mdiff+0x38>
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f7ff fd53 	bl	8010684 <_Balloc>
 8010bde:	b930      	cbnz	r0, 8010bee <__mdiff+0x2e>
 8010be0:	4b3a      	ldr	r3, [pc, #232]	; (8010ccc <__mdiff+0x10c>)
 8010be2:	4602      	mov	r2, r0
 8010be4:	f240 2132 	movw	r1, #562	; 0x232
 8010be8:	4839      	ldr	r0, [pc, #228]	; (8010cd0 <__mdiff+0x110>)
 8010bea:	f000 fba5 	bl	8011338 <__assert_func>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf8:	bfa4      	itt	ge
 8010bfa:	4643      	movge	r3, r8
 8010bfc:	46a0      	movge	r8, r4
 8010bfe:	4630      	mov	r0, r6
 8010c00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c04:	bfa6      	itte	ge
 8010c06:	461c      	movge	r4, r3
 8010c08:	2500      	movge	r5, #0
 8010c0a:	2501      	movlt	r5, #1
 8010c0c:	f7ff fd3a 	bl	8010684 <_Balloc>
 8010c10:	b920      	cbnz	r0, 8010c1c <__mdiff+0x5c>
 8010c12:	4b2e      	ldr	r3, [pc, #184]	; (8010ccc <__mdiff+0x10c>)
 8010c14:	4602      	mov	r2, r0
 8010c16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010c1a:	e7e5      	b.n	8010be8 <__mdiff+0x28>
 8010c1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c20:	6926      	ldr	r6, [r4, #16]
 8010c22:	60c5      	str	r5, [r0, #12]
 8010c24:	f104 0914 	add.w	r9, r4, #20
 8010c28:	f108 0514 	add.w	r5, r8, #20
 8010c2c:	f100 0e14 	add.w	lr, r0, #20
 8010c30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c38:	f108 0210 	add.w	r2, r8, #16
 8010c3c:	46f2      	mov	sl, lr
 8010c3e:	2100      	movs	r1, #0
 8010c40:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c48:	fa1f f883 	uxth.w	r8, r3
 8010c4c:	fa11 f18b 	uxtah	r1, r1, fp
 8010c50:	0c1b      	lsrs	r3, r3, #16
 8010c52:	eba1 0808 	sub.w	r8, r1, r8
 8010c56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c5e:	fa1f f888 	uxth.w	r8, r8
 8010c62:	1419      	asrs	r1, r3, #16
 8010c64:	454e      	cmp	r6, r9
 8010c66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010c6a:	f84a 3b04 	str.w	r3, [sl], #4
 8010c6e:	d8e7      	bhi.n	8010c40 <__mdiff+0x80>
 8010c70:	1b33      	subs	r3, r6, r4
 8010c72:	3b15      	subs	r3, #21
 8010c74:	f023 0303 	bic.w	r3, r3, #3
 8010c78:	3304      	adds	r3, #4
 8010c7a:	3415      	adds	r4, #21
 8010c7c:	42a6      	cmp	r6, r4
 8010c7e:	bf38      	it	cc
 8010c80:	2304      	movcc	r3, #4
 8010c82:	441d      	add	r5, r3
 8010c84:	4473      	add	r3, lr
 8010c86:	469e      	mov	lr, r3
 8010c88:	462e      	mov	r6, r5
 8010c8a:	4566      	cmp	r6, ip
 8010c8c:	d30e      	bcc.n	8010cac <__mdiff+0xec>
 8010c8e:	f10c 0203 	add.w	r2, ip, #3
 8010c92:	1b52      	subs	r2, r2, r5
 8010c94:	f022 0203 	bic.w	r2, r2, #3
 8010c98:	3d03      	subs	r5, #3
 8010c9a:	45ac      	cmp	ip, r5
 8010c9c:	bf38      	it	cc
 8010c9e:	2200      	movcc	r2, #0
 8010ca0:	441a      	add	r2, r3
 8010ca2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ca6:	b17b      	cbz	r3, 8010cc8 <__mdiff+0x108>
 8010ca8:	6107      	str	r7, [r0, #16]
 8010caa:	e7a3      	b.n	8010bf4 <__mdiff+0x34>
 8010cac:	f856 8b04 	ldr.w	r8, [r6], #4
 8010cb0:	fa11 f288 	uxtah	r2, r1, r8
 8010cb4:	1414      	asrs	r4, r2, #16
 8010cb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010cba:	b292      	uxth	r2, r2
 8010cbc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010cc0:	f84e 2b04 	str.w	r2, [lr], #4
 8010cc4:	1421      	asrs	r1, r4, #16
 8010cc6:	e7e0      	b.n	8010c8a <__mdiff+0xca>
 8010cc8:	3f01      	subs	r7, #1
 8010cca:	e7ea      	b.n	8010ca2 <__mdiff+0xe2>
 8010ccc:	08011f7b 	.word	0x08011f7b
 8010cd0:	08011f8c 	.word	0x08011f8c

08010cd4 <__d2b>:
 8010cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010cd8:	4689      	mov	r9, r1
 8010cda:	2101      	movs	r1, #1
 8010cdc:	ec57 6b10 	vmov	r6, r7, d0
 8010ce0:	4690      	mov	r8, r2
 8010ce2:	f7ff fccf 	bl	8010684 <_Balloc>
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	b930      	cbnz	r0, 8010cf8 <__d2b+0x24>
 8010cea:	4602      	mov	r2, r0
 8010cec:	4b25      	ldr	r3, [pc, #148]	; (8010d84 <__d2b+0xb0>)
 8010cee:	4826      	ldr	r0, [pc, #152]	; (8010d88 <__d2b+0xb4>)
 8010cf0:	f240 310a 	movw	r1, #778	; 0x30a
 8010cf4:	f000 fb20 	bl	8011338 <__assert_func>
 8010cf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010cfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d00:	bb35      	cbnz	r5, 8010d50 <__d2b+0x7c>
 8010d02:	2e00      	cmp	r6, #0
 8010d04:	9301      	str	r3, [sp, #4]
 8010d06:	d028      	beq.n	8010d5a <__d2b+0x86>
 8010d08:	4668      	mov	r0, sp
 8010d0a:	9600      	str	r6, [sp, #0]
 8010d0c:	f7ff fd82 	bl	8010814 <__lo0bits>
 8010d10:	9900      	ldr	r1, [sp, #0]
 8010d12:	b300      	cbz	r0, 8010d56 <__d2b+0x82>
 8010d14:	9a01      	ldr	r2, [sp, #4]
 8010d16:	f1c0 0320 	rsb	r3, r0, #32
 8010d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d1e:	430b      	orrs	r3, r1
 8010d20:	40c2      	lsrs	r2, r0
 8010d22:	6163      	str	r3, [r4, #20]
 8010d24:	9201      	str	r2, [sp, #4]
 8010d26:	9b01      	ldr	r3, [sp, #4]
 8010d28:	61a3      	str	r3, [r4, #24]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	bf14      	ite	ne
 8010d2e:	2202      	movne	r2, #2
 8010d30:	2201      	moveq	r2, #1
 8010d32:	6122      	str	r2, [r4, #16]
 8010d34:	b1d5      	cbz	r5, 8010d6c <__d2b+0x98>
 8010d36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d3a:	4405      	add	r5, r0
 8010d3c:	f8c9 5000 	str.w	r5, [r9]
 8010d40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d44:	f8c8 0000 	str.w	r0, [r8]
 8010d48:	4620      	mov	r0, r4
 8010d4a:	b003      	add	sp, #12
 8010d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d54:	e7d5      	b.n	8010d02 <__d2b+0x2e>
 8010d56:	6161      	str	r1, [r4, #20]
 8010d58:	e7e5      	b.n	8010d26 <__d2b+0x52>
 8010d5a:	a801      	add	r0, sp, #4
 8010d5c:	f7ff fd5a 	bl	8010814 <__lo0bits>
 8010d60:	9b01      	ldr	r3, [sp, #4]
 8010d62:	6163      	str	r3, [r4, #20]
 8010d64:	2201      	movs	r2, #1
 8010d66:	6122      	str	r2, [r4, #16]
 8010d68:	3020      	adds	r0, #32
 8010d6a:	e7e3      	b.n	8010d34 <__d2b+0x60>
 8010d6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d74:	f8c9 0000 	str.w	r0, [r9]
 8010d78:	6918      	ldr	r0, [r3, #16]
 8010d7a:	f7ff fd2b 	bl	80107d4 <__hi0bits>
 8010d7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d82:	e7df      	b.n	8010d44 <__d2b+0x70>
 8010d84:	08011f7b 	.word	0x08011f7b
 8010d88:	08011f8c 	.word	0x08011f8c

08010d8c <_calloc_r>:
 8010d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d8e:	fba1 2402 	umull	r2, r4, r1, r2
 8010d92:	b94c      	cbnz	r4, 8010da8 <_calloc_r+0x1c>
 8010d94:	4611      	mov	r1, r2
 8010d96:	9201      	str	r2, [sp, #4]
 8010d98:	f7fd ffca 	bl	800ed30 <_malloc_r>
 8010d9c:	9a01      	ldr	r2, [sp, #4]
 8010d9e:	4605      	mov	r5, r0
 8010da0:	b930      	cbnz	r0, 8010db0 <_calloc_r+0x24>
 8010da2:	4628      	mov	r0, r5
 8010da4:	b003      	add	sp, #12
 8010da6:	bd30      	pop	{r4, r5, pc}
 8010da8:	220c      	movs	r2, #12
 8010daa:	6002      	str	r2, [r0, #0]
 8010dac:	2500      	movs	r5, #0
 8010dae:	e7f8      	b.n	8010da2 <_calloc_r+0x16>
 8010db0:	4621      	mov	r1, r4
 8010db2:	f7fd ff94 	bl	800ecde <memset>
 8010db6:	e7f4      	b.n	8010da2 <_calloc_r+0x16>

08010db8 <_free_r>:
 8010db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dba:	2900      	cmp	r1, #0
 8010dbc:	d044      	beq.n	8010e48 <_free_r+0x90>
 8010dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dc2:	9001      	str	r0, [sp, #4]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8010dca:	bfb8      	it	lt
 8010dcc:	18e4      	addlt	r4, r4, r3
 8010dce:	f7ff fc4d 	bl	801066c <__malloc_lock>
 8010dd2:	4a1e      	ldr	r2, [pc, #120]	; (8010e4c <_free_r+0x94>)
 8010dd4:	9801      	ldr	r0, [sp, #4]
 8010dd6:	6813      	ldr	r3, [r2, #0]
 8010dd8:	b933      	cbnz	r3, 8010de8 <_free_r+0x30>
 8010dda:	6063      	str	r3, [r4, #4]
 8010ddc:	6014      	str	r4, [r2, #0]
 8010dde:	b003      	add	sp, #12
 8010de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010de4:	f7ff bc48 	b.w	8010678 <__malloc_unlock>
 8010de8:	42a3      	cmp	r3, r4
 8010dea:	d908      	bls.n	8010dfe <_free_r+0x46>
 8010dec:	6825      	ldr	r5, [r4, #0]
 8010dee:	1961      	adds	r1, r4, r5
 8010df0:	428b      	cmp	r3, r1
 8010df2:	bf01      	itttt	eq
 8010df4:	6819      	ldreq	r1, [r3, #0]
 8010df6:	685b      	ldreq	r3, [r3, #4]
 8010df8:	1949      	addeq	r1, r1, r5
 8010dfa:	6021      	streq	r1, [r4, #0]
 8010dfc:	e7ed      	b.n	8010dda <_free_r+0x22>
 8010dfe:	461a      	mov	r2, r3
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	b10b      	cbz	r3, 8010e08 <_free_r+0x50>
 8010e04:	42a3      	cmp	r3, r4
 8010e06:	d9fa      	bls.n	8010dfe <_free_r+0x46>
 8010e08:	6811      	ldr	r1, [r2, #0]
 8010e0a:	1855      	adds	r5, r2, r1
 8010e0c:	42a5      	cmp	r5, r4
 8010e0e:	d10b      	bne.n	8010e28 <_free_r+0x70>
 8010e10:	6824      	ldr	r4, [r4, #0]
 8010e12:	4421      	add	r1, r4
 8010e14:	1854      	adds	r4, r2, r1
 8010e16:	42a3      	cmp	r3, r4
 8010e18:	6011      	str	r1, [r2, #0]
 8010e1a:	d1e0      	bne.n	8010dde <_free_r+0x26>
 8010e1c:	681c      	ldr	r4, [r3, #0]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	6053      	str	r3, [r2, #4]
 8010e22:	4421      	add	r1, r4
 8010e24:	6011      	str	r1, [r2, #0]
 8010e26:	e7da      	b.n	8010dde <_free_r+0x26>
 8010e28:	d902      	bls.n	8010e30 <_free_r+0x78>
 8010e2a:	230c      	movs	r3, #12
 8010e2c:	6003      	str	r3, [r0, #0]
 8010e2e:	e7d6      	b.n	8010dde <_free_r+0x26>
 8010e30:	6825      	ldr	r5, [r4, #0]
 8010e32:	1961      	adds	r1, r4, r5
 8010e34:	428b      	cmp	r3, r1
 8010e36:	bf04      	itt	eq
 8010e38:	6819      	ldreq	r1, [r3, #0]
 8010e3a:	685b      	ldreq	r3, [r3, #4]
 8010e3c:	6063      	str	r3, [r4, #4]
 8010e3e:	bf04      	itt	eq
 8010e40:	1949      	addeq	r1, r1, r5
 8010e42:	6021      	streq	r1, [r4, #0]
 8010e44:	6054      	str	r4, [r2, #4]
 8010e46:	e7ca      	b.n	8010dde <_free_r+0x26>
 8010e48:	b003      	add	sp, #12
 8010e4a:	bd30      	pop	{r4, r5, pc}
 8010e4c:	20005f1c 	.word	0x20005f1c

08010e50 <__sfputc_r>:
 8010e50:	6893      	ldr	r3, [r2, #8]
 8010e52:	3b01      	subs	r3, #1
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	b410      	push	{r4}
 8010e58:	6093      	str	r3, [r2, #8]
 8010e5a:	da08      	bge.n	8010e6e <__sfputc_r+0x1e>
 8010e5c:	6994      	ldr	r4, [r2, #24]
 8010e5e:	42a3      	cmp	r3, r4
 8010e60:	db01      	blt.n	8010e66 <__sfputc_r+0x16>
 8010e62:	290a      	cmp	r1, #10
 8010e64:	d103      	bne.n	8010e6e <__sfputc_r+0x1e>
 8010e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e6a:	f000 b9a5 	b.w	80111b8 <__swbuf_r>
 8010e6e:	6813      	ldr	r3, [r2, #0]
 8010e70:	1c58      	adds	r0, r3, #1
 8010e72:	6010      	str	r0, [r2, #0]
 8010e74:	7019      	strb	r1, [r3, #0]
 8010e76:	4608      	mov	r0, r1
 8010e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e7c:	4770      	bx	lr

08010e7e <__sfputs_r>:
 8010e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e80:	4606      	mov	r6, r0
 8010e82:	460f      	mov	r7, r1
 8010e84:	4614      	mov	r4, r2
 8010e86:	18d5      	adds	r5, r2, r3
 8010e88:	42ac      	cmp	r4, r5
 8010e8a:	d101      	bne.n	8010e90 <__sfputs_r+0x12>
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	e007      	b.n	8010ea0 <__sfputs_r+0x22>
 8010e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e94:	463a      	mov	r2, r7
 8010e96:	4630      	mov	r0, r6
 8010e98:	f7ff ffda 	bl	8010e50 <__sfputc_r>
 8010e9c:	1c43      	adds	r3, r0, #1
 8010e9e:	d1f3      	bne.n	8010e88 <__sfputs_r+0xa>
 8010ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ea4 <_vfiprintf_r>:
 8010ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea8:	460d      	mov	r5, r1
 8010eaa:	b09d      	sub	sp, #116	; 0x74
 8010eac:	4614      	mov	r4, r2
 8010eae:	4698      	mov	r8, r3
 8010eb0:	4606      	mov	r6, r0
 8010eb2:	b118      	cbz	r0, 8010ebc <_vfiprintf_r+0x18>
 8010eb4:	6983      	ldr	r3, [r0, #24]
 8010eb6:	b90b      	cbnz	r3, 8010ebc <_vfiprintf_r+0x18>
 8010eb8:	f7fd fe3e 	bl	800eb38 <__sinit>
 8010ebc:	4b89      	ldr	r3, [pc, #548]	; (80110e4 <_vfiprintf_r+0x240>)
 8010ebe:	429d      	cmp	r5, r3
 8010ec0:	d11b      	bne.n	8010efa <_vfiprintf_r+0x56>
 8010ec2:	6875      	ldr	r5, [r6, #4]
 8010ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ec6:	07d9      	lsls	r1, r3, #31
 8010ec8:	d405      	bmi.n	8010ed6 <_vfiprintf_r+0x32>
 8010eca:	89ab      	ldrh	r3, [r5, #12]
 8010ecc:	059a      	lsls	r2, r3, #22
 8010ece:	d402      	bmi.n	8010ed6 <_vfiprintf_r+0x32>
 8010ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ed2:	f7fd fef4 	bl	800ecbe <__retarget_lock_acquire_recursive>
 8010ed6:	89ab      	ldrh	r3, [r5, #12]
 8010ed8:	071b      	lsls	r3, r3, #28
 8010eda:	d501      	bpl.n	8010ee0 <_vfiprintf_r+0x3c>
 8010edc:	692b      	ldr	r3, [r5, #16]
 8010ede:	b9eb      	cbnz	r3, 8010f1c <_vfiprintf_r+0x78>
 8010ee0:	4629      	mov	r1, r5
 8010ee2:	4630      	mov	r0, r6
 8010ee4:	f000 f9ba 	bl	801125c <__swsetup_r>
 8010ee8:	b1c0      	cbz	r0, 8010f1c <_vfiprintf_r+0x78>
 8010eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eec:	07dc      	lsls	r4, r3, #31
 8010eee:	d50e      	bpl.n	8010f0e <_vfiprintf_r+0x6a>
 8010ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef4:	b01d      	add	sp, #116	; 0x74
 8010ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010efa:	4b7b      	ldr	r3, [pc, #492]	; (80110e8 <_vfiprintf_r+0x244>)
 8010efc:	429d      	cmp	r5, r3
 8010efe:	d101      	bne.n	8010f04 <_vfiprintf_r+0x60>
 8010f00:	68b5      	ldr	r5, [r6, #8]
 8010f02:	e7df      	b.n	8010ec4 <_vfiprintf_r+0x20>
 8010f04:	4b79      	ldr	r3, [pc, #484]	; (80110ec <_vfiprintf_r+0x248>)
 8010f06:	429d      	cmp	r5, r3
 8010f08:	bf08      	it	eq
 8010f0a:	68f5      	ldreq	r5, [r6, #12]
 8010f0c:	e7da      	b.n	8010ec4 <_vfiprintf_r+0x20>
 8010f0e:	89ab      	ldrh	r3, [r5, #12]
 8010f10:	0598      	lsls	r0, r3, #22
 8010f12:	d4ed      	bmi.n	8010ef0 <_vfiprintf_r+0x4c>
 8010f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f16:	f7fd fed3 	bl	800ecc0 <__retarget_lock_release_recursive>
 8010f1a:	e7e9      	b.n	8010ef0 <_vfiprintf_r+0x4c>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f20:	2320      	movs	r3, #32
 8010f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f2a:	2330      	movs	r3, #48	; 0x30
 8010f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80110f0 <_vfiprintf_r+0x24c>
 8010f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f34:	f04f 0901 	mov.w	r9, #1
 8010f38:	4623      	mov	r3, r4
 8010f3a:	469a      	mov	sl, r3
 8010f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f40:	b10a      	cbz	r2, 8010f46 <_vfiprintf_r+0xa2>
 8010f42:	2a25      	cmp	r2, #37	; 0x25
 8010f44:	d1f9      	bne.n	8010f3a <_vfiprintf_r+0x96>
 8010f46:	ebba 0b04 	subs.w	fp, sl, r4
 8010f4a:	d00b      	beq.n	8010f64 <_vfiprintf_r+0xc0>
 8010f4c:	465b      	mov	r3, fp
 8010f4e:	4622      	mov	r2, r4
 8010f50:	4629      	mov	r1, r5
 8010f52:	4630      	mov	r0, r6
 8010f54:	f7ff ff93 	bl	8010e7e <__sfputs_r>
 8010f58:	3001      	adds	r0, #1
 8010f5a:	f000 80aa 	beq.w	80110b2 <_vfiprintf_r+0x20e>
 8010f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f60:	445a      	add	r2, fp
 8010f62:	9209      	str	r2, [sp, #36]	; 0x24
 8010f64:	f89a 3000 	ldrb.w	r3, [sl]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	f000 80a2 	beq.w	80110b2 <_vfiprintf_r+0x20e>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	f04f 32ff 	mov.w	r2, #4294967295
 8010f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f78:	f10a 0a01 	add.w	sl, sl, #1
 8010f7c:	9304      	str	r3, [sp, #16]
 8010f7e:	9307      	str	r3, [sp, #28]
 8010f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f84:	931a      	str	r3, [sp, #104]	; 0x68
 8010f86:	4654      	mov	r4, sl
 8010f88:	2205      	movs	r2, #5
 8010f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f8e:	4858      	ldr	r0, [pc, #352]	; (80110f0 <_vfiprintf_r+0x24c>)
 8010f90:	f7ef f95e 	bl	8000250 <memchr>
 8010f94:	9a04      	ldr	r2, [sp, #16]
 8010f96:	b9d8      	cbnz	r0, 8010fd0 <_vfiprintf_r+0x12c>
 8010f98:	06d1      	lsls	r1, r2, #27
 8010f9a:	bf44      	itt	mi
 8010f9c:	2320      	movmi	r3, #32
 8010f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fa2:	0713      	lsls	r3, r2, #28
 8010fa4:	bf44      	itt	mi
 8010fa6:	232b      	movmi	r3, #43	; 0x2b
 8010fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fac:	f89a 3000 	ldrb.w	r3, [sl]
 8010fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8010fb2:	d015      	beq.n	8010fe0 <_vfiprintf_r+0x13c>
 8010fb4:	9a07      	ldr	r2, [sp, #28]
 8010fb6:	4654      	mov	r4, sl
 8010fb8:	2000      	movs	r0, #0
 8010fba:	f04f 0c0a 	mov.w	ip, #10
 8010fbe:	4621      	mov	r1, r4
 8010fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fc4:	3b30      	subs	r3, #48	; 0x30
 8010fc6:	2b09      	cmp	r3, #9
 8010fc8:	d94e      	bls.n	8011068 <_vfiprintf_r+0x1c4>
 8010fca:	b1b0      	cbz	r0, 8010ffa <_vfiprintf_r+0x156>
 8010fcc:	9207      	str	r2, [sp, #28]
 8010fce:	e014      	b.n	8010ffa <_vfiprintf_r+0x156>
 8010fd0:	eba0 0308 	sub.w	r3, r0, r8
 8010fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	9304      	str	r3, [sp, #16]
 8010fdc:	46a2      	mov	sl, r4
 8010fde:	e7d2      	b.n	8010f86 <_vfiprintf_r+0xe2>
 8010fe0:	9b03      	ldr	r3, [sp, #12]
 8010fe2:	1d19      	adds	r1, r3, #4
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	9103      	str	r1, [sp, #12]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	bfbb      	ittet	lt
 8010fec:	425b      	neglt	r3, r3
 8010fee:	f042 0202 	orrlt.w	r2, r2, #2
 8010ff2:	9307      	strge	r3, [sp, #28]
 8010ff4:	9307      	strlt	r3, [sp, #28]
 8010ff6:	bfb8      	it	lt
 8010ff8:	9204      	strlt	r2, [sp, #16]
 8010ffa:	7823      	ldrb	r3, [r4, #0]
 8010ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8010ffe:	d10c      	bne.n	801101a <_vfiprintf_r+0x176>
 8011000:	7863      	ldrb	r3, [r4, #1]
 8011002:	2b2a      	cmp	r3, #42	; 0x2a
 8011004:	d135      	bne.n	8011072 <_vfiprintf_r+0x1ce>
 8011006:	9b03      	ldr	r3, [sp, #12]
 8011008:	1d1a      	adds	r2, r3, #4
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	9203      	str	r2, [sp, #12]
 801100e:	2b00      	cmp	r3, #0
 8011010:	bfb8      	it	lt
 8011012:	f04f 33ff 	movlt.w	r3, #4294967295
 8011016:	3402      	adds	r4, #2
 8011018:	9305      	str	r3, [sp, #20]
 801101a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011100 <_vfiprintf_r+0x25c>
 801101e:	7821      	ldrb	r1, [r4, #0]
 8011020:	2203      	movs	r2, #3
 8011022:	4650      	mov	r0, sl
 8011024:	f7ef f914 	bl	8000250 <memchr>
 8011028:	b140      	cbz	r0, 801103c <_vfiprintf_r+0x198>
 801102a:	2340      	movs	r3, #64	; 0x40
 801102c:	eba0 000a 	sub.w	r0, r0, sl
 8011030:	fa03 f000 	lsl.w	r0, r3, r0
 8011034:	9b04      	ldr	r3, [sp, #16]
 8011036:	4303      	orrs	r3, r0
 8011038:	3401      	adds	r4, #1
 801103a:	9304      	str	r3, [sp, #16]
 801103c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011040:	482c      	ldr	r0, [pc, #176]	; (80110f4 <_vfiprintf_r+0x250>)
 8011042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011046:	2206      	movs	r2, #6
 8011048:	f7ef f902 	bl	8000250 <memchr>
 801104c:	2800      	cmp	r0, #0
 801104e:	d03f      	beq.n	80110d0 <_vfiprintf_r+0x22c>
 8011050:	4b29      	ldr	r3, [pc, #164]	; (80110f8 <_vfiprintf_r+0x254>)
 8011052:	bb1b      	cbnz	r3, 801109c <_vfiprintf_r+0x1f8>
 8011054:	9b03      	ldr	r3, [sp, #12]
 8011056:	3307      	adds	r3, #7
 8011058:	f023 0307 	bic.w	r3, r3, #7
 801105c:	3308      	adds	r3, #8
 801105e:	9303      	str	r3, [sp, #12]
 8011060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011062:	443b      	add	r3, r7
 8011064:	9309      	str	r3, [sp, #36]	; 0x24
 8011066:	e767      	b.n	8010f38 <_vfiprintf_r+0x94>
 8011068:	fb0c 3202 	mla	r2, ip, r2, r3
 801106c:	460c      	mov	r4, r1
 801106e:	2001      	movs	r0, #1
 8011070:	e7a5      	b.n	8010fbe <_vfiprintf_r+0x11a>
 8011072:	2300      	movs	r3, #0
 8011074:	3401      	adds	r4, #1
 8011076:	9305      	str	r3, [sp, #20]
 8011078:	4619      	mov	r1, r3
 801107a:	f04f 0c0a 	mov.w	ip, #10
 801107e:	4620      	mov	r0, r4
 8011080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011084:	3a30      	subs	r2, #48	; 0x30
 8011086:	2a09      	cmp	r2, #9
 8011088:	d903      	bls.n	8011092 <_vfiprintf_r+0x1ee>
 801108a:	2b00      	cmp	r3, #0
 801108c:	d0c5      	beq.n	801101a <_vfiprintf_r+0x176>
 801108e:	9105      	str	r1, [sp, #20]
 8011090:	e7c3      	b.n	801101a <_vfiprintf_r+0x176>
 8011092:	fb0c 2101 	mla	r1, ip, r1, r2
 8011096:	4604      	mov	r4, r0
 8011098:	2301      	movs	r3, #1
 801109a:	e7f0      	b.n	801107e <_vfiprintf_r+0x1da>
 801109c:	ab03      	add	r3, sp, #12
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	462a      	mov	r2, r5
 80110a2:	4b16      	ldr	r3, [pc, #88]	; (80110fc <_vfiprintf_r+0x258>)
 80110a4:	a904      	add	r1, sp, #16
 80110a6:	4630      	mov	r0, r6
 80110a8:	f7fd ff46 	bl	800ef38 <_printf_float>
 80110ac:	4607      	mov	r7, r0
 80110ae:	1c78      	adds	r0, r7, #1
 80110b0:	d1d6      	bne.n	8011060 <_vfiprintf_r+0x1bc>
 80110b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110b4:	07d9      	lsls	r1, r3, #31
 80110b6:	d405      	bmi.n	80110c4 <_vfiprintf_r+0x220>
 80110b8:	89ab      	ldrh	r3, [r5, #12]
 80110ba:	059a      	lsls	r2, r3, #22
 80110bc:	d402      	bmi.n	80110c4 <_vfiprintf_r+0x220>
 80110be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110c0:	f7fd fdfe 	bl	800ecc0 <__retarget_lock_release_recursive>
 80110c4:	89ab      	ldrh	r3, [r5, #12]
 80110c6:	065b      	lsls	r3, r3, #25
 80110c8:	f53f af12 	bmi.w	8010ef0 <_vfiprintf_r+0x4c>
 80110cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110ce:	e711      	b.n	8010ef4 <_vfiprintf_r+0x50>
 80110d0:	ab03      	add	r3, sp, #12
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	462a      	mov	r2, r5
 80110d6:	4b09      	ldr	r3, [pc, #36]	; (80110fc <_vfiprintf_r+0x258>)
 80110d8:	a904      	add	r1, sp, #16
 80110da:	4630      	mov	r0, r6
 80110dc:	f7fe f9b8 	bl	800f450 <_printf_i>
 80110e0:	e7e4      	b.n	80110ac <_vfiprintf_r+0x208>
 80110e2:	bf00      	nop
 80110e4:	08011e84 	.word	0x08011e84
 80110e8:	08011ea4 	.word	0x08011ea4
 80110ec:	08011e64 	.word	0x08011e64
 80110f0:	080120e4 	.word	0x080120e4
 80110f4:	080120ee 	.word	0x080120ee
 80110f8:	0800ef39 	.word	0x0800ef39
 80110fc:	08010e7f 	.word	0x08010e7f
 8011100:	080120ea 	.word	0x080120ea

08011104 <_putc_r>:
 8011104:	b570      	push	{r4, r5, r6, lr}
 8011106:	460d      	mov	r5, r1
 8011108:	4614      	mov	r4, r2
 801110a:	4606      	mov	r6, r0
 801110c:	b118      	cbz	r0, 8011116 <_putc_r+0x12>
 801110e:	6983      	ldr	r3, [r0, #24]
 8011110:	b90b      	cbnz	r3, 8011116 <_putc_r+0x12>
 8011112:	f7fd fd11 	bl	800eb38 <__sinit>
 8011116:	4b1c      	ldr	r3, [pc, #112]	; (8011188 <_putc_r+0x84>)
 8011118:	429c      	cmp	r4, r3
 801111a:	d124      	bne.n	8011166 <_putc_r+0x62>
 801111c:	6874      	ldr	r4, [r6, #4]
 801111e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011120:	07d8      	lsls	r0, r3, #31
 8011122:	d405      	bmi.n	8011130 <_putc_r+0x2c>
 8011124:	89a3      	ldrh	r3, [r4, #12]
 8011126:	0599      	lsls	r1, r3, #22
 8011128:	d402      	bmi.n	8011130 <_putc_r+0x2c>
 801112a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801112c:	f7fd fdc7 	bl	800ecbe <__retarget_lock_acquire_recursive>
 8011130:	68a3      	ldr	r3, [r4, #8]
 8011132:	3b01      	subs	r3, #1
 8011134:	2b00      	cmp	r3, #0
 8011136:	60a3      	str	r3, [r4, #8]
 8011138:	da05      	bge.n	8011146 <_putc_r+0x42>
 801113a:	69a2      	ldr	r2, [r4, #24]
 801113c:	4293      	cmp	r3, r2
 801113e:	db1c      	blt.n	801117a <_putc_r+0x76>
 8011140:	b2eb      	uxtb	r3, r5
 8011142:	2b0a      	cmp	r3, #10
 8011144:	d019      	beq.n	801117a <_putc_r+0x76>
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	1c5a      	adds	r2, r3, #1
 801114a:	6022      	str	r2, [r4, #0]
 801114c:	701d      	strb	r5, [r3, #0]
 801114e:	b2ed      	uxtb	r5, r5
 8011150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011152:	07da      	lsls	r2, r3, #31
 8011154:	d405      	bmi.n	8011162 <_putc_r+0x5e>
 8011156:	89a3      	ldrh	r3, [r4, #12]
 8011158:	059b      	lsls	r3, r3, #22
 801115a:	d402      	bmi.n	8011162 <_putc_r+0x5e>
 801115c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801115e:	f7fd fdaf 	bl	800ecc0 <__retarget_lock_release_recursive>
 8011162:	4628      	mov	r0, r5
 8011164:	bd70      	pop	{r4, r5, r6, pc}
 8011166:	4b09      	ldr	r3, [pc, #36]	; (801118c <_putc_r+0x88>)
 8011168:	429c      	cmp	r4, r3
 801116a:	d101      	bne.n	8011170 <_putc_r+0x6c>
 801116c:	68b4      	ldr	r4, [r6, #8]
 801116e:	e7d6      	b.n	801111e <_putc_r+0x1a>
 8011170:	4b07      	ldr	r3, [pc, #28]	; (8011190 <_putc_r+0x8c>)
 8011172:	429c      	cmp	r4, r3
 8011174:	bf08      	it	eq
 8011176:	68f4      	ldreq	r4, [r6, #12]
 8011178:	e7d1      	b.n	801111e <_putc_r+0x1a>
 801117a:	4629      	mov	r1, r5
 801117c:	4622      	mov	r2, r4
 801117e:	4630      	mov	r0, r6
 8011180:	f000 f81a 	bl	80111b8 <__swbuf_r>
 8011184:	4605      	mov	r5, r0
 8011186:	e7e3      	b.n	8011150 <_putc_r+0x4c>
 8011188:	08011e84 	.word	0x08011e84
 801118c:	08011ea4 	.word	0x08011ea4
 8011190:	08011e64 	.word	0x08011e64

08011194 <_read_r>:
 8011194:	b538      	push	{r3, r4, r5, lr}
 8011196:	4d07      	ldr	r5, [pc, #28]	; (80111b4 <_read_r+0x20>)
 8011198:	4604      	mov	r4, r0
 801119a:	4608      	mov	r0, r1
 801119c:	4611      	mov	r1, r2
 801119e:	2200      	movs	r2, #0
 80111a0:	602a      	str	r2, [r5, #0]
 80111a2:	461a      	mov	r2, r3
 80111a4:	f7f6 f8d4 	bl	8007350 <_read>
 80111a8:	1c43      	adds	r3, r0, #1
 80111aa:	d102      	bne.n	80111b2 <_read_r+0x1e>
 80111ac:	682b      	ldr	r3, [r5, #0]
 80111ae:	b103      	cbz	r3, 80111b2 <_read_r+0x1e>
 80111b0:	6023      	str	r3, [r4, #0]
 80111b2:	bd38      	pop	{r3, r4, r5, pc}
 80111b4:	20005f24 	.word	0x20005f24

080111b8 <__swbuf_r>:
 80111b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ba:	460e      	mov	r6, r1
 80111bc:	4614      	mov	r4, r2
 80111be:	4605      	mov	r5, r0
 80111c0:	b118      	cbz	r0, 80111ca <__swbuf_r+0x12>
 80111c2:	6983      	ldr	r3, [r0, #24]
 80111c4:	b90b      	cbnz	r3, 80111ca <__swbuf_r+0x12>
 80111c6:	f7fd fcb7 	bl	800eb38 <__sinit>
 80111ca:	4b21      	ldr	r3, [pc, #132]	; (8011250 <__swbuf_r+0x98>)
 80111cc:	429c      	cmp	r4, r3
 80111ce:	d12b      	bne.n	8011228 <__swbuf_r+0x70>
 80111d0:	686c      	ldr	r4, [r5, #4]
 80111d2:	69a3      	ldr	r3, [r4, #24]
 80111d4:	60a3      	str	r3, [r4, #8]
 80111d6:	89a3      	ldrh	r3, [r4, #12]
 80111d8:	071a      	lsls	r2, r3, #28
 80111da:	d52f      	bpl.n	801123c <__swbuf_r+0x84>
 80111dc:	6923      	ldr	r3, [r4, #16]
 80111de:	b36b      	cbz	r3, 801123c <__swbuf_r+0x84>
 80111e0:	6923      	ldr	r3, [r4, #16]
 80111e2:	6820      	ldr	r0, [r4, #0]
 80111e4:	1ac0      	subs	r0, r0, r3
 80111e6:	6963      	ldr	r3, [r4, #20]
 80111e8:	b2f6      	uxtb	r6, r6
 80111ea:	4283      	cmp	r3, r0
 80111ec:	4637      	mov	r7, r6
 80111ee:	dc04      	bgt.n	80111fa <__swbuf_r+0x42>
 80111f0:	4621      	mov	r1, r4
 80111f2:	4628      	mov	r0, r5
 80111f4:	f7ff f9e0 	bl	80105b8 <_fflush_r>
 80111f8:	bb30      	cbnz	r0, 8011248 <__swbuf_r+0x90>
 80111fa:	68a3      	ldr	r3, [r4, #8]
 80111fc:	3b01      	subs	r3, #1
 80111fe:	60a3      	str	r3, [r4, #8]
 8011200:	6823      	ldr	r3, [r4, #0]
 8011202:	1c5a      	adds	r2, r3, #1
 8011204:	6022      	str	r2, [r4, #0]
 8011206:	701e      	strb	r6, [r3, #0]
 8011208:	6963      	ldr	r3, [r4, #20]
 801120a:	3001      	adds	r0, #1
 801120c:	4283      	cmp	r3, r0
 801120e:	d004      	beq.n	801121a <__swbuf_r+0x62>
 8011210:	89a3      	ldrh	r3, [r4, #12]
 8011212:	07db      	lsls	r3, r3, #31
 8011214:	d506      	bpl.n	8011224 <__swbuf_r+0x6c>
 8011216:	2e0a      	cmp	r6, #10
 8011218:	d104      	bne.n	8011224 <__swbuf_r+0x6c>
 801121a:	4621      	mov	r1, r4
 801121c:	4628      	mov	r0, r5
 801121e:	f7ff f9cb 	bl	80105b8 <_fflush_r>
 8011222:	b988      	cbnz	r0, 8011248 <__swbuf_r+0x90>
 8011224:	4638      	mov	r0, r7
 8011226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011228:	4b0a      	ldr	r3, [pc, #40]	; (8011254 <__swbuf_r+0x9c>)
 801122a:	429c      	cmp	r4, r3
 801122c:	d101      	bne.n	8011232 <__swbuf_r+0x7a>
 801122e:	68ac      	ldr	r4, [r5, #8]
 8011230:	e7cf      	b.n	80111d2 <__swbuf_r+0x1a>
 8011232:	4b09      	ldr	r3, [pc, #36]	; (8011258 <__swbuf_r+0xa0>)
 8011234:	429c      	cmp	r4, r3
 8011236:	bf08      	it	eq
 8011238:	68ec      	ldreq	r4, [r5, #12]
 801123a:	e7ca      	b.n	80111d2 <__swbuf_r+0x1a>
 801123c:	4621      	mov	r1, r4
 801123e:	4628      	mov	r0, r5
 8011240:	f000 f80c 	bl	801125c <__swsetup_r>
 8011244:	2800      	cmp	r0, #0
 8011246:	d0cb      	beq.n	80111e0 <__swbuf_r+0x28>
 8011248:	f04f 37ff 	mov.w	r7, #4294967295
 801124c:	e7ea      	b.n	8011224 <__swbuf_r+0x6c>
 801124e:	bf00      	nop
 8011250:	08011e84 	.word	0x08011e84
 8011254:	08011ea4 	.word	0x08011ea4
 8011258:	08011e64 	.word	0x08011e64

0801125c <__swsetup_r>:
 801125c:	4b32      	ldr	r3, [pc, #200]	; (8011328 <__swsetup_r+0xcc>)
 801125e:	b570      	push	{r4, r5, r6, lr}
 8011260:	681d      	ldr	r5, [r3, #0]
 8011262:	4606      	mov	r6, r0
 8011264:	460c      	mov	r4, r1
 8011266:	b125      	cbz	r5, 8011272 <__swsetup_r+0x16>
 8011268:	69ab      	ldr	r3, [r5, #24]
 801126a:	b913      	cbnz	r3, 8011272 <__swsetup_r+0x16>
 801126c:	4628      	mov	r0, r5
 801126e:	f7fd fc63 	bl	800eb38 <__sinit>
 8011272:	4b2e      	ldr	r3, [pc, #184]	; (801132c <__swsetup_r+0xd0>)
 8011274:	429c      	cmp	r4, r3
 8011276:	d10f      	bne.n	8011298 <__swsetup_r+0x3c>
 8011278:	686c      	ldr	r4, [r5, #4]
 801127a:	89a3      	ldrh	r3, [r4, #12]
 801127c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011280:	0719      	lsls	r1, r3, #28
 8011282:	d42c      	bmi.n	80112de <__swsetup_r+0x82>
 8011284:	06dd      	lsls	r5, r3, #27
 8011286:	d411      	bmi.n	80112ac <__swsetup_r+0x50>
 8011288:	2309      	movs	r3, #9
 801128a:	6033      	str	r3, [r6, #0]
 801128c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011290:	81a3      	strh	r3, [r4, #12]
 8011292:	f04f 30ff 	mov.w	r0, #4294967295
 8011296:	e03e      	b.n	8011316 <__swsetup_r+0xba>
 8011298:	4b25      	ldr	r3, [pc, #148]	; (8011330 <__swsetup_r+0xd4>)
 801129a:	429c      	cmp	r4, r3
 801129c:	d101      	bne.n	80112a2 <__swsetup_r+0x46>
 801129e:	68ac      	ldr	r4, [r5, #8]
 80112a0:	e7eb      	b.n	801127a <__swsetup_r+0x1e>
 80112a2:	4b24      	ldr	r3, [pc, #144]	; (8011334 <__swsetup_r+0xd8>)
 80112a4:	429c      	cmp	r4, r3
 80112a6:	bf08      	it	eq
 80112a8:	68ec      	ldreq	r4, [r5, #12]
 80112aa:	e7e6      	b.n	801127a <__swsetup_r+0x1e>
 80112ac:	0758      	lsls	r0, r3, #29
 80112ae:	d512      	bpl.n	80112d6 <__swsetup_r+0x7a>
 80112b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112b2:	b141      	cbz	r1, 80112c6 <__swsetup_r+0x6a>
 80112b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112b8:	4299      	cmp	r1, r3
 80112ba:	d002      	beq.n	80112c2 <__swsetup_r+0x66>
 80112bc:	4630      	mov	r0, r6
 80112be:	f7ff fd7b 	bl	8010db8 <_free_r>
 80112c2:	2300      	movs	r3, #0
 80112c4:	6363      	str	r3, [r4, #52]	; 0x34
 80112c6:	89a3      	ldrh	r3, [r4, #12]
 80112c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112cc:	81a3      	strh	r3, [r4, #12]
 80112ce:	2300      	movs	r3, #0
 80112d0:	6063      	str	r3, [r4, #4]
 80112d2:	6923      	ldr	r3, [r4, #16]
 80112d4:	6023      	str	r3, [r4, #0]
 80112d6:	89a3      	ldrh	r3, [r4, #12]
 80112d8:	f043 0308 	orr.w	r3, r3, #8
 80112dc:	81a3      	strh	r3, [r4, #12]
 80112de:	6923      	ldr	r3, [r4, #16]
 80112e0:	b94b      	cbnz	r3, 80112f6 <__swsetup_r+0x9a>
 80112e2:	89a3      	ldrh	r3, [r4, #12]
 80112e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80112e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112ec:	d003      	beq.n	80112f6 <__swsetup_r+0x9a>
 80112ee:	4621      	mov	r1, r4
 80112f0:	4630      	mov	r0, r6
 80112f2:	f000 f877 	bl	80113e4 <__smakebuf_r>
 80112f6:	89a0      	ldrh	r0, [r4, #12]
 80112f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112fc:	f010 0301 	ands.w	r3, r0, #1
 8011300:	d00a      	beq.n	8011318 <__swsetup_r+0xbc>
 8011302:	2300      	movs	r3, #0
 8011304:	60a3      	str	r3, [r4, #8]
 8011306:	6963      	ldr	r3, [r4, #20]
 8011308:	425b      	negs	r3, r3
 801130a:	61a3      	str	r3, [r4, #24]
 801130c:	6923      	ldr	r3, [r4, #16]
 801130e:	b943      	cbnz	r3, 8011322 <__swsetup_r+0xc6>
 8011310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011314:	d1ba      	bne.n	801128c <__swsetup_r+0x30>
 8011316:	bd70      	pop	{r4, r5, r6, pc}
 8011318:	0781      	lsls	r1, r0, #30
 801131a:	bf58      	it	pl
 801131c:	6963      	ldrpl	r3, [r4, #20]
 801131e:	60a3      	str	r3, [r4, #8]
 8011320:	e7f4      	b.n	801130c <__swsetup_r+0xb0>
 8011322:	2000      	movs	r0, #0
 8011324:	e7f7      	b.n	8011316 <__swsetup_r+0xba>
 8011326:	bf00      	nop
 8011328:	20000068 	.word	0x20000068
 801132c:	08011e84 	.word	0x08011e84
 8011330:	08011ea4 	.word	0x08011ea4
 8011334:	08011e64 	.word	0x08011e64

08011338 <__assert_func>:
 8011338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801133a:	4614      	mov	r4, r2
 801133c:	461a      	mov	r2, r3
 801133e:	4b09      	ldr	r3, [pc, #36]	; (8011364 <__assert_func+0x2c>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	4605      	mov	r5, r0
 8011344:	68d8      	ldr	r0, [r3, #12]
 8011346:	b14c      	cbz	r4, 801135c <__assert_func+0x24>
 8011348:	4b07      	ldr	r3, [pc, #28]	; (8011368 <__assert_func+0x30>)
 801134a:	9100      	str	r1, [sp, #0]
 801134c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011350:	4906      	ldr	r1, [pc, #24]	; (801136c <__assert_func+0x34>)
 8011352:	462b      	mov	r3, r5
 8011354:	f000 f80e 	bl	8011374 <fiprintf>
 8011358:	f000 f8a3 	bl	80114a2 <abort>
 801135c:	4b04      	ldr	r3, [pc, #16]	; (8011370 <__assert_func+0x38>)
 801135e:	461c      	mov	r4, r3
 8011360:	e7f3      	b.n	801134a <__assert_func+0x12>
 8011362:	bf00      	nop
 8011364:	20000068 	.word	0x20000068
 8011368:	080120f5 	.word	0x080120f5
 801136c:	08012102 	.word	0x08012102
 8011370:	08012130 	.word	0x08012130

08011374 <fiprintf>:
 8011374:	b40e      	push	{r1, r2, r3}
 8011376:	b503      	push	{r0, r1, lr}
 8011378:	4601      	mov	r1, r0
 801137a:	ab03      	add	r3, sp, #12
 801137c:	4805      	ldr	r0, [pc, #20]	; (8011394 <fiprintf+0x20>)
 801137e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011382:	6800      	ldr	r0, [r0, #0]
 8011384:	9301      	str	r3, [sp, #4]
 8011386:	f7ff fd8d 	bl	8010ea4 <_vfiprintf_r>
 801138a:	b002      	add	sp, #8
 801138c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011390:	b003      	add	sp, #12
 8011392:	4770      	bx	lr
 8011394:	20000068 	.word	0x20000068

08011398 <__swhatbuf_r>:
 8011398:	b570      	push	{r4, r5, r6, lr}
 801139a:	460e      	mov	r6, r1
 801139c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113a0:	2900      	cmp	r1, #0
 80113a2:	b096      	sub	sp, #88	; 0x58
 80113a4:	4614      	mov	r4, r2
 80113a6:	461d      	mov	r5, r3
 80113a8:	da08      	bge.n	80113bc <__swhatbuf_r+0x24>
 80113aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80113ae:	2200      	movs	r2, #0
 80113b0:	602a      	str	r2, [r5, #0]
 80113b2:	061a      	lsls	r2, r3, #24
 80113b4:	d410      	bmi.n	80113d8 <__swhatbuf_r+0x40>
 80113b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113ba:	e00e      	b.n	80113da <__swhatbuf_r+0x42>
 80113bc:	466a      	mov	r2, sp
 80113be:	f000 f877 	bl	80114b0 <_fstat_r>
 80113c2:	2800      	cmp	r0, #0
 80113c4:	dbf1      	blt.n	80113aa <__swhatbuf_r+0x12>
 80113c6:	9a01      	ldr	r2, [sp, #4]
 80113c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113d0:	425a      	negs	r2, r3
 80113d2:	415a      	adcs	r2, r3
 80113d4:	602a      	str	r2, [r5, #0]
 80113d6:	e7ee      	b.n	80113b6 <__swhatbuf_r+0x1e>
 80113d8:	2340      	movs	r3, #64	; 0x40
 80113da:	2000      	movs	r0, #0
 80113dc:	6023      	str	r3, [r4, #0]
 80113de:	b016      	add	sp, #88	; 0x58
 80113e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080113e4 <__smakebuf_r>:
 80113e4:	898b      	ldrh	r3, [r1, #12]
 80113e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113e8:	079d      	lsls	r5, r3, #30
 80113ea:	4606      	mov	r6, r0
 80113ec:	460c      	mov	r4, r1
 80113ee:	d507      	bpl.n	8011400 <__smakebuf_r+0x1c>
 80113f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	6123      	str	r3, [r4, #16]
 80113f8:	2301      	movs	r3, #1
 80113fa:	6163      	str	r3, [r4, #20]
 80113fc:	b002      	add	sp, #8
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	ab01      	add	r3, sp, #4
 8011402:	466a      	mov	r2, sp
 8011404:	f7ff ffc8 	bl	8011398 <__swhatbuf_r>
 8011408:	9900      	ldr	r1, [sp, #0]
 801140a:	4605      	mov	r5, r0
 801140c:	4630      	mov	r0, r6
 801140e:	f7fd fc8f 	bl	800ed30 <_malloc_r>
 8011412:	b948      	cbnz	r0, 8011428 <__smakebuf_r+0x44>
 8011414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011418:	059a      	lsls	r2, r3, #22
 801141a:	d4ef      	bmi.n	80113fc <__smakebuf_r+0x18>
 801141c:	f023 0303 	bic.w	r3, r3, #3
 8011420:	f043 0302 	orr.w	r3, r3, #2
 8011424:	81a3      	strh	r3, [r4, #12]
 8011426:	e7e3      	b.n	80113f0 <__smakebuf_r+0xc>
 8011428:	4b0d      	ldr	r3, [pc, #52]	; (8011460 <__smakebuf_r+0x7c>)
 801142a:	62b3      	str	r3, [r6, #40]	; 0x28
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	6020      	str	r0, [r4, #0]
 8011430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011434:	81a3      	strh	r3, [r4, #12]
 8011436:	9b00      	ldr	r3, [sp, #0]
 8011438:	6163      	str	r3, [r4, #20]
 801143a:	9b01      	ldr	r3, [sp, #4]
 801143c:	6120      	str	r0, [r4, #16]
 801143e:	b15b      	cbz	r3, 8011458 <__smakebuf_r+0x74>
 8011440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011444:	4630      	mov	r0, r6
 8011446:	f000 f845 	bl	80114d4 <_isatty_r>
 801144a:	b128      	cbz	r0, 8011458 <__smakebuf_r+0x74>
 801144c:	89a3      	ldrh	r3, [r4, #12]
 801144e:	f023 0303 	bic.w	r3, r3, #3
 8011452:	f043 0301 	orr.w	r3, r3, #1
 8011456:	81a3      	strh	r3, [r4, #12]
 8011458:	89a0      	ldrh	r0, [r4, #12]
 801145a:	4305      	orrs	r5, r0
 801145c:	81a5      	strh	r5, [r4, #12]
 801145e:	e7cd      	b.n	80113fc <__smakebuf_r+0x18>
 8011460:	0800ead1 	.word	0x0800ead1

08011464 <__ascii_mbtowc>:
 8011464:	b082      	sub	sp, #8
 8011466:	b901      	cbnz	r1, 801146a <__ascii_mbtowc+0x6>
 8011468:	a901      	add	r1, sp, #4
 801146a:	b142      	cbz	r2, 801147e <__ascii_mbtowc+0x1a>
 801146c:	b14b      	cbz	r3, 8011482 <__ascii_mbtowc+0x1e>
 801146e:	7813      	ldrb	r3, [r2, #0]
 8011470:	600b      	str	r3, [r1, #0]
 8011472:	7812      	ldrb	r2, [r2, #0]
 8011474:	1e10      	subs	r0, r2, #0
 8011476:	bf18      	it	ne
 8011478:	2001      	movne	r0, #1
 801147a:	b002      	add	sp, #8
 801147c:	4770      	bx	lr
 801147e:	4610      	mov	r0, r2
 8011480:	e7fb      	b.n	801147a <__ascii_mbtowc+0x16>
 8011482:	f06f 0001 	mvn.w	r0, #1
 8011486:	e7f8      	b.n	801147a <__ascii_mbtowc+0x16>

08011488 <__ascii_wctomb>:
 8011488:	b149      	cbz	r1, 801149e <__ascii_wctomb+0x16>
 801148a:	2aff      	cmp	r2, #255	; 0xff
 801148c:	bf85      	ittet	hi
 801148e:	238a      	movhi	r3, #138	; 0x8a
 8011490:	6003      	strhi	r3, [r0, #0]
 8011492:	700a      	strbls	r2, [r1, #0]
 8011494:	f04f 30ff 	movhi.w	r0, #4294967295
 8011498:	bf98      	it	ls
 801149a:	2001      	movls	r0, #1
 801149c:	4770      	bx	lr
 801149e:	4608      	mov	r0, r1
 80114a0:	4770      	bx	lr

080114a2 <abort>:
 80114a2:	b508      	push	{r3, lr}
 80114a4:	2006      	movs	r0, #6
 80114a6:	f000 f84d 	bl	8011544 <raise>
 80114aa:	2001      	movs	r0, #1
 80114ac:	f7f5 ff46 	bl	800733c <_exit>

080114b0 <_fstat_r>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	4d07      	ldr	r5, [pc, #28]	; (80114d0 <_fstat_r+0x20>)
 80114b4:	2300      	movs	r3, #0
 80114b6:	4604      	mov	r4, r0
 80114b8:	4608      	mov	r0, r1
 80114ba:	4611      	mov	r1, r2
 80114bc:	602b      	str	r3, [r5, #0]
 80114be:	f7f5 ff70 	bl	80073a2 <_fstat>
 80114c2:	1c43      	adds	r3, r0, #1
 80114c4:	d102      	bne.n	80114cc <_fstat_r+0x1c>
 80114c6:	682b      	ldr	r3, [r5, #0]
 80114c8:	b103      	cbz	r3, 80114cc <_fstat_r+0x1c>
 80114ca:	6023      	str	r3, [r4, #0]
 80114cc:	bd38      	pop	{r3, r4, r5, pc}
 80114ce:	bf00      	nop
 80114d0:	20005f24 	.word	0x20005f24

080114d4 <_isatty_r>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4d06      	ldr	r5, [pc, #24]	; (80114f0 <_isatty_r+0x1c>)
 80114d8:	2300      	movs	r3, #0
 80114da:	4604      	mov	r4, r0
 80114dc:	4608      	mov	r0, r1
 80114de:	602b      	str	r3, [r5, #0]
 80114e0:	f7f5 ff6f 	bl	80073c2 <_isatty>
 80114e4:	1c43      	adds	r3, r0, #1
 80114e6:	d102      	bne.n	80114ee <_isatty_r+0x1a>
 80114e8:	682b      	ldr	r3, [r5, #0]
 80114ea:	b103      	cbz	r3, 80114ee <_isatty_r+0x1a>
 80114ec:	6023      	str	r3, [r4, #0]
 80114ee:	bd38      	pop	{r3, r4, r5, pc}
 80114f0:	20005f24 	.word	0x20005f24

080114f4 <_raise_r>:
 80114f4:	291f      	cmp	r1, #31
 80114f6:	b538      	push	{r3, r4, r5, lr}
 80114f8:	4604      	mov	r4, r0
 80114fa:	460d      	mov	r5, r1
 80114fc:	d904      	bls.n	8011508 <_raise_r+0x14>
 80114fe:	2316      	movs	r3, #22
 8011500:	6003      	str	r3, [r0, #0]
 8011502:	f04f 30ff 	mov.w	r0, #4294967295
 8011506:	bd38      	pop	{r3, r4, r5, pc}
 8011508:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801150a:	b112      	cbz	r2, 8011512 <_raise_r+0x1e>
 801150c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011510:	b94b      	cbnz	r3, 8011526 <_raise_r+0x32>
 8011512:	4620      	mov	r0, r4
 8011514:	f000 f830 	bl	8011578 <_getpid_r>
 8011518:	462a      	mov	r2, r5
 801151a:	4601      	mov	r1, r0
 801151c:	4620      	mov	r0, r4
 801151e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011522:	f000 b817 	b.w	8011554 <_kill_r>
 8011526:	2b01      	cmp	r3, #1
 8011528:	d00a      	beq.n	8011540 <_raise_r+0x4c>
 801152a:	1c59      	adds	r1, r3, #1
 801152c:	d103      	bne.n	8011536 <_raise_r+0x42>
 801152e:	2316      	movs	r3, #22
 8011530:	6003      	str	r3, [r0, #0]
 8011532:	2001      	movs	r0, #1
 8011534:	e7e7      	b.n	8011506 <_raise_r+0x12>
 8011536:	2400      	movs	r4, #0
 8011538:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801153c:	4628      	mov	r0, r5
 801153e:	4798      	blx	r3
 8011540:	2000      	movs	r0, #0
 8011542:	e7e0      	b.n	8011506 <_raise_r+0x12>

08011544 <raise>:
 8011544:	4b02      	ldr	r3, [pc, #8]	; (8011550 <raise+0xc>)
 8011546:	4601      	mov	r1, r0
 8011548:	6818      	ldr	r0, [r3, #0]
 801154a:	f7ff bfd3 	b.w	80114f4 <_raise_r>
 801154e:	bf00      	nop
 8011550:	20000068 	.word	0x20000068

08011554 <_kill_r>:
 8011554:	b538      	push	{r3, r4, r5, lr}
 8011556:	4d07      	ldr	r5, [pc, #28]	; (8011574 <_kill_r+0x20>)
 8011558:	2300      	movs	r3, #0
 801155a:	4604      	mov	r4, r0
 801155c:	4608      	mov	r0, r1
 801155e:	4611      	mov	r1, r2
 8011560:	602b      	str	r3, [r5, #0]
 8011562:	f7f5 fedb 	bl	800731c <_kill>
 8011566:	1c43      	adds	r3, r0, #1
 8011568:	d102      	bne.n	8011570 <_kill_r+0x1c>
 801156a:	682b      	ldr	r3, [r5, #0]
 801156c:	b103      	cbz	r3, 8011570 <_kill_r+0x1c>
 801156e:	6023      	str	r3, [r4, #0]
 8011570:	bd38      	pop	{r3, r4, r5, pc}
 8011572:	bf00      	nop
 8011574:	20005f24 	.word	0x20005f24

08011578 <_getpid_r>:
 8011578:	f7f5 bec8 	b.w	800730c <_getpid>

0801157c <lrintf>:
 801157c:	ee10 3a10 	vmov	r3, s0
 8011580:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011584:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8011588:	281e      	cmp	r0, #30
 801158a:	b082      	sub	sp, #8
 801158c:	dc2e      	bgt.n	80115ec <lrintf+0x70>
 801158e:	1c41      	adds	r1, r0, #1
 8011590:	da02      	bge.n	8011598 <lrintf+0x1c>
 8011592:	2000      	movs	r0, #0
 8011594:	b002      	add	sp, #8
 8011596:	4770      	bx	lr
 8011598:	2816      	cmp	r0, #22
 801159a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801159e:	dd09      	ble.n	80115b4 <lrintf+0x38>
 80115a0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80115a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80115a8:	3a96      	subs	r2, #150	; 0x96
 80115aa:	4090      	lsls	r0, r2
 80115ac:	2900      	cmp	r1, #0
 80115ae:	d0f1      	beq.n	8011594 <lrintf+0x18>
 80115b0:	4240      	negs	r0, r0
 80115b2:	e7ef      	b.n	8011594 <lrintf+0x18>
 80115b4:	4b10      	ldr	r3, [pc, #64]	; (80115f8 <lrintf+0x7c>)
 80115b6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80115ba:	ed93 7a00 	vldr	s14, [r3]
 80115be:	ee37 0a00 	vadd.f32	s0, s14, s0
 80115c2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80115c6:	eddd 7a01 	vldr	s15, [sp, #4]
 80115ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115ce:	ee17 3a90 	vmov	r3, s15
 80115d2:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80115d6:	d0dc      	beq.n	8011592 <lrintf+0x16>
 80115d8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80115dc:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80115e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80115e4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80115e8:	40d8      	lsrs	r0, r3
 80115ea:	e7df      	b.n	80115ac <lrintf+0x30>
 80115ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80115f0:	ee17 0a90 	vmov	r0, s15
 80115f4:	e7ce      	b.n	8011594 <lrintf+0x18>
 80115f6:	bf00      	nop
 80115f8:	0801223c 	.word	0x0801223c

080115fc <checkint>:
 80115fc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011600:	2b7e      	cmp	r3, #126	; 0x7e
 8011602:	dd10      	ble.n	8011626 <checkint+0x2a>
 8011604:	2b96      	cmp	r3, #150	; 0x96
 8011606:	dc0c      	bgt.n	8011622 <checkint+0x26>
 8011608:	2201      	movs	r2, #1
 801160a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801160e:	fa02 f303 	lsl.w	r3, r2, r3
 8011612:	1e5a      	subs	r2, r3, #1
 8011614:	4202      	tst	r2, r0
 8011616:	d106      	bne.n	8011626 <checkint+0x2a>
 8011618:	4203      	tst	r3, r0
 801161a:	bf0c      	ite	eq
 801161c:	2002      	moveq	r0, #2
 801161e:	2001      	movne	r0, #1
 8011620:	4770      	bx	lr
 8011622:	2002      	movs	r0, #2
 8011624:	4770      	bx	lr
 8011626:	2000      	movs	r0, #0
 8011628:	4770      	bx	lr
 801162a:	0000      	movs	r0, r0
 801162c:	0000      	movs	r0, r0
	...

08011630 <powf>:
 8011630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011632:	ee10 1a10 	vmov	r1, s0
 8011636:	ee10 4a90 	vmov	r4, s1
 801163a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801163e:	0062      	lsls	r2, r4, #1
 8011640:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011644:	eef0 7a40 	vmov.f32	s15, s0
 8011648:	f102 30ff 	add.w	r0, r2, #4294967295
 801164c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8011650:	d252      	bcs.n	80116f8 <powf+0xc8>
 8011652:	4298      	cmp	r0, r3
 8011654:	d252      	bcs.n	80116fc <powf+0xcc>
 8011656:	2000      	movs	r0, #0
 8011658:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801165c:	4ca0      	ldr	r4, [pc, #640]	; (80118e0 <powf+0x2b0>)
 801165e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8011662:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8011666:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801166a:	0dd2      	lsrs	r2, r2, #23
 801166c:	05d2      	lsls	r2, r2, #23
 801166e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8011672:	1a8b      	subs	r3, r1, r2
 8011674:	ed95 6b00 	vldr	d6, [r5]
 8011678:	ee07 3a90 	vmov	s15, r3
 801167c:	15d2      	asrs	r2, r2, #23
 801167e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011682:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011686:	ed95 6b02 	vldr	d6, [r5, #8]
 801168a:	ee25 2b05 	vmul.f64	d2, d5, d5
 801168e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8011692:	ee07 2a90 	vmov	s15, r2
 8011696:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801169a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801169e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80116a2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80116a6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80116aa:	eea5 3b06 	vfma.f64	d3, d5, d6
 80116ae:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80116b2:	eea5 6b04 	vfma.f64	d6, d5, d4
 80116b6:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 80116ba:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80116be:	eea5 7b04 	vfma.f64	d7, d5, d4
 80116c2:	eea2 7b06 	vfma.f64	d7, d2, d6
 80116c6:	eea3 7b01 	vfma.f64	d7, d3, d1
 80116ca:	ee20 0b07 	vmul.f64	d0, d0, d7
 80116ce:	ee10 3a90 	vmov	r3, s1
 80116d2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80116d6:	f248 03bf 	movw	r3, #32959	; 0x80bf
 80116da:	429a      	cmp	r2, r3
 80116dc:	f0c0 80b1 	bcc.w	8011842 <powf+0x212>
 80116e0:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80118c0 <powf+0x290>
 80116e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80116e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ec:	dd79      	ble.n	80117e2 <powf+0x1b2>
 80116ee:	b003      	add	sp, #12
 80116f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116f4:	f000 b940 	b.w	8011978 <__math_oflowf>
 80116f8:	4298      	cmp	r0, r3
 80116fa:	d32d      	bcc.n	8011758 <powf+0x128>
 80116fc:	b952      	cbnz	r2, 8011714 <powf+0xe4>
 80116fe:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8011702:	005b      	lsls	r3, r3, #1
 8011704:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8011708:	f240 80c9 	bls.w	801189e <powf+0x26e>
 801170c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8011710:	b003      	add	sp, #12
 8011712:	bd30      	pop	{r4, r5, pc}
 8011714:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8011718:	d105      	bne.n	8011726 <powf+0xf6>
 801171a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801171e:	0064      	lsls	r4, r4, #1
 8011720:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8011724:	e7f0      	b.n	8011708 <powf+0xd8>
 8011726:	004b      	lsls	r3, r1, #1
 8011728:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801172c:	d8ee      	bhi.n	801170c <powf+0xdc>
 801172e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8011732:	d1eb      	bne.n	801170c <powf+0xdc>
 8011734:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011738:	f000 80b1 	beq.w	801189e <powf+0x26e>
 801173c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011740:	ea6f 0404 	mvn.w	r4, r4
 8011744:	bf34      	ite	cc
 8011746:	2300      	movcc	r3, #0
 8011748:	2301      	movcs	r3, #1
 801174a:	0fe4      	lsrs	r4, r4, #31
 801174c:	42a3      	cmp	r3, r4
 801174e:	f040 80a9 	bne.w	80118a4 <powf+0x274>
 8011752:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8011756:	e7db      	b.n	8011710 <powf+0xe0>
 8011758:	004d      	lsls	r5, r1, #1
 801175a:	1e6a      	subs	r2, r5, #1
 801175c:	429a      	cmp	r2, r3
 801175e:	d31c      	bcc.n	801179a <powf+0x16a>
 8011760:	2900      	cmp	r1, #0
 8011762:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011766:	da0f      	bge.n	8011788 <powf+0x158>
 8011768:	ee10 0a90 	vmov	r0, s1
 801176c:	f7ff ff46 	bl	80115fc <checkint>
 8011770:	2801      	cmp	r0, #1
 8011772:	d109      	bne.n	8011788 <powf+0x158>
 8011774:	eeb1 0a40 	vneg.f32	s0, s0
 8011778:	b945      	cbnz	r5, 801178c <powf+0x15c>
 801177a:	2c00      	cmp	r4, #0
 801177c:	dac8      	bge.n	8011710 <powf+0xe0>
 801177e:	b003      	add	sp, #12
 8011780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011784:	f000 b8fe 	b.w	8011984 <__math_divzerof>
 8011788:	2000      	movs	r0, #0
 801178a:	e7f5      	b.n	8011778 <powf+0x148>
 801178c:	2c00      	cmp	r4, #0
 801178e:	dabf      	bge.n	8011710 <powf+0xe0>
 8011790:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011794:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011798:	e7ba      	b.n	8011710 <powf+0xe0>
 801179a:	2900      	cmp	r1, #0
 801179c:	da1f      	bge.n	80117de <powf+0x1ae>
 801179e:	ee10 0a90 	vmov	r0, s1
 80117a2:	f7ff ff2b 	bl	80115fc <checkint>
 80117a6:	b920      	cbnz	r0, 80117b2 <powf+0x182>
 80117a8:	b003      	add	sp, #12
 80117aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117ae:	f000 b8f9 	b.w	80119a4 <__math_invalidf>
 80117b2:	2801      	cmp	r0, #1
 80117b4:	bf14      	ite	ne
 80117b6:	2000      	movne	r0, #0
 80117b8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80117bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80117c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80117c4:	f4bf af48 	bcs.w	8011658 <powf+0x28>
 80117c8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80118e4 <powf+0x2b4>
 80117cc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80117d0:	ee10 3a10 	vmov	r3, s0
 80117d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117d8:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80117dc:	e73c      	b.n	8011658 <powf+0x28>
 80117de:	2000      	movs	r0, #0
 80117e0:	e7ee      	b.n	80117c0 <powf+0x190>
 80117e2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80118c8 <powf+0x298>
 80117e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80117ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ee:	dd10      	ble.n	8011812 <powf+0x1e2>
 80117f0:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d158      	bne.n	80118aa <powf+0x27a>
 80117f8:	9300      	str	r3, [sp, #0]
 80117fa:	eddd 7a00 	vldr	s15, [sp]
 80117fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011802:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011806:	eef4 7a47 	vcmp.f32	s15, s14
 801180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801180e:	f47f af6e 	bne.w	80116ee <powf+0xbe>
 8011812:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80118d0 <powf+0x2a0>
 8011816:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181e:	d804      	bhi.n	801182a <powf+0x1fa>
 8011820:	b003      	add	sp, #12
 8011822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011826:	f000 b89b 	b.w	8011960 <__math_uflowf>
 801182a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80118d8 <powf+0x2a8>
 801182e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011836:	d504      	bpl.n	8011842 <powf+0x212>
 8011838:	b003      	add	sp, #12
 801183a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801183e:	f000 b895 	b.w	801196c <__math_may_uflowf>
 8011842:	4b29      	ldr	r3, [pc, #164]	; (80118e8 <powf+0x2b8>)
 8011844:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8011848:	ee30 6b07 	vadd.f64	d6, d0, d7
 801184c:	ee16 2a10 	vmov	r2, s12
 8011850:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011854:	f002 011f 	and.w	r1, r2, #31
 8011858:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801185c:	ee30 7b47 	vsub.f64	d7, d0, d7
 8011860:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011864:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8011868:	ee27 4b07 	vmul.f64	d4, d7, d7
 801186c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8011870:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8011874:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011878:	686d      	ldr	r5, [r5, #4]
 801187a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801187e:	1882      	adds	r2, r0, r2
 8011880:	2300      	movs	r3, #0
 8011882:	1918      	adds	r0, r3, r4
 8011884:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8011888:	eea7 0b05 	vfma.f64	d0, d7, d5
 801188c:	ec41 0b17 	vmov	d7, r0, r1
 8011890:	eea6 0b04 	vfma.f64	d0, d6, d4
 8011894:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011898:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801189c:	e738      	b.n	8011710 <powf+0xe0>
 801189e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80118a2:	e735      	b.n	8011710 <powf+0xe0>
 80118a4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80118ec <powf+0x2bc>
 80118a8:	e732      	b.n	8011710 <powf+0xe0>
 80118aa:	9301      	str	r3, [sp, #4]
 80118ac:	eddd 7a01 	vldr	s15, [sp, #4]
 80118b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80118b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118b8:	e7a5      	b.n	8011806 <powf+0x1d6>
 80118ba:	bf00      	nop
 80118bc:	f3af 8000 	nop.w
 80118c0:	ffd1d571 	.word	0xffd1d571
 80118c4:	405fffff 	.word	0x405fffff
 80118c8:	ffa3aae2 	.word	0xffa3aae2
 80118cc:	405fffff 	.word	0x405fffff
 80118d0:	00000000 	.word	0x00000000
 80118d4:	c062c000 	.word	0xc062c000
 80118d8:	00000000 	.word	0x00000000
 80118dc:	c062a000 	.word	0xc062a000
 80118e0:	08012248 	.word	0x08012248
 80118e4:	4b000000 	.word	0x4b000000
 80118e8:	08012370 	.word	0x08012370
 80118ec:	00000000 	.word	0x00000000

080118f0 <sqrtf>:
 80118f0:	b508      	push	{r3, lr}
 80118f2:	ed2d 8b02 	vpush	{d8}
 80118f6:	eeb0 8a40 	vmov.f32	s16, s0
 80118fa:	f000 f817 	bl	801192c <__ieee754_sqrtf>
 80118fe:	eeb4 8a48 	vcmp.f32	s16, s16
 8011902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011906:	d60c      	bvs.n	8011922 <sqrtf+0x32>
 8011908:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011928 <sqrtf+0x38>
 801190c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011914:	d505      	bpl.n	8011922 <sqrtf+0x32>
 8011916:	f7fd f8b1 	bl	800ea7c <__errno>
 801191a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801191e:	2321      	movs	r3, #33	; 0x21
 8011920:	6003      	str	r3, [r0, #0]
 8011922:	ecbd 8b02 	vpop	{d8}
 8011926:	bd08      	pop	{r3, pc}
 8011928:	00000000 	.word	0x00000000

0801192c <__ieee754_sqrtf>:
 801192c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011930:	4770      	bx	lr

08011932 <with_errnof>:
 8011932:	b513      	push	{r0, r1, r4, lr}
 8011934:	4604      	mov	r4, r0
 8011936:	ed8d 0a01 	vstr	s0, [sp, #4]
 801193a:	f7fd f89f 	bl	800ea7c <__errno>
 801193e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011942:	6004      	str	r4, [r0, #0]
 8011944:	b002      	add	sp, #8
 8011946:	bd10      	pop	{r4, pc}

08011948 <xflowf>:
 8011948:	b130      	cbz	r0, 8011958 <xflowf+0x10>
 801194a:	eef1 7a40 	vneg.f32	s15, s0
 801194e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011952:	2022      	movs	r0, #34	; 0x22
 8011954:	f7ff bfed 	b.w	8011932 <with_errnof>
 8011958:	eef0 7a40 	vmov.f32	s15, s0
 801195c:	e7f7      	b.n	801194e <xflowf+0x6>
	...

08011960 <__math_uflowf>:
 8011960:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011968 <__math_uflowf+0x8>
 8011964:	f7ff bff0 	b.w	8011948 <xflowf>
 8011968:	10000000 	.word	0x10000000

0801196c <__math_may_uflowf>:
 801196c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011974 <__math_may_uflowf+0x8>
 8011970:	f7ff bfea 	b.w	8011948 <xflowf>
 8011974:	1a200000 	.word	0x1a200000

08011978 <__math_oflowf>:
 8011978:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011980 <__math_oflowf+0x8>
 801197c:	f7ff bfe4 	b.w	8011948 <xflowf>
 8011980:	70000000 	.word	0x70000000

08011984 <__math_divzerof>:
 8011984:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011988:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801198c:	2800      	cmp	r0, #0
 801198e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8011992:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80119a0 <__math_divzerof+0x1c>
 8011996:	2022      	movs	r0, #34	; 0x22
 8011998:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801199c:	f7ff bfc9 	b.w	8011932 <with_errnof>
 80119a0:	00000000 	.word	0x00000000

080119a4 <__math_invalidf>:
 80119a4:	eef0 7a40 	vmov.f32	s15, s0
 80119a8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80119ac:	eef4 7a67 	vcmp.f32	s15, s15
 80119b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80119b8:	d602      	bvs.n	80119c0 <__math_invalidf+0x1c>
 80119ba:	2021      	movs	r0, #33	; 0x21
 80119bc:	f7ff bfb9 	b.w	8011932 <with_errnof>
 80119c0:	4770      	bx	lr
	...

080119c4 <_init>:
 80119c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119c6:	bf00      	nop
 80119c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ca:	bc08      	pop	{r3}
 80119cc:	469e      	mov	lr, r3
 80119ce:	4770      	bx	lr

080119d0 <_fini>:
 80119d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d2:	bf00      	nop
 80119d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119d6:	bc08      	pop	{r3}
 80119d8:	469e      	mov	lr, r3
 80119da:	4770      	bx	lr
